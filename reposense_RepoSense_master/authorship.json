[
  {
    "path": ".travis.yml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "language: java"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "matrix:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  include:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    - os: linux"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": "      jdk: oraclejdk9"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    - os: osx"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yong24s"
        },
        "content": "script:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  - ./config/travis/run-checks.sh"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  - cd ./frontend; npm run lint src/**/*js; cd .."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "  - time travis_retry ./gradlew clean checkstyleMain checkstyleTest test systemTest"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "addons:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  apt:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    packages:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      - oracle-java9-installer"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yong24s"
        },
        "content": "before_install:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  - cd ./frontend; npm install --only\u003ddev; cd .."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "before_cache:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "cache:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  directories:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    - $HOME/.gradle/caches/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    - $HOME/.gradle/wrapper/"
      }
    ],
    "authorContributionMap": {
      "yong24s": 7,
      "yamidark": 1,
      "eugenepeh": 21
    }
  },
  {
    "path": "README.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# RepoSense"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "[![Build Status](https://travis-ci.org/reposense/RepoSense.svg?branch\u003dmaster)](https://travis-ci.org/reposense/RepoSense)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "[![Build status](https://ci.appveyor.com/api/projects/status/gsbkj5qby3pjd6nw/branch/master?svg\u003dtrue)](https://ci.appveyor.com/project/eugenepeh/reposense/branch/master)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "[![Codacy Badge](https://api.codacy.com/project/badge/Grade/08a3527378464ed4a5ad62e27f590d6a)](https://www.codacy.com/app/reposense/RepoSense?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dreposense/RepoSense\u0026amp;utm_campaign\u003dBadge_Grade)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "[![deploy on_netlify](https://img.shields.io/badge/deploy-on_netlify-blue.svg)](https://reposense.netlify.com/)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "RepoSense is a contribution analysis tool for Git repositories. It generates a static HTML dashboard including contribution information for each author in the repository."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "The features of the report includes:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "* Visualization for contribution frequency"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* Visualization for contribution amount"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* Code review panel"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "* Comparison of contribution between authors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* Filtering and sorting of authors"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "## Documentations"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "* [**User Guide**](https://github.com/reposense/RepoSense/blob/release/docs/UserGuide.md)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "* [**Developer Guide**](docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "## About Us"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "RepoSense is a project based in the [National University of Singapore, School of Computing](http://www.comp.nus.edu.sg/), and is funded by a grant from [NUS Center for Development of Teaching and Learning](http://www.cdtl.nus.edu.sg/)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "* [**Aditya Agarwal**](https://github.com/adityaa1998): _Project Member_ since May 2018"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "* [**Damith C. Rajapakse**](https://github.com/damithc): _Project Mentor_ since Aug 2017"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "* [**Ma Tanghao**](https://github.com/harryggg): _Team Lead_ for May 2017 - May 2018"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "* [**Ong Shu Peng**](https://github.com/ongspxm): _Project Member_ since May 2018"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "* [**Peh Xian Bin, Eugene**](https://github.com/eugenepeh): _Team Lead_ since May 2018"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "* [**Tan Jun An**](https://github.com/yamidark): _Project Member_ since May 2018"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "* [**Teng Yong Hao**](https://github.com/yong24s): _Project Member_ since May 2018"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "## Contributing"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "We welcome pull requests. Please read the [contribution guidelines](docs/Process.md#how-to-contribute-to-the-reposense-repository) before starting work on one."
      }
    ],
    "authorContributionMap": {
      "yamidark": 1,
      "eugenepeh": 20,
      "-": 10
    }
  },
  {
    "path": "appveyor.yml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "# AppVeyor configuration file"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "# For more details see https://www.appveyor.com/docs/build-configuration/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "# Call on gradle to build and run tests"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "# --no-daemon: Prevent the daemon from launching to prevent file-in-use errors"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "#     when we cache the ~/.gradle directory"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "build_script:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    - gradlew.bat --no-daemon clean checkstyleMain checkstyleTest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "test_script:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    - appveyor-retry gradlew.bat --no-daemon test systemTest"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "environment:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    JAVA_HOME: C:\\Program Files\\Java\\jdk9  # Use 64-bit Java"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "# Files/folders to preserve between builds to speed them up"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "cache:"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    - C:\\Users\\appveyor\\.gradle"
      }
    ],
    "authorContributionMap": {
      "yamidark": 1,
      "eugenepeh": 17
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    id \u0027idea\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.4\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    id \u0027com.liferay.node\u0027 version \u00274.4.0\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "mainClassName \u003d \u0027reposense.RepoSense\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "node.nodeVersion \u003d \u002710.5.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_8"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_8"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "wrapper {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yamidark"
        },
        "content": "  gradleVersion \u003d \u00274.9\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": "  testLogging {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    events \u0027passed\u0027, \u0027skipped\u0027, \u0027failed\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    showStandardStreams \u003d true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": "  }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yamidark"
        },
        "content": "sourceSets {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yamidark"
        },
        "content": "  systemtest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    compileClasspath +\u003d main.output + test.output"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    runtimeClasspath +\u003d main.output + test.output"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    java.srcDir file(\u0027src/systemtest/java\u0027)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    resources.srcDir file(\u0027src/systemtest/resources\u0027)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yamidark"
        },
        "content": "  }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yamidark"
        },
        "content": "configurations {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yamidark"
        },
        "content": "  systemtestImplementation.extendsFrom testImplementation"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yamidark"
        },
        "content": "  systemtestRuntime.extendsFrom testRuntime"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    implementation  group: \u0027com.github.javaparser\u0027, name: \u0027javaparser-core\u0027, version: \u00273.0.1\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    implementation  group: \u0027com.google.code.gson\u0027 ,name: \u0027gson\u0027, version:\u00272.8.5\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    implementation  group: \u0027org.apache.ant\u0027, name: \u0027ant\u0027, version: \u00271.10.3\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    implementation  group: \u0027net.sourceforge.argparse4j\u0027, name: \u0027argparse4j\u0027, version: \u00270.8.1\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    implementation  group: \u0027net.freeutils\u0027, name: \u0027jlhttp\u0027, version: \u00272.4\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    archiveName \u003d \u0027RepoSense.jar\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yamidark"
        },
        "content": "task zipReport(dependsOn: \u0027npmRunSpuild\u0027, type: Zip) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    from \u0027frontend/build/\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    baseName \u003d \u0027templateZip\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    destinationDir \u003d file(\u0027src/main/resources\u0027)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yamidark"
        },
        "content": "tasks.shadowJar.dependsOn(\u0027zipReport\u0027);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yamidark"
        },
        "content": "tasks.run.dependsOn(\u0027zipReport\u0027);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yamidark"
        },
        "content": "task systemtest(dependsOn: \u0027zipReport\u0027, type: Test) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yamidark"
        },
        "content": "  testClassesDirs \u003d sourceSets.systemtest.output.classesDirs"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yamidark"
        },
        "content": "  classpath \u003d sourceSets.systemtest.runtimeClasspath"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "  testLogging {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    events \u0027passed\u0027, \u0027skipped\u0027, \u0027failed\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    showStandardStreams \u003d true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yamidark"
        },
        "content": "idea {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    module {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        sourceSets.systemtest.allSource.srcDirs.each { srcDir -\u003e module.testSourceDirs +\u003d srcDir }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "run {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    //the second arguments indicates the default value associated with the property."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    args System.getProperty(\u0027args\u0027, \u0027\u0027).split()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yong24s"
        },
        "content": "tasks.withType(Copy) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    includeEmptyDirs \u003d true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yong24s"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yamidark"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027build\u0027, \u0027systemtest\u0027"
      }
    ],
    "authorContributionMap": {
      "ongspxm": 7,
      "AdityaA1998": 5,
      "yamidark": 47,
      "yong24s": 5,
      "eugenepeh": 14,
      "-": 19
    }
  },
  {
    "path": "docs/Build.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "# Build from Source"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "This guide explains how to compile the executable Jar."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "1. Download our source code by"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "   * using Git clone \u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     e.g. `git clone https://github.com/reposense/RepoSense.git` \u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "   * or download and extract our [zip file](https://github.com/reposense/RepoSense/archive/master.zip)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "2. In the `RepoSense` directory, execute the below command in the terminal \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "   `gradlew shadowJar`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "3. The executable Jar file will be generated in the folder `build` \u003e `jar` with the name `RepoSense.jar` upon successful build."
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 11
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "# RepoSense - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yamidark"
        },
        "content": "Thank you for your interest in contributing to RepoSense!"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "- [Setting up](#setting-up)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "  - [Prerequisites](#prerequisites)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "  - [Setting up the project in your computer using IntelliJ](#setting-up-the-project-in-your-computer-using-intellij)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "  - [Verifying the setup](#verifying-the-setup)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  - [Configuring the Java coding style](#configuring-the-java-coding-style)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  - [Configuring the JavaScript coding style](#configuring-the-javascript-coding-style)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": "- [Architecture](#architecture)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": "  - [Parser](#parserconfigparser)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  - [Git](#git)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "  - [CommitsReporter](#commitsreporter)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": "  - [AuthorshipReporter](#authorshipreporter)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": "  - [ReportGenerator](#reportgeneratormain)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "  - [System](#system)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": "  - [Model](#model)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "- [HTML Dashboard](#html-dashboard)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  - [Dashboard Architecture](#dashboard-architecture)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  - [Javascript Files](#javascript-files)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  - [JSON Report Files](#json-report-files)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  - [Main](#main-mainjs)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  - [Data loader](#data-loader-apijs)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  - [Summary View](#summary-view-v_summaryjs)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  - [Authorship View](#authorship-view-v_authorshipjs)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yamidark"
        },
        "content": "## Setting up"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "### Prerequisites"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "1. **JDK `1.8.0_60`** or later."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": "1. **git `2.14`** or later on the command line."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": " \u003e Type `git --version` on your OS terminal and ensure that you have the correct version of **git**."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": "### Setting up the project in your computer using IntelliJ"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yamidark"
        },
        "content": "1. Fork this repo, and clone the fork to your computer."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yamidark"
        },
        "content": "1. Open *IntelliJ* (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yamidark"
        },
        "content": "1. Set up the correct *JDK* version for *Gradle*."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    1. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    1. Click `New…​` and find the directory of the *JDK*."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yamidark"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yamidark"
        },
        "content": "1. Locate the `build.gradle` file and select it. Click `OK`."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yamidark"
        },
        "content": "1. Ensure that the selected version of `Gradle JVM` matches our prerequisite."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yamidark"
        },
        "content": "1. Click `OK` to accept the all the other default settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yamidark"
        },
        "content": "### Verifying the setup"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yamidark"
        },
        "content": "1. Ensure that *Gradle* builds without error by running the command `gradlew clean build`, and ensure that it finishs with a `BUILD SUCCESSFUL` message."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run the tests to ensure that they all pass by running the command `gradlew test systemtest`, and ensure that it finishs with a `BUILD SUCCESSFUL` message."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yamidark"
        },
        "content": "  \u003e Ensure that you are on the project root directory when using the `gradlew` commands."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "### Configuring the Java coding style"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yamidark"
        },
        "content": "This project follows [oss-generic coding standards](https://oss-generic.github.io/process/docs/CodingStandards.html). *IntelliJ’s* default style is mostly compliant with our *Java* coding convention but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yamidark"
        },
        "content": "1. Go to `File` \u003e `Settings…`​ (*Windows/Linux*), or `IntelliJ IDEA` \u003e `Preferences…`​ (*macOS*)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yamidark"
        },
        "content": "1. Select `Editor` \u003e `Code Style` \u003e `Java`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yamidark"
        },
        "content": "1. Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yamidark"
        },
        "content": "   * For `Class count to use import with \u0027*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yamidark"
        },
        "content": "   * For `Import Layout`, follow this image below:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yamidark"
        },
        "content": "   ![import-order](images/import-order.png)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yamidark"
        },
        "content": "Optionally, you can follow the [Using Checkstyle](UsingCheckstyle.md) document to configure *Intellij* to check style-compliance as you write code."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "### Configuring the JavaScript coding style"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "Our project follows the [Airbnb Javascript Style Guide](https://github.com/airbnb/javascript), the eslint configuration file is available at the root of the project. Please run a `npm run lint -- --fix frontend/src/**/*js` from the project root directory and fix all of the eslint errors before committing your code for final review."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "Eslint and its accompaning modules can be installed through NPM, so do ensure that you got it [installed](https://www.npmjs.com/get-npm) if you are working on the dashboard."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yamidark"
        },
        "content": "### Before writing code"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yamidark"
        },
        "content": "1. Do check out our [process guide](../docs/Process.md) before submitting any PR with your changes."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "### Building and running RepoSense from code"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "1. Execute the following command on the OS terminal inside the project directory. \u003cbr/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Usage: `gradlew run -Dargs\u003d\"([-config CONFIG_FOLDER] | [-repos REPO_PATH_OR_URL...]) [-view [REPORT_FOLDER]] [-output OUTPUT_DIRECTORY] [-since DD/MM/YYYY] [-until DD/MM/YYYY] [-formats FORMAT...] [-isac | --ignore-standalone-config]\"` \u003cbr/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Sample usage to generate the report with no specify arguments: (find and use config files in current working directory)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "gradlew run"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Sample usage to generate the report with config files and automatically open the report:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "gradlew run -Dargs\u003d\"-config ./configs/ -output output_path/ -since 21/10/2017 -until 21/11/2017 -formats java adoc js -view\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Sample usage to generate the report with repository locations and automatically open the report:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "gradlew run -Dargs\u003d\"-repos https://github.com/reposense/RepoSense.git https://github.com/se-edu/collate.git -output output_path/ -since 21/10/2017 -until 21/11/2017 -formats java adoc js -view\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Sample usage to generate the report with repository locations but ignore the standalone config file:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "gradlew run -Dargs\u003d\"-repos https://github.com/reposense/RepoSense.git https://github.com/se-edu/collate.git --ignore-standalone-config\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Sample usage to view the report:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "gradlew run -Dargs\u003d\"-view output_path/reposense-report\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "`-Dargs\u003d\"...\"` uses the same argument format as mentioned above."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yamidark"
        },
        "content": "## Architecture"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yamidark"
        },
        "content": " ![architecture](images/architecture.png)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yamidark"
        },
        "content": "*Figure 1. Overall architecture of RepoSense*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yamidark"
        },
        "content": "### Parser(ConfigParser)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yamidark"
        },
        "content": "`Parser` contains two classes:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * [`ArgsParser`](/src/main/java/reposense/parser/ArgsParser.java): Parses the user-supplied command line arguments into a `CliArguments` object."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * [`CsvParser`](/src/main/java/reposense/parser/CsvParser.java): Parses the the user-supplied CSV config file into a list of `RepoConfiguration` for each repository to analyze."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "### Git"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "`Git` package contains the wrapper classes for respective *git* commands."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * [`GitBlame`](/src/main/java/reposense/git/GitBlame.java): Wrapper class for `git blame` functionality. Traces the revision and author last modified each line of a file."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * [`GitBranch`](/src/main/java/reposense/git/GitBranch.java): Wrapper class for `git branch` functionality. Gets the name of the working branch of the target repo."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * [`GitCheckout`](/src/main/java/reposense/git/GitCheckout.java): Wrapper class for `git checkout` functionality. Checks out the repository by branch name or commit hash."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * [`GitClone`](/src/main/java/reposense/git/GitClone.java): Wrapper class for `git clone` functionality. Clones the repository from *GitHub* into a temporary folder in order to run the analysis."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * [`GitDiff`](/src/main/java/reposense/git/GitDiff.java): Wrapper class for `git diff` functionality. Obtains the changes between commits."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * [`GitLog`](/src/main/java/reposense/git/GitLog.java): Wrapper class for `git log` functionality. Obtains the commit logs and the authors\u0027 info."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * [`GitRevList`](/src/main/java/reposense/git/GitRevList.java): Wrapper class for `git rev-list` functionality. Retrieves the commit objects in reverse chronological order."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * [`GitShortlog`](/src/main/java/reposense/git/GitShortlog.java): Wrapper class for `git shortlog` functionality. Obtains the list of authors who have contributed to the target repo."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yamidark"
        },
        "content": "### CommitsReporter"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yamidark"
        },
        "content": "[`CommitsReporter`](/src/main/java/reposense/commits/CommitsReporter.java) is responsible for analyzing the **commit** history and generating a [`CommitContributionSummary`](/src/main/java/reposense/commits/model/CommitContributionSummary.java) for each repository. `CommitContributionSummary` contains information such as each author\u0027s daily and weekly contribution and the variance of their contribution. `CommitsReporter`,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yamidark"
        },
        "content": " 1. uses [`CommitInfoExtractor`](/src/main/java/reposense/commits/CommitInfoExtractor.java) to run the `git log` command, which generates the statistics of each commit made within date range."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yamidark"
        },
        "content": " 1. generates a [`CommitInfo`](/src/main/java/reposense/commits/model/CommitInfo.java) for each commit, which contains the `infoLine` and `statLine`."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yamidark"
        },
        "content": " 1. uses [`CommitInfoAnalyzer`](/src/main/java/reposense/commits/CommitInfoAnalyzer.java) to extract the relevant data from `CommitInfo` into a [`CommitResult`](/src/main/java/reposense/commits/model/CommitResult.java), such as the number of line insertions and deletions in the commit and the author of the commit."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yamidark"
        },
        "content": " 1. uses [`CommitResultAggregator`](/src/main/java/reposense/commits/CommitResultAggregator.java) to aggregate all `CommitResult` into a [`CommitContributionSummary`](/src/main/java/reposense/commits/model/CommitContributionSummary.java)."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yamidark"
        },
        "content": "### AuthorshipReporter"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yamidark"
        },
        "content": "[`AuthorshipReporter`](/src/main/java/reposense/authorship/AuthorshipReporter.java) is responsible for analyzing the white listed **files**, traces the original author for each line of text/code, and generating an [`AuthorshipSummary`](/src/main/java/reposense/authorship/model/AuthorshipSummary.java) for each repository. `AuthorshipSummary` contains the analysis results of the white listed files and the amount of line contributions each author made. `AuthorshipReporter`,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yamidark"
        },
        "content": " 1. uses [`FileInfoExtractor`](/src/main/java/reposense/authorship/FileInfoExtractor.java) to traverse the repository to find all relevant files."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yamidark"
        },
        "content": " 1. generates a [`FileInfo`](/src/main/java/reposense/authorship/model/FileInfo.java) for each relevant file, which contains the path to the file and a list of [`LineInfo`](/src/main/java/reposense/authorship/model/LineInfo.java) representing each line of the file."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yamidark"
        },
        "content": " 1. uses [`FileInfoAnalyzer`](/src/main/java/reposense/authorship/FileInfoAnalyzer.java) to analyze each file, using `git blame` or annotations, and finds the `Author` for each `LineInfo`."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yamidark"
        },
        "content": " 1. generates a [`FileResult`](/src/main/java/reposense/authorship/model/FileResult.java) for each file, which consolidates the authorship results into a *Map* of each author\u0027s line contribution to the file."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yamidark"
        },
        "content": " 1. uses [`FileResultAggregator`](/src/main/java/reposense/authorship/FileResultAggregator.java) to aggregate all `FileResult` into an `AuthorshipSummary`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yamidark"
        },
        "content": "### ReportGenerator(Main)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yamidark"
        },
        "content": "[`ReportGenerator`](/src/main/java/reposense/report/ReportGenerator.java),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yamidark"
        },
        "content": " 1. uses `GitDownloader` API to download the repository from *GitHub*."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yamidark"
        },
        "content": " 1. copies the template files into the designated output directory."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yamidark"
        },
        "content": " 1. uses `CommitReporter` and `AuthorshipReporter` to produce the commit and authorship summary respectively."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yamidark"
        },
        "content": " 1. generates the `JSON` files needed to generate the `HTML` dashboard."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yamidark"
        },
        "content": "### System"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yamidark"
        },
        "content": "`System` contains the classes that interact with the Operating System and external processes."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * [`CommandRunner`](/src/main/java/reposense/system/CommandRunner.java) creates processes that executes commands on the terminal. It consists of many *git* commands."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * [`LogsManager`](/src/main/java/reposense/system/LogsManager.java) uses the `java.util.logging` package for logging. The `LogsManager` class is used to manage the logging levels and logging destinations. Log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": " * [`DashboardServer`](/src/main/java/reposense/system/DashboardServer.java) starts a server to display the dashboard on the browser. It depends on the `net.freeutils.httpserver` package."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yamidark"
        },
        "content": "### Model"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yamidark"
        },
        "content": "`Model` holds the data structures that are commonly used by the different aspects of *RepoSense*."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * [`Author`](/src/main/java/reposense/model/Author.java) stores the `GitHub ID` of an author. Any contributions or commits made by the author, using his/her `GitHub ID` or aliases, will be attributed to the same `Author` object. It is used by `AuthorshipReporter` and `CommitsReporter` to attribute the commit and file contributions to the respective authors."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * [`CliArguments`](/src/main/java/reposense/model/CliArguments.java) stores the parsed command line arguments supplied by the user. It contains the configuration settings such as the CSV config file to read from, the directory to output the report to, and date range of commits to analyze. These configuration settings are passed into `RepoConfiguration`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * [`RepoConfiguration`](/src/main/java/reposense/model/RepoConfiguration.java) stores the configuration information from the CSV config file for a single repository, which are the repository\u0027s orgarization, name, branch, list of authors to analyse, date range to analyze commits and files from `CliArguments`."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yamidark"
        },
        "content": " These configuration information are used by:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    - `GitDownloader` to determine which repository to download from and which branch to check out to."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    - `AuthorshipReporter` and `CommitsReporter` to determine the range of commits and files to analyze."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    - `ReportGenerator` to determine the directory to output the report."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yamidark"
        },
        "content": "## HTML Dashboard"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "The source files for the dashboard is located in [`frontend/src`](../frontend/src) and is built by [spuild](https://github.com/ongspxm/spuild2) before being packaged into the JAR file to be extracted as part of the report."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "The main HTML file is generated from [`frontend/src/index.jade`](../frontend/src/index.jade)."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "[Vue](https://vuejs.org/v2/api/) (pronounced /vjuː/, like view) is a progressive framework for building user interfaces. It is heavily ultilized in the dashboard to dynamically update the information in the various views. (Style guide available [here](https://vuejs.org/v2/style-guide/))."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "![dashboard screenshot](images/dashboard.png)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "### Dashboard Architecture"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "![dashboard architecture](images/dashboard-architecture.png)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "The main Vue object (`window.app`) is responsible for the loading of the dashboard (through `summary.json`). Its `repos` attribute is tied to the global `window.REPOS`, and is passed into the various other modules when the information is needed."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "`window.app` is broken down into two main parts"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "- the summary view"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "- and the tabbed interface"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "Summary view act as the main dashboard which shows the various calculations. \u003c/br\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "Tabbed interface is responsible for loading various modules such as authorship to display additional information."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "### Javascript Files"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "- [**main.js**](../frontend/src/static/js/main.js) - main controller that pushes content into different modules"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "- [**api.js**](../frontend/src/static/js/api.js)- loading and parsing of the dashboard content"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "- [**v_summary.js**](../frontend/src/static/js/v_summary.js) - module that supports the ramp chart view"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "- [**v_authorship.js**](../frontend/src/static/js/v_authorship.js) - module that supports the authorship view"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "### JSON Report Files"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "- **summary.json** - a list of all the repositories and their respective details"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "- **projName/commits.json** - contains information of the users\u0027 commits information (e.g. line deletion, insertion, etc), grouped by date"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "- **projName/authorship.json** - contains information from git blame, detailing the author of each line for all the processed files"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "### Main (main.js)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "This contains the logic for main VueJS object, `window.app`, which is responsible for passing the necessary data into the relevant modules to be loaded."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "`v_summary` and `v_authorship` are components which will be embedded into dashboard and will render the corresponding content based on the data passed into it from the main `window.app`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "#### Loading of dashboard information"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "The main Vue object depends on the `summary.json` data to determine the right `commits.json` files to load into memory. This is handled by `api.js` which loads the relevant file information from the network files if it is available, otherwise a report archive, `archive.zip`, have to be used."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "Once the relevant `commit.json` files are loaded, all the repo information will be passed into `v_summary` to be loaded in the summary view as the relevant ramp charts."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "#### Activating additional view modules"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "Most activity or actions should happen within the module itself, but in the case where there is a need to spawn or alter the view of another module, an event is emitted from the first module to the main Vue object (`window.app`), which then handles the data received and passes it along to the relevant modules."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "#### Hash link"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "Other than the global main Vue object, another global variable we have is the `window.hashParams`. This object is reponsible for generating the relevant permalink for a specific view of the summary module for the dashboard."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "### Data loader (api.js)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "This is the module that is in charged of loading and parsing the data files generated as part of the report."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "#### Loading from ZIP file"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "Due to security design, most modern browsers (e.g. Chrome) do not allow web pages to obtain local files using the directory alone. As such, a ZIP archive of the report information will be produced alongside the report generation."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "This archive will be used in place of the network files to load information into the dashboard, in the case when the network files are unavailable."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "The API module will be handling all request for all the JSON data files. If the network file is not available, the files will be obtained from the zip archive provided."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "#### Retrieving and parsing information"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "After the JSON files are loaded from their respective sources, the data will be parsed as objects and included inside the global storage object, `window.REPOS`,  in the right format."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "For the basic skeleton of `window.REPOS`, refer to the generated `summary.json` file in the report for more details."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "### Summary View (v_summary.js)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "The `v_summary` module is in charge of loading the ramp charts from the corresponding `commits.json`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "![summary architecture](images/dashboard-architecture-summary.png)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "#### Initializing the data for the ramp charts"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "The summary module is activated after the information is loaded from the main Vue.JS object. At creation, the `repo` attribute is populated with the `window.REPOS` object, which contains information loaded from `summary.json`."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "#### Filtering users and repositories"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "The commits information is retrieved from the corresponding project folders for each repository. These information will be filtered and sorted before passed into the template to be displayed as ramp charts."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "#### Padding for dates"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "For ramps between the date ranges, the slices will be selected and it will be pre and post padded with empty slices to align the ramp slice between the `sinceDate` and `untilDate`. The ramps will then be rendered with the slices in the right position."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "### Authorship View (v_authorship.js)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "The authorship module retrieves the relevant information from the corresponding `authorship.json` file if it is not yet loaded. If it has been loaded, the data will be written into `window.REPOS` and be read from there instead."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "![authorship architecture](images/dashboard-architecture-authorship.png)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "#### Showing relevant information by authors"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "The files will be filtered, picking only files the selected author has written in. The lines are then split into chunks of \"touched\" and \"untouched\" code to be displayed in the tab view which will be popped up on the right side of the screen."
      }
    ],
    "authorContributionMap": {
      "ongspxm": 94,
      "AdityaA1998": 1,
      "yamidark": 111,
      "eugenepeh": 11,
      "-": 32
    }
  },
  {
    "path": "docs/Process.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "# Process"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "We generally follow the  [The OSS-Generic Reference Process](https://oss-generic.github.io/process/) but with the following deviations."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "* We will squash the commits when merging a PR. Therefore, there is no need to follow a strict commit organization or write elaborate commit messages for each commit. There is no need to use CanIHasReview tool either. However, when pushing new commits to your PR branch, do tidy up _new_ commits (i.e., commits not yet pushed) e.g., squash noise commits."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "* When syncing local branch with upstream, use _merge_ rather than _rebase_ to avoid the need to force push your branch."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "## How to contribute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "Here\u0027s a quick guide on how you can contribute to our repository:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "1. [Look for an open issue to work on](https://github.com/reposense/RepoSense/issues), or start a fresh issue to discuss a potential feature or bug."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "2. Make a fork of our repository, and create a new branch (with a meaningful name)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "3. Start making your changes while following our Coding Standard for"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "[Java](https://oss-generic.github.io/process/codingStandards/CodingStandard-Java.html),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "[JavaScript](https://docs.google.com/document/d/1gZ6WG6HBTJYHAtVkz9kzi_SUuzfXqzO-SvFnLuag2xM/pub?embedded\u003dtrue),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "[CSS](https://oss-generic.github.io/process/codingStandards/CodingStandard-Css.html),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "and [HTML](https://oss-generic.github.io/process/codingStandards/CodingStandard-Html.html)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "4. Open a pull request and propose a good commit message for your pull request by following our [commit organization](https://oss-generic.github.io/process/docs/FormatsAndConventions.html#commit-message)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "5. Let us know when you are ready for a review! If you haven\u0027t heard back from us after a couple of days, do probe us by leaving a comment on the pull request."
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 19
    }
  },
  {
    "path": "docs/UserGuide.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "# RepoSense - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "* [Getting Started](#getting-started)"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "* [Interpreting the Report](#interpreting-the-report)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  * [Chart Panel](#chart-panel)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  * [Code Panel](#code-panel)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Tool Bar](#tool-bar)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuring a Repo to Provide Additional Data to RepoSense](#configuring-a-repo-to-provide-additional-data-to-reposense)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Provide Data Using a json Config File](#provide-data-using-a-json-config-file)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Provide Data Using `@@author` Tags](#provide-data-using-author-tags)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "* [Customizing the Analysis](#customizing-the-analysis)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Customize Using Command Line Parameters](#customize-using-command-line-parameters)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Customize Using csv Config Files](#customize-using-csv-config-files)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    * [`repo-config.csv`](#repo-configcsv)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    * [`author-config.csv`](#author-configcsv)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* [Analyzing Multiple Repos](#analyzing-multiple-repos)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "* [FAQ](#faq)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "## Getting Started"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "First, ensure that you have the necessary prerequisites:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* **JDK `1.8.0_60`** or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* **git `2.14`** or later on the command line (run `git --version` in your OS terminal to confirm)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Next, download the latest executable Jar from our [releases](https://github.com/reposense/RepoSense/releases/latest)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "The simplest use case for RepoSense is to generate a report for the entire history of a repo. Here are the steps:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate the report for the repo by executing the following command in a terminal:\u003cbr/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "   Format : `java -jar RepoSense.jar -repo FULL_REPO_URL` (note the `.git` at the end)\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   Example: `java -jar RepoSense.jar -repo https://github.com/reposense/RepoSense.git`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "1. The previous step analyzes the default branch of the repo and creates the report in a directory named `reposense-report`. Run the following command to view the report (it will open up in your default Browser):\u003cbr/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   `java -jar RepoSense.jar -view reposense-report`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can combine the 2 steps by running the following command to generate the report and automatically open it afterwards:\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    `java -jar RepoSense.jar -repo FULL_REPO_URL -view`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "## Interpreting the Report"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "As the report consist of static pages, it can be viewed using a Web Browser, and can be deployed on most Web hosting platforms (such as [GitHub Pages](https://pages.github.com/)). Assuming the report has been generated already, here are the two options to load the report onto a Browser:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Run RepoSense with the `-view` option:\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  Format: `java -jar RepoSense.jar -view REPORT_FOLDER`\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  Example: `java -jar RepoSense.jar -view ./myReport/reposense-report`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Open the `index.html` (in the report directory) using a Browser and if the report was not loaded automatically, upload the `archive.zip` (in the same directory) manually."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Here is an example of how the report looks like:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "![report](images/report.png)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "It consists of three main parts: the [_Chart Panel_](#chart-panel), the [_Code Panel_](#code-panel), and the [_Tool Bar_](#tool-bar),  each of which is explained in the sections below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "### Chart Panel"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "![Ramp Charts](images/rampchart.png)\u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "The `Chart Panel` (an example is shown above) contains _Ramp Charts_ and _Contribution Bars_."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "**Ramp Chart**: This is a visualization of frequency and quantity of contributions of an author for a specific repository."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* **Title**: Each title consists of the **index**, the **name** of the author, a button to view author\u0027s **code** and a button to view author\u0027s **repo**."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* **Rows**: Each _row_ (i.e., light blue rectangle) represents the contribution timeline of an author for a specific repository."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* **Ramp**: Each row contains **ramps** -- the pointy saw-tooth shapes you see in the screenshot above. A ramp represents the contributions of an author possibly aggregated over a period (e.g., a day or a week)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  * The area of the ramp is proportional to the amount of contribution the author did at that time period."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  * The position of the right edge of the ramp (perpendicular to the blue bar) represents the period (the day or the week) in which the contribution was made."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "  * Hover the pointer over a ramp to see the total number of lines represented by that ramp."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "  * Click on the ramp to see on GitHub the list of commits represented by that ramp."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* To make comparison between two authors easier, the color of the ramps that represent different authors\u0027 contributions at the same time period are the same."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Ramps representing big contributions can overlap with earlier time periods. This represents the possibility that if the work committed during a specific period is big, it could have started in an earlier time period."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "**Contribution Bar**: The total amount of code contributed by an author during the _total analysis period_ is represented by the length of the **red bars** (called _contribution bars_) that appear at the bottom of the row."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* Hover over a contribution bar to see the exact amount of the contribution."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* If an author contributed significantly higher than other authors, the contribution bar can span multiple lines (see the 4th author in the screenshot for an example)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "### Code Panel"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The `Code Panel` allows users to see the code attributed to a specific author. Click on the name of the author in the `Chart Panel` to display the `Code Panel` on the right."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* The Code Panel shows the files that contain author\u0027s contributions, sorted by the number of lines written."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* Select the checkboxes to include files of preferred file extensions."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* Clicking the file title toggles the file content."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* Clicking the first icon beside the file title opens the history view of the file on github."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* Clicking the second icon beside the file title opens the blame view of the file on github."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Code attributed to the author is highlighted in green."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Non-trivial code segments that are not written by the selected author are hidden by default, but you can toggle them by clicking on the `...` icon."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "### Tool Bar"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "The `Tool Bar` at the top provides a set of configuration options that control the Chart Panel."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* `Search` : filters the author and repository by keywords."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "  * Multiple keywords/terms can be used, separated by spaces."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "  * Entries that contain _any_ (not necessarily _all_) of the search terms will be displayed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "  * The keywords used to filter author and repository are case-insensitive."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* `Sort by` : sorting criteria for the Chart Panel"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "  * `Total Contribution` : the amount of lines, written by the author, in the repository."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "  * `Variance` : the [variance](https://en.wikipedia.org/wiki/Variance) of the number of lines that the author has contributed to the repository daily, sorted from low to high."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "  * `Author Name` : the author\u0027s display name."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "  * `Repo/Branch Name` : see note [1] below."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* `Granularity` : the period of time for which commits are aggregated in the Ramp Chart."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    * `Day`: commits within a day (commits made within 00:00 to 23:59 in **GMT+8**) are shown as one ramp"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    * `Week`:  commits within a week are shown as one ramp"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* `Since`, `Until` : the date range for the Ramp Chart (not applied to the Contribution Bars)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* `Reverse` : if checked, the sorting will be done in the reverse order of the default sorting order"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* `Group` : if checked, authors from the same repo/branch\u003csup\u003e[1]\u003c/sup\u003e will be grouped together. This has precedence over the `sort by` feature; the `sort by` feature will only change display order of the authors under the same repo/branch\u003csup\u003e[1]\u003c/sup\u003e."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Notes:\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[1] **`Repo/Branch`**: the repo/branch name is constructed as `ORGANIZATION_REPOSITORY_BRANCH` e.g., `resposense_reposense_master`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "**Bookmarking a specific toolbar setting**: The URL changes according to the toolbar configuration. You can save a specific configuration of the report by bookmarking the url (using browser functionality)."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "## Configuring a Repo to Provide Additional Data to RepoSense"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "When a repo is being analyzed by RepoSense, there are **two ways repo owners can provide additional details to RepoSense**: using a config file, or annotating code using `@@author` tags. The two approaches are explained in the sections below."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "### Provide Data Using a json Config File"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Repo owners can provide the following additional information to RepoSense using a config file that we call the **_standalone config file_**:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* which files/authors/commits to analyze/omit"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "* which git and GitHub usernames belong to which authors"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* the display of an author"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "To use this feature, add a `_reposense/config.json`  to the root of your repo using the format in the example below ([another example](../_reposense/config.json)) and **commit it** (reason: RepoSense can see committed code only):"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "```json"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "  \"ignoreGlobList\": [\"about-us/**\", \"**index.html\"],"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "  \"formats\": [\"html\", \"css\"],"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "  \"ignoreCommitList\": [\"90018e49f129ce7e0abdc8b18e91c9813588c601\", \"67890def\"],"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "  ["
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "      \"githubId\": \"alice\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      \"emails\": [\"alice@example.com\", \"alicet@example.com\"],"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "      \"displayName\": \"Alice T.\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "      \"authorNames\": [\"AT\", \"A\"],"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "      \"ignoreGlobList\": [\"**.css\"]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "      \"githubId\": \"bob\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Note: all fields are optional unless specified otherwise."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "**Fields to provide _repository-level_ info**:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* `ignoreGlobList`: Folders/files to ignore, specified using the [_glob format_](https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob)."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* `formats`: File formats to analyze. Default: `adoc cs css fxml gradle html java js json jsp md py tag txt xml`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* `ignoreCommitList`: The list of commits to ignore during analysis. For accurate results, the commits should be provided with their full hash."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "**Fields to provide _author-level_ info**:\u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note: `authors` field should contain _all_ authors that should be captured in the analysis."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "* `githubId`: GitHub username of the author. :exclamation: Mandatory field."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "* `emails`: Associated GitHub emails of the author. This can be found in your [GitHub settings](https://github.com/settings/emails)."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* `displayName`: Name to display on the report for this author."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* `authorNames`: Git Author Name(s) used in the author\u0027s commits. By default RepoSense assumes an author would use her GitHub username as the Git username too. The meaning of _Git Author Name_ is explained in [_A Note About Git Author Name_](#a-note-about-git-author-name)."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* `ignoreGlobList`: _Additional_ (i.e. on top of the repo-level `ignoreGlobList`) folders/files to ignore for a specific author . In the example above, the actual `ignoreGlobList` for `alice` would be `[\"about-us/**\", \"**index.html\", \"**.css\"]`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "To verify your standalone configuration is as intended, add the `_reposense/config.json` to your local copy of repo and run RepoSense against it as follows:\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Format : `java -jar RepoSense.jar -repo LOCAL_REPO_LOCATION` \u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* Example: `java -jar RepoSense.jar -repo c:/myRepose/foo/bar`\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "After that, view the report to see if the configuration you specified in the config file is being reflected correctly in the report."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "##### **A Note About Git Author Name**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "`Git Author Name` refers to the customizable author\u0027s display name set in the local `.gitconfig` file. For example, in the Git Log\u0027s display:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "commit cd7f610e0becbdf331d5231887d8010a689f87c7"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "Author: ConfiguredAuthorName \u003cauthor@example.com\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Date:   Fri Feb 9 19:14:41 2018 +0800"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    Make some changes to show my new author\u0027s name"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "commit e3f699fd4ef128eebce98d5b4e5b3bb06a512f49"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "Author: ActualGitHubId \u003cauthor@example.com\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "Date:   Fri Feb 9 19:13:13 2018 +0800"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    Initial commit"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": " ..."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "`ActualGitHubId` and `ConfiguredAuthorName` are both `Git Author Name` of the same author. To set the author name to the value you want (e.g., to set it to your GitHub username), you can use the following command ([more info](https://www.git-tower.com/learn/git/faq/change-author-name-email)):"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "git config --global user.name \"YOUR_AUTHOR_NAME”"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "RepoSense expects the Git Author Name to be the same as author\u0027s GitHub username. If an author\u0027s `Git Author Name` is different from her `GitHub ID`, the `Git Author Name` needs to be specified in the standalone config file. If the author has more than one `Git Author Name`, multiple values can be entered too."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yamidark"
        },
        "content": "\u003e Note: Symbols such as `\"`, `!`, `/` etc. in your author name will be omitted, which may reduce the accuracy of the analysis if 2 names in the repository are approximately similar."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "### Provide Data Using `@@author` Tags"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "If you want to override the code authorships deduced by RepoSense (which is based on Git blame/log data), you can use `@@author` tags to specify certain code segments should be credited to a certain author irrespective of git history. An example scenario where this is useful is when a method was originally written by one author but a second author did some minor refactoring to it; in this case RepoSense might attribute the code to the second author while you may want to attribute the code to the first author."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "There are 2 types of `@@author` tags:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "- Start Tags (format: `@@author AUTHOR_GITHUB_ID`): A start tag indicates the start of a code segment written by the author identified by the `AUTHOR_GITHUB_ID`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "- End Tags (format: `@@author`): Optional. If not provided, the code till the next start tag (or the end of the file) will be attributed to the author specified in the start tag above. Use only when necessary to minimize polluting your code with these extra tags."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "The `@@author` tags should be enclosed within a comment, using the comment syntax of the file in concern. Below are some examples:"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "![author tags](images/add-author-tags.png)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "Special thanks to [Collate](https://github.com/se-edu/collate) for providing the inspiration for this functionality."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "Note: Remember to **commit** the files after the changes. (reason: RepoSense can see committed code only)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "## Customizing the Analysis"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "The analysis can be customized using additional command line parameters or using config files. The two approaches are explained in the sections below."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "### Customize Using Command Line Parameters"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, `java -jar RepoSense.jar` takes the following parameter:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **`-repo REPO_LOCATION`**: The URL or the disk location of the git repositories to analyze.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "  Example using URL: `-repo https://github.com/reposense/RepoSense.git`\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "  Example using disk location: `-repo C:\\Users\\user\\Desktop\\GitHub\\RepoSense`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "In addition, there are some _optional_ extra parameters you can use to customize the analysis further:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* **`-output OUTPUT_DIRECTORY`**: Indicates where to save the report generated. Default: current directory.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "  Example: `-output ./foo` (in this case, the report will be in the `./foo/reposense-report` folder)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **`-since START_DATE`**: The start date of analysis. Format: `DD/MM/YYYY`\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  Example:`-since 21/10/2017`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* **`-until END_DATE`**: The end date of analysis. The analysis excludes the end date. Format: `DD/MM/YYYY`\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  Example:`-until 21/10/2017`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* **`-formats LIST_OF_FORMATS`**: A space-separated list of file extensions that should be included in the analysis. Default: `adoc cs css fxml gradle html java js json jsp md py tag txt xml`\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "  Example:`-formats css fxml gradle`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* **`-isac, --ignore-standalone-config`**: A flag to ignore the standalone config file in the repo (`-isac` as alias). This flag will not overwrite the `Ignore standalone config` field in the csv config file. Default: the standalone config file is not ignored.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "  Example:`--ignore-standalone-config` or `-isac`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* **`-view [REPORT_FOLDER]`**: A flag to launch the report automatically after processing. Note that if the `REPORT_FOLDER` argument is given, no analysis will be performed and the report specified by the argument will be opened.\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Example:`-view`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "Here\u0027s an example of a command using all parameters:\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "`java -jar RepoSense.jar -repo https://github.com/reposense/RepoSense.git -output ./report_folder -since 21/10/2017 -until 21/11/2017 -formats java adoc js -view -isac`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "### Customize Using csv Config Files"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Another, more powerful, way to customize the analysis is by using dedicated config files. In this case you need to use the `-config` parameter instead of the `-repo` parameter when running RepoSense, as follows:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* **`-config CONFIG_DIRECTORY`**: The directory in which you have the config files.\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "  Example:`java -jar RepoSense.jar -config  ./my_configs`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "The directory used with the `-config` parameter should contain a `repo-config.csv` file and, optionally, an `author-config.csv` file, both of which are described in the sections below."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "#### `repo-config.csv`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "`repo-config.csv` file contains repo-level config data as follows:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* First row: column headings, ignored by RepoSense"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* Second row: repo data"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Here is an example:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Repository\u0027s Location|Branch|File formats|Ignore Glob List|Ignore standalone config|Ignore Commits List"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "---------------------|------|------------|----------------|------------------------|-------------------"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "`https://github.com/foo/bar.git`|`master`|`java;css`|`test/**`|`yes`|`2fb6b9b2dd9fa40bf0f9815da2cb0ae8731436c7;c5a6dc774e22099cd9ddeb0faff1e75f9cf4f151`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Column Name | Explanation"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "----------- | -----------"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "Repository\u0027s Location | The `GitHub URL` or `Disk Path` to the git repository e.g., `https://github.com/foo/bar.git` or `C:\\Users\\user\\Desktop\\GitHub\\foo\\bar`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Branch | The branch to analyze in the target repository e.g., `master`. Default: the default branch of the repo"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] File formats\u003csup\u003e*\u003c/sup\u003e | The file extensions to analyze. Default: `adoc;cs;css;fxml;gradle;html;java;js;json;jsp;md;py;tag;txt;xml`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Ignore Glob List\u003csup\u003e*\u003c/sup\u003e | The list of file path globs to ignore during analysis for each author. e.g., `test/**;temp/**`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Ignore standalone config | To ignore the standalone config file (if any) in target repository, enter **`yes`**. If the cell is empty, the standalone config file in the repo (if any) will take precedence over configurations provided in the csv files."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Ignore Commit List\u003csup\u003e*\u003c/sup\u003e | The list of commits to ignore during analysis. For accurate results, the commits should be provided with their full hash."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "\u003csup\u003e* **Multi-value column**: multiple values can be entered in this column using a semicolon `;` as the separator.\u003c/sup\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "#### `author-config.csv`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can use a `author-config.csv` (which should be in the same directory as `repo-config.csv` file) to provide more details about the authors to analyze ([example](author-config.csv)). It should contain the following columns:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Column Name | Explanation"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "----------- | -----------"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Repository\u0027s Location | Same as `repo-config.csv`. Default: all the repos in `repo-config.csv`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Branch | The branch to analyze for this author e.g., `master`. Default: the default branch of the repo"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Author\u0027s GitHub ID | GitHub username of the target author e.g., `JohnDoe`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "[Optional] Author\u0027s Emails\u003csup\u003e*\u003c/sup\u003e | Associated Github emails of the author. This can be found in your [GitHub settings](https://github.com/settings/emails)."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Author\u0027s Display Name | The name to display for the author. Default: author\u0027s GitHub username."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Author\u0027s Git Author Name\u003csup\u003e*\u003c/sup\u003e | The meaning of _Git Author Name_ is explained in [_A Note About Git Author Name_](#a-note-about-git-author-name)."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "[Optional] Ignore Glob List\u003csup\u003e*\u003c/sup\u003e | Files to ignore for this author, in addition to files ignored by the patterns specified in `repo-config.csv`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003csup\u003e* **Multi-value column**: multiple values can be entered in this column using a semicolon `;` as the separator.\u003c/sup\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yamidark"
        },
        "content": "If `author-config.csv` is not given and the repo has not provide author details in a standalone config file, all the authors of the repositories within the date range specified (if any) will be analyzed."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chr\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "## Analyzing Multiple Repos"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "This section assumes that you have read the earlier sections of the user guide."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "The simplest way to analyze multiple repos in one go is to use the `-repos` parameter in place of the `-repo` parameter when running RepoSense."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "* Format : `java -jar RepoSense.jar -repos REPO_LIST` \u003cbr\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "* Example: `java -jar RepoSense.jar -repos https://github.com/reposense/RepoSense.git c:/myRepose/foo/bar` analyzes the two specified repos (one remote, one local) and generates one report containing details of both."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can use csv config files to customize the analysis as before while specifying multiple repos to analyze."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* `repo-config.csv`: Add additional rows for the extra repos ([example](repo-config.csv))"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "* `author-config.csv`: Add one row for each author in each repo you want to analyze"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yamidark"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yamidark"
        },
        "content": "#### Q: Does RepoSense work on private repositories?"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yamidark"
        },
        "content": "**A:** *RepoSense* will first clone the git repository to be analyzed, thus if you do not have access to the repository, we are unable to run the analysis.\u003cbr\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yamidark"
        },
        "content": "To enable *RepoSense* to work on private repositories, ensure that you have enabled access to your private repository in your git terminal first, before running the analysis."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yamidark"
        },
        "content": "#### Q: How does formats work?"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yamidark"
        },
        "content": "**A:** **Formats** are the [file extensions](https://techterms.com/definition/fileextension), which is the **suffix** at the end of a filename that indicates what type of file it is.\u003cbr\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yamidark"
        },
        "content": "The formats/file extensions to be analyzed by *RepoSense* can be specified through the [standalone config file](#provide-data-using-a-json-config-file), [repo-config file](#repo-configcsv) and [command line](#customize-using-command-line-parameters)."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yamidark"
        },
        "content": "#### Q: How does ignore glob list work?"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yamidark"
        },
        "content": "**A:** [Glob](https://en.wikipedia.org/wiki/Glob_(programming)) is the pattern to specify a set of filenames with [wildcard characters](https://www.computerhope.com/jargon/w/wildcard.htm). **Ignore glob list** is the list of patterns to specify all the files in the repository which should be ignored from analysis.\u003cbr\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yamidark"
        },
        "content": "The ignore glob list can be specified through the [standalone config file](#provide-data-using-a-json-config-file), [repo-config file](#repo-configcsv) and [author-config file](#author-configcsv)."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yamidark"
        },
        "content": "#### Q: My commit contributions does not appear in the ramp chart (despite appearing in the contribution bar and code panel)?"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yamidark"
        },
        "content": "**A:** This is probably a case of giving an incorrect author name alias (or github ID) in your [author-config file](#author-configcsv).\u003cbr\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yamidark"
        },
        "content": "Please refer to [A Note About Git Author Name](#a-note-about-git-author-name) above on how to find out the correct author name you are using, and how to change it.\u003cbr\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yamidark"
        },
        "content": "Also ensure that you have added all author name aliases that you may be using (if you are using multiple computers or have previously changed your author name)."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yamidark"
        },
        "content": "#### Q: My contribution bar and code panel is empty (despite having lots of commit contributions in the ramp chart)?"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yamidark"
        },
        "content": "**A:** The contribution bar and code panel records the lines you have authored to the **latest** commit of the repository and branch you are analyzing. As such, it is possible that while you have lots of commit contributions, your final authorship contribution is low if you have only deleted lines, someone else have overwritten your code and taken authorship for it (currently, *RepoSense* does not have functionality to track overwritten lines).\u003cbr\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "It is also possible that another user has overriden the authorship of your lines using the [@@author tags](#provide-data-using-author-tags)."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yamidark"
        },
        "content": "#### Q: I have added/edited the standalone config file in my local repository, but RepoSense is not using it when running the analysis?"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yamidark"
        },
        "content": "**A:** Ensure that you have committed the changes to your standalone config file first before running the analysis, as *RepoSense* is unable to detect uncommitted changes to your local repository."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yamidark"
        },
        "content": "#### Q: I am able to run RepoSense on my repository on a Linux/Mac OS, but it fails on a Windows OS?"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yamidark"
        },
        "content": "**A:** It is possible you may have some file names with [special characters](https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#naming-conventions) in them, which is disallowed in Windows OS. As such, *RepoSense* is unable to fully clone your repository, thus failing the analysis."
      }
    ],
    "authorContributionMap": {
      "AdityaA1998": 5,
      "yamidark": 29,
      "yong24s": 5,
      "eugenepeh": 36,
      "-": 263
    }
  },
  {
    "path": "docs/UsingCheckstyle.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "# Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "## Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "1. Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). \u003cbr\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. \u003cbr\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "2. Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "3. Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "4. Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility. \u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "   * If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`. \u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \u003cimg src\u003d\"images/checkstyle-idea-scan-scope.png\" width\u003d\"500\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "5. Click the plus sign under `Configuration File`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "6. Enter an arbitrary description e.g. `reposense`."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "7. Select `Use a local Checkstyle file`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "8. Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "9. Click `Next` \u003e `Finish`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "10. Mark `Active` for the newly imported check configuration. \u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \u003cimg src\u003d\"images/checkstyle-idea-configuration.png\" width\u003d\"700\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "11. Click `OK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "## Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 32
    }
  },
  {
    "path": "frontend/src/index.jade",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "html"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  head"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    link(rel\u003d\"stylesheet\", href\u003d\"https://fonts.googleapis.com/css?family\u003dTitillium+Web\")"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    link(rel\u003d\"stylesheet\", href\u003d\"https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.0/normalize.min.css\")"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    link(rel\u003d\"stylesheet\", href\u003d\"https://cdnjs.cloudflare.com/ajax/libs/muicss/0.9.39/css/mui.min.css\")"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    link(rel\u003d\"stylesheet\", href\u003d\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/styles/color-brewer.min.css\")"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    link(rel\u003d\"stylesheet\", href\u003d\"static/css/style.css\")"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    script(src\u003d\"https://use.fontawesome.com/releases/v5.0.13/js/all.js\", defer\u003dTrue)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    script(src\u003d\"https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.16/vue.min.js\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    script(src\u003d\"https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.5/jszip.min.js\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    script(src\u003d\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.12.0/highlight.min.js\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  body"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    div#app"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      #app-wrapper(v-if\u003d\"userUpdated\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        #summary-wrapper"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          .summary-status(v-if\u003d\"loadedRepo\u003crepoLength\") Loading repos ... {{ loadedRepo }} / {{ repoLength }}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          v_summary("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            v-bind:repos\u003d\"getUsers()\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            v-on:view-authorship\u003d\"updateTabAuthorship\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          )"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "          .timestamp-footer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            span Generated by \u0026nbsp;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            a(href\u003d\"https://github.com/reposense/RepoSense\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "              strong RepoSense"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            span \u0026nbsp; on {{ creationDate }}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        #tabs-wrapper(v-if\u003d\"isTabActive\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          .tab-close(v-on:click\u003d\"isTabActive\u003dfalse\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            i.fas.fa-caret-right"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          .tab-content"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            .tab-panes"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "              #tab-authorship.tab-pane(v-if\u003d\"isTabAuthorship\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .toolbar(v-if\u003d\"tabInfo.tabAuthorship.totalCommits \u003e 0\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    a(v-if\u003d\"isCollapsed\", v-on:click\u003d\"expand(true)\") Expand all"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    a(v-else, v-on:click\u003d\"expand(false)\") Collapse all"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                v_authorship("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                  v-bind:key\u003d\"generateKey(tabInfo.tabAuthorship)\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                  v-bind:info\u003d\"tabInfo.tabAuthorship\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "              #tab-empty.tab-pane(v-else)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .title"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                  span To view the code attributed to a specific author, click the \u0026nbsp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                  i.fas.fa-code"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                  span \u0026nbsp; icon next to that author\u0027s name."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                  br"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                  span To hide the code view, click the \u0026nbsp;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                  i.fas.fa-caret-right"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                  span \u0026nbsp; icon on the left."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      template(v-else)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        .empty please enter a report directory or upload a report zip"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        form#file-upload(onsubmit\u003d\"return false;\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          input(type\u003d\"file\", v-on:change\u003d\"updateReportZip\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    vuetemplate#v_summary"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      #summary.wrapper"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        form.summary-picker.mui-form--inline(v-on:submit.prevent\u003d\"getFiltered();\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "          .summary-picker__section"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            .mui-textfield"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "              input.summary-picker__search(type\u003d\"text\", v-on:change\u003d\"updateFilterSearch\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "              label search"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            .mui-select"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "              select(v-model\u003d\"filterSort\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                option(value\u003d\"totalCommits\") Contribution"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                option(value\u003d\"variance\") Variance"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                option(value\u003d\"displayName\") Author Name"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                option(value\u003d\"searchPath\") Repo/Branch Name"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "              label sort by"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            .mui-select"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "              select(v-model\u003d\"filterTimeFrame\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                option(value\u003d\"day\") Day"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                option(value\u003d\"week\") Week"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "              label granularity"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "          .summary-picker__section"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            .mui-textfield.summary-picker__date"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "              input(type\u003d\"date\", v-model\u003d\"tmpFilterSinceDate\", onkeydown\u003d\"return false\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                v-bind:min\u003d\"minDate\", v-bind:max\u003d\"filterUntilDate\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "              label since"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            .mui-textfield.summary-picker__date"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "              input(type\u003d\"date\", v-model\u003d\"tmpFilterUntilDate\", onkeydown\u003d\"return false\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                v-bind:min\u003d\"filterSinceDate\", v-bind:max\u003d\"maxDate\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "              label until"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "          .summary-picker__checkboxes.summary-picker__section"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            label"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "              input(type\u003d\"checkbox\", v-model\u003d\"filterSortReverse\").mui-checkbox.summary-picker__checkbox"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "              span reverse"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            label"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "              input(type\u003d\"checkbox\", v-model\u003d\"filterGroupRepos\").mui-checkbox.summary-picker__checkbox"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "              span group by repo/branch"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        #summary-charts"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          .summary-charts(v-for\u003d\"repo of filtered\", v-if\u003d\"repo.length\u003e0\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            .summary-charts__title("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "              v-if\u003d\"filterGroupRepos\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            ) {{ repo[0].repoPath }}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            .summary-chart(v-for\u003d\"(user, i) in repo\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "              .summary-chart__title"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .summary-chart__title--index {{ i+1 }}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .summary-chart__title--repo(v-if\u003d\"!filterGroupRepos\") {{ user.repoPath }}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .summary-chart__title--name {{ user.displayName }}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                a("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                  title\u003d\"click to view author\u0027s code\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                  v-on:click\u003d\"$emit(\u0027view-authorship\u0027, \\"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                      {author:user.name, repo:user.repoName, name:user.displayName, location:repo[0].location, \\"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                          minDate:minDate, maxDate:maxDate, totalCommits:user.totalCommits})\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                )"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                  i.summary-chart__title--button.fas.fa-code"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                a("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                  v-bind:href\u003d\"repo[0].location\", target\u003d\"_blank\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                  title\u003d\"click to view author\u0027s repo\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                )"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                  i.summary-chart__title--button.fab.fa-github"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "              .summary-chart__ramp"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                a.summary-chart__ramp__slice("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                  v-for\u003d\"(slice, j) in user.commits\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                  v-if\u003d\"slice.insertions\u003e0\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                  v-bind:title\u003d\"getSliceTitle(slice)\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                  v-bind:href\u003d\"getSliceLink(user, slice)\", target\u003d\"_blank\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                  v-bind:class\u003d\"\u0027summary-chart__ramp__slice--color\u0027+j%5\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                  v-bind:style\u003d\"{\\"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                    zIndex: user.commits.length - j,\\"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                    borderLeftWidth: getWidth(slice) + \u0027em\u0027,\\"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                    right: (((user.commits.length-j-1)/user.commits.length) * 100) + \u0027%\u0027\\"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                  }\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                )"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "              .summary-chart__contrib("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                v-bind:title\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"\u0027Total contribution from \u0027 + minDate + \u0027 to \u0027 + maxDate + \u0027: \u0027 + user.totalCommits + \u0027 lines\u0027\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "               )"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                .summary-chart__contrib--bar("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                  v-for\u003d\"width in getContributionBars(user.totalCommits)\","
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                  v-bind:style\u003d\"{ width: width+\u0027%\u0027 }\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                )"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    vuetemplate#v_authorship"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      #authorship"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        .title"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "          a.repoName("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            v-bind:href\u003d\"info.location\", target\u003d\"_blank\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            v-bind:title\u003d\"\u0027Click to open the repo\u0027\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "          ) {{ info.repo }}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "          .author {{ info.name }} ({{ info.author }}) contribution from {{ info.minDate }} to {{ info.maxDate }}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "          .contribution(v-if\u003d\"isLoaded\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            div.checkboxes.mui-form--inline(v-if\u003d\"files.length \u003e 0\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "              label"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                input(type\u003d\"checkbox\" v-on:click\u003d\"selectAll\" v-model\u003d\"isSelectAllChecked\").mui-checkbox"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                span.select(v-bind:title\u003d\"getTotalFileBlankLineInfo()\") All:\u0026nbsp;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                span.loc(v-bind:title\u003d\"getTotalFileBlankLineInfo()\") {{ totalLineCount }}\u0026nbsp;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                span.bloc(v-bind:title\u003d\"getTotalFileBlankLineInfo()\") ({{ totalBlankLineCount }})"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "              template(v-for\u003d\"type in Object.keys(filesLinesObj)\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                label"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                  input(type\u003d\"checkbox\" :value\u003d\"type\" v-model\u003d\"selectedFileTypes\" v-on:change\u003d\"selectFile\").mui-checkbox"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                  span(v-bind:title\u003d\"getFileBlankLineInfo(type)\") {{ type }}: {{ filesLinesObj[type] }}\u0026nbsp;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                  span.bloc(v-bind:title\u003d\"getFileBlankLineInfo(type)\") ({{ filesBlankLinesObj[type] }})"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        .files(v-if\u003d\"isLoaded\")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "          .empty(v-if\u003d\"files.length\u003d\u003d\u003d0\") nothing to see here :("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "          .file.active(v-for\u003d\"file in selectedFiles\", v-bind:key\u003d\"file.path\")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            .title"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "              span.path(onclick\u003d\"toggleNext(this)\") {{ file.path }}\u0026nbsp;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "              span.loc ({{ file.lineCount }} lines)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "              a("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                v-bind:href\u003d\"getFileLink(file, \u0027commits\u0027)\", target\u003d\"_blank\","
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                title\u003d\"click to view the history view of file\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "              )"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                i.button.fas.fa-history"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "              a("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                v-bind:href\u003d\"getFileLink(file, \u0027blame\u0027)\", target\u003d\"_blank\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                title\u003d\"click to view the blame view of file\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "              )"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                i.button.fas.fa-user-edit"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            pre.hljs.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "              code"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                template(v-for\u003d\"segment in file.segments\")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                  .segment(v-bind:class\u003d\"{ untouched: !segment.authored, active: segment.lines.length\u003c5 }\")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                    .closer(v-if\u003d\"!segment.authored \u0026\u0026 segment.lines.length\u003e4\", onclick\u003d\"toggleNext(this)\")"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                      i.fas.fa-ellipsis-h.icon"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                      span.tooltiptext.tooltiptext--close Show untouched code"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                      span.tooltiptext.tooltiptext--open Hide untouched code"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                    .code {{ segment.lines.join(\"\\n\") }}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        .empty(v-else) loading..."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    script(src\u003d\"static/js/api.js\")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    script(src\u003d\"static/js/v_summary.js\")"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    script(src\u003d\"static/js/v_authorship.js\")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    script(src\u003d\"static/js/main.js\")"
      }
    ],
    "authorContributionMap": {
      "ongspxm": 44,
      "AdityaA1998": 1,
      "eugenepeh": 79,
      "-": 63
    }
  },
  {
    "path": "frontend/src/static/css/_colors.scss",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * MUI Colors module"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "// \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "// COLOR FUNCTION"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "// \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "@function mui-color($mui-key1, $mui-key2: \u0027500\u0027) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  // check key1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  @if map-has-key($mui-colors, $mui-key1) \u003d\u003d false {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @warn \"Color `#{$mui-key1}` not found.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @return null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  $mui-mapVal: map-get($mui-colors, $mui-key1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  // use second key"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  @if type-of($mui-mapVal) \u003d\u003d \u0027map\u0027 {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    // check key2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @if map-has-key($mui-mapVal, $mui-key2) \u003d\u003d false {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      @warn \"Color `#{$mui-key1}` `#{$mui-key2}` not found.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      @return null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    $mui-mapVal: map-get($mui-mapVal, $mui-key2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  @return $mui-mapVal;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "// \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "// COLOR MAP"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "// \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "$mui-colors: ("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"red\": ("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"50\": #FFEBEE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"100\": #FFCDD2,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"200\": #EF9A9A,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"300\": #E57373,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"400\": #EF5350,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"500\": #F44336,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"600\": #E53935,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"700\": #D32F2F,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"800\": #C62828,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"900\": #B71C1C,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A100\": #FF8A80,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A200\": #FF5252,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A400\": #FF1744,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A700\": #D50000,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"pink\": ("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"50\": #FCE4EC,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"100\": #F8BBD0,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"200\": #F48FB1,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"300\": #F06292,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"400\": #EC407A,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"500\": #E91E63,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"600\": #D81B60,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"700\": #C2185B,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"800\": #AD1457,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"900\": #880E4F,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A100\": #FF80AB,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A200\": #FF4081,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A400\": #F50057,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A700\": #C51162,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"purple\": ("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"50\": #F3E5F5,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"100\": #E1BEE7,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"200\": #CE93D8,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"300\": #BA68C8,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"400\": #AB47BC,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"500\": #9C27B0,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"600\": #8E24AA,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"700\": #7B1FA2,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"800\": #6A1B9A,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"900\": #4A148C,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A100\": #EA80FC,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A200\": #E040FB,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A400\": #D500F9,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A700\": #AA00FF,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"deep-purple\": ("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"50\": #EDE7F6,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"100\": #D1C4E9,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"200\": #B39DDB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"300\": #9575CD,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"400\": #7E57C2,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"500\": #673AB7,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"600\": #5E35B1,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"700\": #512DA8,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"800\": #4527A0,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"900\": #311B92,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A100\": #B388FF,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A200\": #7C4DFF,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A400\": #651FFF,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A700\": #6200EA,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"indigo\": ("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"50\": #E8EAF6,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"100\": #C5CAE9,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"200\": #9FA8DA,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"300\": #7986CB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"400\": #5C6BC0,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"500\": #3F51B5,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"600\": #3949AB,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"700\": #303F9F,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"800\": #283593,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"900\": #1A237E,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A100\": #8C9EFF,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A200\": #536DFE,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A400\": #3D5AFE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A700\": #304FFE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"blue\": ("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"50\": #E3F2FD,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"100\": #BBDEFB,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"200\": #90CAF9,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"300\": #64B5F6,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"400\": #42A5F5,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"500\": #2196F3,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"600\": #1E88E5,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"700\": #1976D2,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"800\": #1565C0,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"900\": #0D47A1,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A100\": #82B1FF,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A200\": #448AFF,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A400\": #2979FF,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A700\": #2962FF,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"light-blue\": ("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"50\": #E1F5FE,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"100\": #B3E5FC,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"200\": #81D4FA,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"300\": #4FC3F7,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"400\": #29B6F6,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"500\": #03A9F4,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"600\": #039BE5,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"700\": #0288D1,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"800\": #0277BD,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"900\": #01579B,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A100\": #80D8FF,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A200\": #40C4FF,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A400\": #00B0FF,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A700\": #0091EA,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"cyan\": ("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"50\": #E0F7FA,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"100\": #B2EBF2,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"200\": #80DEEA,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"300\": #4DD0E1,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"400\": #26C6DA,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"500\": #00BCD4,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"600\": #00ACC1,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"700\": #0097A7,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"800\": #00838F,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"900\": #006064,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A100\": #84FFFF,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A200\": #18FFFF,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A400\": #00E5FF,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A700\": #00B8D4,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"teal\": ("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"50\": #E0F2F1,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"100\": #B2DFDB,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"200\": #80CBC4,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"300\": #4DB6AC,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"400\": #26A69A,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"500\": #009688,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"600\": #00897B,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"700\": #00796B,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"800\": #00695C,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"900\": #004D40,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A100\": #A7FFEB,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A200\": #64FFDA,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A400\": #1DE9B6,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A700\": #00BFA5,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"green\": ("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"50\": #E8F5E9,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"100\": #C8E6C9,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"200\": #A5D6A7,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"300\": #81C784,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"400\": #66BB6A,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"500\": #4CAF50,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"600\": #43A047,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"700\": #388E3C,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"800\": #2E7D32,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"900\": #1B5E20,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A100\": #B9F6CA,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A200\": #69F0AE,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A400\": #00E676,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A700\": #00C853,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"light-green\": ("
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"50\": #F1F8E9,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"100\": #DCEDC8,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"200\": #C5E1A5,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"300\": #AED581,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"400\": #9CCC65,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"500\": #8BC34A,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"600\": #7CB342,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"700\": #689F38,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"800\": #558B2F,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"900\": #33691E,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A100\": #CCFF90,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A200\": #B2FF59,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A400\": #76FF03,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A700\": #64DD17,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"lime\": ("
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"50\": #F9FBE7,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"100\": #F0F4C3,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"200\": #E6EE9C,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"300\": #DCE775,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"400\": #D4E157,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"500\": #CDDC39,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"600\": #C0CA33,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"700\": #AFB42B,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"800\": #9E9D24,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"900\": #827717,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A100\": #F4FF81,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A200\": #EEFF41,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A400\": #C6FF00,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A700\": #AEEA00,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"yellow\": ("
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"50\": #FFFDE7,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"100\": #FFF9C4,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"200\": #FFF59D,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"300\": #FFF176,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"400\": #FFEE58,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"500\": #FFEB3B,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"600\": #FDD835,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"700\": #FBC02D,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"800\": #F9A825,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"900\": #F57F17,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A100\": #FFFF8D,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A200\": #FFFF00,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A400\": #FFEA00,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A700\": #FFD600,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"amber\": ("
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"50\": #FFF8E1,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"100\": #FFECB3,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"200\": #FFE082,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"300\": #FFD54F,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"400\": #FFCA28,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"500\": #FFC107,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"600\": #FFB300,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"700\": #FFA000,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"800\": #FF8F00,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"900\": #FF6F00,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A100\": #FFE57F,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A200\": #FFD740,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A400\": #FFC400,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A700\": #FFAB00,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"orange\": ("
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"50\": #FFF3E0,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"100\": #FFE0B2,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"200\": #FFCC80,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"300\": #FFB74D,"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"400\": #FFA726,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"500\": #FF9800,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"600\": #FB8C00,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"700\": #F57C00,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"800\": #EF6C00,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"900\": #E65100,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A100\": #FFD180,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A200\": #FFAB40,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A400\": #FF9100,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A700\": #FF6D00,"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"deep-orange\": ("
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"50\": #FBE9E7,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"100\": #FFCCBC,"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"200\": #FFAB91,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"300\": #FF8A65,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"400\": #FF7043,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"500\": #FF5722,"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"600\": #F4511E,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"700\": #E64A19,"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"800\": #D84315,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"900\": #BF360C,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A100\": #FF9E80,"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A200\": #FF6E40,"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A400\": #FF3D00,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"A700\": #DD2C00,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"brown\": ("
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"50\": #EFEBE9,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"100\": #D7CCC8,"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"200\": #BCAAA4,"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"300\": #A1887F,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"400\": #8D6E63,"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"500\": #795548,"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"600\": #6D4C41,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"700\": #5D4037,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"800\": #4E342E,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"900\": #3E2723,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"grey\": ("
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"50\": #FAFAFA,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"100\": #F5F5F5,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"200\": #EEEEEE,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"300\": #E0E0E0,"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"400\": #BDBDBD,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"500\": #9E9E9E,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"600\": #757575,"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"700\": #616161,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"800\": #424242,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"900\": #212121,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"blue-grey\": ("
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"50\": #ECEFF1,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"100\": #CFD8DC,"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"200\": #B0BEC5,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"300\": #90A4AE,"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"400\": #78909C,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"500\": #607D8B,"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"600\": #546E7A,"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"700\": #455A64,"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"800\": #37474F,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \"900\": #263238,"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  ),"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"black\": #000,"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"white\": #FFF,"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"black-alpha-12\": rgba(#000, 0.12),"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"black-alpha-38\": rgba(#000, 0.38),"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"black-alpha-54\": rgba(#000, 0.54),"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"black-alpha-87\": rgba(#000, 0.87),"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"white-alpha-12\": rgba(#FFF, 0.12),"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"white-alpha-30\": rgba(#FFF, 0.30),"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  \"white-alpha-70\": rgba(#FFF, 0.70),"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ");"
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 341
    }
  },
  {
    "path": "frontend/src/static/css/style.scss",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "@import \"colors\";"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "/** global **/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "body{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    font-family:\"Titillium Web\", sans-serif;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "vuetemplate{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    display:none;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ".wrapper{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    text-align:center;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ".content{"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    max-width:40rem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    text-align:left;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ".empty{"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    margin:3rem 5rem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    text-align:center;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "/** navigation bar **/"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "header{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    z-index:100;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    position:relative;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    display:flex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    justify-content:center;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    .content{"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        display:flex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        justify-content:space-between;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        align-items:center;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        flex-grow:1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    .repo, .logo{"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        margin:0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "#file-upload{"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    text-align:center;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "#app-wrapper{"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    display:flex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    position:absolute;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    left:0; top:0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    z-index:50;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    width:100%;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    height:100vh;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    #summary-wrapper{"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        height:100%;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        overflow-y:scroll;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        flex-grow:1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        text-align:center;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        .timestamp-footer {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            margin-left:1em;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            margin-bottom:1em;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            color:mui-color(\u0027grey\u0027, \u0027700\u0027);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    #tabs-wrapper{"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        $tabs-width:50%;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        flex:0 0 $tabs-width;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        position:relative;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        overflow-y:scroll;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        background:mui-color(\u0027grey\u0027, \u0027200\u0027);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        .tab-close{"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            cursor:pointer;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            position:fixed;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            top:calc(50vh - 3rem);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            svg{"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                color:mui-color(\u0027white\u0027);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                background-color:mui-color(\u0027grey\u0027, \u0027900\u0027);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                padding:3rem 0.25rem;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        .tab-content{"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            display:flex;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            padding:1rem 1.5rem;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            padding-top:4rem;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            .tab-panes{"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                width:100%;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                text-align:left;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "/* summary chart */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "#summary, .summary-status{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    padding:2rem 1rem;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ".summary-picker{"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    display:flex;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    flex-flow:row wrap;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    justify-content:center;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    align-items:center;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    margin-bottom:2rem;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    \u0026__section{"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        display:flex;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        flex:0 0 auto;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \u0026__checkboxes{"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        label{ margin-left:0.5rem; }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        span{ margin-left:0.25rem; }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    .mui-textfield, .mui-select{"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        margin:0.5rem;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    label{"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        text-align:left;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        overflow-y:hidden;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    input, select{"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        font-size:0.75rem;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ".summary-charts{"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    margin-bottom:3rem;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \u0026__title{"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        display:block;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        text-align:left;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        font-weight:bold;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ".summary-chart{"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    margin-bottom:1rem;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    text-align:left;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \u0026__title{"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        \u0026 \u003e * {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            display:inline;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            padding-right:0.5rem;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        \u0026--index, \u0026--repo{"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            font-weight:bold;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        \u0026--index::after{"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            content:\".\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            display:inline-block;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        \u0026--repo{"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            padding-right:0.25rem;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026--button{"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            cursor:pointer;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            color:mui-color(\"grey\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            text-decoration:none;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \u0026__ramp{"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        font-size:100%;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        position:relative;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        $height:3rem;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        height:$height;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        background-color:mui-color(\"blue\", \"50\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        \u0026__slice{"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            display:block;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            position:absolute;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            width:0;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            height:0;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            border-left-color: rgba(0,0,0,0);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            border-left-style: solid;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            \u0026--color0{ border-bottom:$height rgba(mui-color(\"orange\"), 0.5) solid;  }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            \u0026--color1{ border-bottom:$height rgba(mui-color(\"light-blue\"), 0.5) solid;  }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            \u0026--color2{ border-bottom:$height rgba(mui-color(\"green\"), 0.5) solid;  }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            \u0026--color3{ border-bottom:$height rgba(mui-color(\"indigo\"), 0.5) solid;  }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            \u0026--color4{ border-bottom:$height rgba(mui-color(\"pink\"), 0.5) solid;  }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    \u0026__contrib{"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        text-align:left;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        \u0026--bar{"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            height:0.3rem;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            margin-top:0.1rem;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            background-color:mui-color(\"red\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "/* Authorship */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "#tab-authorship{"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    .toolbar{"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        float: right;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        cursor: pointer;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    .title{"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        .repoName{"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            font-size:1.5rem;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            font-weight:bold;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            cursor:pointer;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        .contribution{"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            margin-top:0.1rem;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            color:mui-color(\"red\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            .select {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "              font-weight:bold;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            .loc {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "              font-weight:bolder;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            .bloc {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "              color:mui-color(\"grey\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            span.fileType {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                span.bloc::after {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                  content: \u0027, \u0027;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                span.bloc:last-child::after {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                  content:\u0027\u0027;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            .checkboxes {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                label{"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                    float:left;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "                    padding-right:10px;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "                    white-space:nowrap;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                span{"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "                    margin-left:0.25rem;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                    vertical-align:middle;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    .files{"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        clear:left;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        margin-top:2rem;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        .file{"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            pre{"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                display:none;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            \u0026.active{"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                pre{"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                    display:grid;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                    .hljs{"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                        // overwrite hljs library"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                        display:inherit;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        .title{"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            margin-top:1rem;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            font-size:1.25rem;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            font-weight:bold;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            .path{"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "                cursor:pointer;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            .loc{"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                color:mui-color(\u0027grey\u0027);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            .button{"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "                font-size:1.15rem;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                color:mui-color(\"grey\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "                text-decoration:none;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "                margin-left:0.5rem;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        .code{"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            padding-left:1rem;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            border-left:0.25rem solid mui-color(\u0027green\u0027);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            background-color:mui-color(\u0027green\u0027, \u002750\u0027);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        .untouched{"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            $grey:mui-color(\u0027grey\u0027, \u0027400\u0027);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            \u0026.active{"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                .code{"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                    display:inherit;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                    background-color:mui-color(\u0027white\u0027);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                .closer{"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                    .icon{"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                        background-color:mui-color(\u0027black\u0027);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                    .tooltiptext{"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                        \u0026--open{ display:inline-block; }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                        \u0026--close{ display:none; }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            .code{"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                display:none;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                border-left:0.25rem solid $grey;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                background-color:mui-color(\u0027white\u0027);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            .closer{"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                cursor:pointer;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                padding:0.5rem 1rem;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                .icon{"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                    background-color:$grey;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                    color:mui-color(\u0027white\u0027);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                    width:2.2rem;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                    border-radius:0.25rem;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                    \u0026:hover{"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                        background:black;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                    \u0026:hover ~ .tooltiptext{"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                        visibility:visible;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                .tooltiptext{"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                    padding:0.5rem;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                    margin-left:0.5rem;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                    border-radius:0.25rem;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                    color:mui-color(\u0027white\u0027);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                    background-color:mui-color(\u0027black\u0027);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                    text-align:center;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                    visibility:hidden;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                    \u0026--open{ display:none; }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                    \u0026--close{ display:inline-block; }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    .empty{"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        text-align:center;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongspxm": 92,
      "AdityaA1998": 12,
      "eugenepeh": 230,
      "-": 54
    }
  },
  {
    "path": "frontend/src/static/js/api.js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "// utility functions //"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "window.$ \u003d id \u003d\u003e document.getElementById(id);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "window.enquery \u003d (key, val) \u003d\u003e `${key}\u003d${encodeURIComponent(val)}`;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "const REPORT_DIR \u003d \u0027.\u0027;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "// data retrieval functions //"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "function loadJSON(fname) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  if (window.REPORT_ZIP) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    return window.REPORT_ZIP.file(fname.slice(2)).async(\u0027text\u0027)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      .then(txt \u003d\u003e JSON.parse(txt));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  return new Promise((resolve) \u003d\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    const xhr \u003d new XMLHttpRequest();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    xhr.open(\u0027GET\u0027, fname);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    xhr.onload \u003d function xhrOnload() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      if (xhr.status \u003d\u003d\u003d 200) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        resolve(JSON.parse(xhr.responseText));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      } else {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        window.alert(\u0027unable to get file\u0027);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    };"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    xhr.send(null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "window.api \u003d {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  loadSummary() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    window.REPOS \u003d {};"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    return loadJSON(`${REPORT_DIR}/summary.json`)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      .then((data) \u003d\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        window.app.creationDate \u003d data.dashboardGeneratedTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        const names \u003d [];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        data.repos.forEach((repo) \u003d\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yamidark"
        },
        "content": "          const repoName \u003d `${repo.displayName}`;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          window.REPOS[repoName] \u003d repo;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          names.push(repoName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        return names;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  },"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  loadCommits(repoName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    return loadJSON(`${REPORT_DIR}/${repoName}/commits.json`).then((commits) \u003d\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      const res \u003d [];"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      const repo \u003d window.REPOS[repoName];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      Object.keys(commits.authorDisplayNameMap).forEach((author) \u003d\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        if (author) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          const obj \u003d {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            name: author,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            repoId: repoName,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            variance: commits.authorContributionVariance[author],"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            displayName: commits.authorDisplayNameMap[author],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            weeklyCommits: commits.authorWeeklyIntervalContributions[author],"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            dailyCommits: commits.authorDailyIntervalContributions[author],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            totalCommits: commits.authorFinalContributionMap[author],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          };"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          const searchParams \u003d ["
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            repo.displayName,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            obj.displayName, author,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          ];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yamidark"
        },
        "content": "          obj.searchPath \u003d searchParams.join(\u0027_\u0027).toLowerCase();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yamidark"
        },
        "content": "          obj.repoPath \u003d `${repo.displayName}`;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yamidark"
        },
        "content": "          obj.repoName \u003d `${repo.displayName}`;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "          obj.location \u003d `${repo.location.location}`;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          res.push(obj);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      repo.commits \u003d commits;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      repo.users \u003d res;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      return res;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  },"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  loadAuthorship(repoName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    return loadJSON(`${REPORT_DIR}/${repoName}/authorship.json`)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      .then((files) \u003d\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        window.REPOS[repoName].files \u003d files;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        return files;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      });"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  },"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "};"
      }
    ],
    "authorContributionMap": {
      "ongspxm": 24,
      "AdityaA1998": 2,
      "yamidark": 4,
      "eugenepeh": 59,
      "-": 1
    }
  },
  {
    "path": "frontend/src/static/js/main.js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "window.REPORT_ZIP \u003d null;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "window.REPOS \u003d {};"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "window.hashParams \u003d {};"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "window.addHash \u003d function addHash(newKey, newVal) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  const { hashParams } \u003d window;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  hashParams[newKey] \u003d newVal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  const hash \u003d [];"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  const enquery \u003d (key, val) \u003d\u003e `${key}\u003d${encodeURIComponent(val)}`;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  Object.keys(hashParams).forEach((hashKey) \u003d\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    hash.push(enquery(hashKey, hashParams[hashKey]));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  });"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  window.location.hash \u003d hash.join(\u0027\u0026\u0027);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "window.app \u003d new window.Vue({"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  el: \u0027#app\u0027,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  data: {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    repos: {},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    repoLength: 0,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    loadedRepo: 0,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    userUpdated: false,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    isCollapsed: false,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    isTabActive: true,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    isTabAuthorship: false,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    tabInfo: {},"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    tabAuthorship: {},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    creationDate: \u0027\u0027,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  },"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  methods: {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    // model functions //"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    updateReportZip(evt) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.users \u003d [];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      window.JSZip.loadAsync(evt.target.files[0])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        .then((zip) \u003d\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          window.REPORT_ZIP \u003d zip;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        })"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        .then(() \u003d\u003e this.updateReportView());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    updateReportDir() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      window.REPORT_ZIP \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.users \u003d [];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.updateReportView();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    updateReportView() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      window.api.loadSummary().then((names) \u003d\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.repos \u003d window.REPOS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.repoLength \u003d Object.keys(window.REPOS).length;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.loadedRepo \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.userUpdated \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        this.loadedRepo \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        return Promise.all(names.map(name \u003d\u003e ("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "          window.api.loadCommits(name)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            .then(() \u003d\u003e { this.loadedRepo +\u003d 1; })"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        )));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      }).then(() \u003d\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.userUpdated \u003d true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    getUsers() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      const full \u003d [];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      Object.keys(this.repos).forEach((repo) \u003d\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        if (this.repos[repo].users) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          full.push(this.repos[repo]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      return full;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    deactivateTabs() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.isTabAuthorship \u003d false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    updateTabAuthorship(obj) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.deactivateTabs();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      this.tabInfo.tabAuthorship \u003d Object.assign({}, obj);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.isTabActive \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.isTabAuthorship \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "      this.isCollapsed \u003d false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "      if (document.getElementById(\"tabs-wrapper\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        document.getElementById(\"tabs-wrapper\").scrollTop \u003d 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /*global expandAll*/"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    expand(isActive) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "      this.isCollapsed \u003d !isActive;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "      expandAll(isActive);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    generateKey(dataObj) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      return JSON.stringify(dataObj);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    },"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  },"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  components: {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    v_summary: window.vSummary,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    v_authorship: window.vAuthorship,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  },"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  created() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    this.updateReportDir();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  },"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "});"
      }
    ],
    "authorContributionMap": {
      "ongspxm": 31,
      "eugenepeh": 66,
      "-": 12
    }
  },
  {
    "path": "frontend/src/static/js/v_authorship.js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "function toggleNext(ele) {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  // function for toggling unopened code"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  const targetClass \u003d \u0027active\u0027;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  const parent \u003d ele.parentNode.parentNode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  const classes \u003d parent.className.split(\u0027 \u0027);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  const idx \u003d classes.indexOf(targetClass);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  if (idx \u003d\u003d\u003d -1) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    classes.push(targetClass);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  } else {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    classes.splice(idx, 1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  parent.className \u003d classes.join(\u0027 \u0027);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "};"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "function expandAll(isActive) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  const renameValue \u003d isActive ? \u0027file active\u0027 : \u0027file\u0027;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  const files \u003d document.getElementsByClassName(\u0027file\u0027);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  Array.from(files).forEach((file) \u003d\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    file.className \u003d renameValue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "const repoCache \u003d [];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "window.vAuthorship \u003d {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "  props: [\u0027info\u0027],"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  template: window.$(\u0027v_authorship\u0027).innerHTML,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  data() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    return {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      isLoaded: false,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      files: [],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "      isSelectAllChecked: true,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "      selectedFileTypes: [],"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "      fileTypes: [],"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "      selectedFiles: [],"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "      filesLinesObj: {},"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "      filesBlankLinesObj: {},"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "      totalLineCount: \"\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "      totalBlankLineCount: \u0027\u0027,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  },"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  methods: {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    initiate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      const repo \u003d window.REPOS[this.info.repo];"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      if (repoCache.length \u003d\u003d\u003d 2) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        const toRemove \u003d repoCache.shift();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        if (toRemove !\u003d\u003d this.info.repo) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "          delete window.REPOS[toRemove].files;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      repoCache.push(this.info.repo);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      if (repo.files) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.processFiles(repo.files);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        window.api.loadAuthorship(this.info.repo)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "          .then(files \u003d\u003e this.processFiles(files));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    splitSegments(lines) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      // split into segments separated by authored"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      let lastState;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      let lastId \u003d -1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      const segments \u003d [];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "      let blankLineCount \u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      lines.forEach((line) \u003d\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        const authored \u003d (line.author \u0026\u0026 line.author.gitId \u003d\u003d\u003d this.info.author);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        if (authored !\u003d\u003d lastState || lastId \u003d\u003d\u003d -1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          segments.push({"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            authored,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            lines: [],"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          lastId +\u003d 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          lastState \u003d authored;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        const content \u003d line.content || \u0027 \u0027;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        segments[lastId].lines.push(content);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (line.content \u003d\u003d\u003d \u0027\u0027 \u0026\u0026 authored) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "          blankLineCount +\u003d 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "      return {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        segments,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        blankLineCount"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "      };"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    processFiles(files) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      const res \u003d [];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "      let filesInfoObj \u003d {};"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "      let filesBlanksInfoObj \u003d {};"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "      let totalLineCount \u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "      let totalBlankLineCount \u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      files.forEach((file) \u003d\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        const lineCnt \u003d file.authorContributionMap[this.info.author];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        if (lineCnt) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "          totalLineCount +\u003d lineCnt;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          const out \u003d {};"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          out.path \u003d file.path;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "          out.lineCount \u003d lineCnt;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "          this.addLineCountToFileType(file.path, lineCnt, filesInfoObj);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "          const segmentInfo \u003d this.splitSegments(file.lines);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "          out.segments \u003d segmentInfo.segments;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "          totalBlankLineCount +\u003d segmentInfo.blankLineCount;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "          this.addLineCountToFileType(file.path, segmentInfo.blankLineCount, filesBlanksInfoObj);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          res.push(out);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      });"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "      this.totalLineCount \u003d totalLineCount;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "      this.totalBlankLineCount \u003d totalBlankLineCount;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      res.sort((a, b) \u003d\u003e b.lineCount - a.lineCount);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "      this.filesLinesObj \u003d this.sortFileTypeAlphabetically(filesInfoObj);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "      for (var file in filesInfoObj) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (filesInfoObj.hasOwnProperty(file)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "          this.selectedFileTypes.push(file);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "          this.fileTypes.push(file);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "      this.filesBlankLinesObj \u003d filesBlanksInfoObj;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.files \u003d res;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "      this.selectedFiles \u003d res;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.isLoaded \u003d true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    addLineCountToFileType(path, lineCount, filesInfoObj) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "      var fileType \u003d path.split(\".\").pop();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "      fileType \u003d (fileType.length \u003d\u003d\u003d 0) ? \"others\" : fileType;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "      if (!filesInfoObj[fileType]) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        filesInfoObj[fileType] \u003d 0;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "      filesInfoObj[fileType] +\u003d lineCount;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    sortFileTypeAlphabetically(unsortedFilesInfoObj) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "      return Object.keys(unsortedFilesInfoObj)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "          .sort()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "          .reduce((acc, key) \u003d\u003e ({"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "              ...acc, [key]: unsortedFilesInfoObj[key]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "          }), {});"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    selectAll() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "      if (!this.isSelectAllChecked) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        this.selectedFileTypes \u003d this.fileTypes;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        this.selectedFiles \u003d this.files;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "      } else {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        this.selectedFileTypes \u003d [];"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        this.selectedFiles \u003d [];"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    selectFile() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "      setTimeout(this.getSelectedFiles, 0);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    getSelectedFiles() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "      if (this.fileTypes.length \u003d\u003d\u003d this.selectedFileTypes.length) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        this.selectedFiles \u003d this.files;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isSelectAllChecked \u003d true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "      } else if (this.selectedFileTypes.length \u003d\u003d\u003d 0) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        this.selectedFiles \u003d [];"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isSelectAllChecked \u003d false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "      } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        this.selectedFiles \u003d this.files.filter((file) \u003d\u003e this.selectedFileTypes.includes(file.path.split(\u0027.\u0027).pop()));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    getFileLink(file, path) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "      const repo \u003d window.REPOS[this.info.repo];"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "      return `http://github.com/${"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        repo.location.organization}/${repo.location.repoName}/${path}/${repo.branch}/${file.path}`;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    getFileBlankLineInfo(fileType) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "      return fileType + \u0027: \u0027 + \u0027Blank: \u0027 + this.filesBlankLinesObj[fileType]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "          + \u0027, Non-Blank: \u0027 + (this.filesLinesObj[fileType] - this.filesBlankLinesObj[fileType]);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    getTotalFileBlankLineInfo() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "      return \u0027Total: Blank: \u0027 + this.totalBlankLineCount + \u0027, Non-Blank: \u0027"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "          + (this.totalLineCount - this.totalBlankLineCount);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    },"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  },"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  created() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    this.initiate();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  },"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  updated() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    this.$nextTick(() \u003d\u003e {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      document.querySelectorAll(\u0027pre.hljs code\u0027).forEach((ele) \u003d\u003e {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        window.hljs.highlightBlock(ele);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      });"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    });"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  },"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "};"
      }
    ],
    "authorContributionMap": {
      "ongspxm": 30,
      "AdityaA1998": 1,
      "eugenepeh": 83,
      "-": 102
    }
  },
  {
    "path": "frontend/src/static/js/v_summary.js",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "function comparator(fn) {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  return function compare(a, b) {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    const a1 \u003d fn(a);"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    const b1 \u003d fn(b);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    if (a1 \u003d\u003d\u003d b1) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      return 0;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    } if (a1 \u003c b1) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      return -1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    return 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  };"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "// date functions //"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "const DAY_IN_MS \u003d (1000 * 60 * 60 * 24);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "function getIntervalDay(a, b) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  const diff \u003d Date.parse(a) - Date.parse(b);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  return diff / DAY_IN_MS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "function getDateStr(date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  return (new Date(date)).toISOString().split(\u0027T\u0027)[0];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "function dateRounding(datestr, roundDown) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  // rounding up to nearest sunday"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  const date \u003d new Date(datestr);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  const day \u003d date.getUTCDay();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  let datems \u003d date.getTime();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  if (roundDown) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    datems -\u003d day * DAY_IN_MS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    datems +\u003d (7 - day) * DAY_IN_MS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  return getDateStr(datems);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "function addDays(dateStr, numDays) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  const date \u003d new Date(dateStr);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  return getDateStr(date.getTime() + numDays * DAY_IN_MS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "window.vSummary \u003d {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  props: [\u0027repos\u0027],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  template: window.$(\u0027v_summary\u0027).innerHTML,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  data() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    return {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      filtered: [],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      filterSearch: \u0027\u0027,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      filterSort: \u0027displayName\u0027,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      filterSortReverse: false,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      filterGroupRepos: true,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      filterTimeFrame: \u0027day\u0027,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      tmpFilterSinceDate: \u0027\u0027,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      tmpFilterUntilDate: \u0027\u0027,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      filterSinceDate: \u0027\u0027,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      filterUntilDate: \u0027\u0027,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      filterHash: \u0027\u0027,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      rampSize: 0.01,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      minDate: \u0027\u0027,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      maxDate: \u0027\u0027,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    };"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  },"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  watch: {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    repos() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.getFiltered();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    filterSort() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.getFiltered();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    filterSortReverse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.getFiltered();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    filterGroupRepos() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.getFiltered();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    filterTimeFrame() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.getFiltered();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    tmpFilterSinceDate() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      if (this.tmpFilterSinceDate \u003e\u003d this.minDate) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        this.filterSinceDate \u003d this.tmpFilterSinceDate;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.getFiltered();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    tmpFilterUntilDate() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      if (this.tmpFilterUntilDate \u003c\u003d this.maxDate) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        this.filterUntilDate \u003d this.tmpFilterUntilDate;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.getFiltered();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  },"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  computed: {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    avgCommitSize() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      let totalCommits \u003d 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      let totalCount \u003d 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.filtered.forEach((repo) \u003d\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        repo.forEach((user) \u003d\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          user.commits.forEach((slice) \u003d\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            if (slice.insertions \u003e 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "              totalCount +\u003d 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "              totalCommits +\u003d slice.insertions;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      });"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      return totalCommits / totalCount;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    avgContributionSize() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      if (typeof meanContributionSize \u003d\u003d\u003d \u0027undefined\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        let totalLines \u003d 0;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        let totalCount \u003d 0;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.repos.forEach((repo) \u003d\u003e {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          repo.users.forEach((user) \u003d\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            if (user.totalCommits \u003e 0) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "              totalCount +\u003d 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "              totalLines +\u003d user.totalCommits;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        meanContributionSize \u003d totalLines / totalCount;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      return meanContributionSize;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  },"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  methods: {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    // view functions //"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    getWidth(slice) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      if (slice.insertions \u003d\u003d\u003d 0) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      const newSize \u003d 100 * (slice.insertions / this.avgCommitSize);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      return Math.max(newSize * this.rampSize, 0.5);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    getSliceTitle(slice) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      return `contribution on ${slice.sinceDate}: ${slice.insertions} lines`;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    getSliceLink(user, slice) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      const { REPOS } \u003d window;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      const untilDate \u003d this.filterTimeFrame \u003d\u003d\u003d \u0027week\u0027 ? addDays(slice.sinceDate, 6): slice.sinceDate;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      return `http://github.com/${"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        REPOS[user.repoId].location.organization}/${"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        REPOS[user.repoId].location.repoName}/commits/${"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        REPOS[user.repoId].branch}?`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                + `author\u003d${user.name}\u0026`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "                + `since\u003d${slice.sinceDate}\u0027T\u002700:00:00+08:00\u0026`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                + `until\u003d${untilDate}\u0027T\u002723:59:59+08:00`;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    getContributionBars(totalContribution) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      const res \u003d [];"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      const contributionLimit \u003d (this.avgContributionSize * 2);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      const cnt \u003d parseInt(totalContribution / contributionLimit, 10);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      for (let cntId \u003d 0; cntId \u003c cnt; cntId +\u003d 1) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        res.push(100);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      const last \u003d (totalContribution % contributionLimit) / contributionLimit;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      if (last !\u003d\u003d 0) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        res.push(last * 100);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      return res;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    // model functions //"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    updateFilterSearch(evt) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      this.filterSearch \u003d evt.target.value;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    },"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    getFilterHash() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      const { addHash } \u003d window;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      addHash(\u0027search\u0027, this.filterSearch);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      addHash(\u0027sort\u0027, this.filterSort);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      addHash(\u0027since\u0027, this.filterSinceDate);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      addHash(\u0027until\u0027, this.filterUntilDate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      addHash(\u0027timeframe\u0027, this.filterTimeFrame);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      addHash(\u0027reverse\u0027, this.filterSortReverse);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      addHash(\u0027repoSort\u0027, this.filterGroupRepos);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    renderFilterHash() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      const params \u003d window.location.hash.slice(1).split(\u0027\u0026\u0027);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      params.forEach((param) \u003d\u003e {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        const [key, val] \u003d param.split(\u0027\u003d\u0027);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        if (key) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "          window.hashParams[key] \u003d decodeURIComponent(val);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      });"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      const convertBool \u003d txt \u003d\u003e (txt \u003d\u003d\u003d \u0027true\u0027);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      const hash \u003d window.hashParams;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      if (hash.search) { this.filterSearch \u003d hash.search; }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      if (hash.sort) { this.filterSort \u003d hash.sort; }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      if (hash.timeframe) { this.filterTimeFrame \u003d hash.timeframe; }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      if (hash.since) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        this.tmpFilterSinceDate \u003d hash.since;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      if (hash.until) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        this.tmpFilterUntilDate \u003d hash.until;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      if (hash.reverse) { this.filterSortReverse \u003d convertBool(hash.reverse); }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      if (hash.repoSort) { this.filterGroupRepos \u003d convertBool(hash.repoSort); }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    },"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    getDates() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      if (this.minDate \u0026\u0026 this.maxDate) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      let minDate \u003d \u0027\u0027;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      let maxDate \u003d \u0027\u0027;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.filtered.forEach((repo) \u003d\u003e {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        repo.forEach((user) \u003d\u003e {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          const { commits } \u003d user;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "          if (commits.length) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            const date1 \u003d commits[0].sinceDate;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            const date2 \u003d commits[commits.length - 1].sinceDate;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            if (!minDate || minDate \u003e date1) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "              minDate \u003d date1;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            if (!maxDate || maxDate \u003c date2) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "              maxDate \u003d date2;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "          }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      });"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      if (!this.filterSinceDate) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        if(!this.tmpFilterSinceDate || this.tmpFilterSinceDate \u003c minDate){"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "          this.tmpFilterSinceDate \u003d minDate;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.filterSinceDate \u003d minDate;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        this.minDate \u003d minDate;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      if (!this.filterUntilDate) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        if(!this.tmpFilterUntilDate || this.tmpFilterUntilDate \u003e maxDate){"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "          this.tmpFilterUntilDate \u003d maxDate;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.filterUntilDate \u003d maxDate;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        this.maxDate \u003d maxDate;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    getFiltered() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.getFilterHash();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      // array of array, sorted by repo"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      const full \u003d [];"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.repos.forEach((repo) \u003d\u003e {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        const res \u003d [];"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        // filtering"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        repo.users.forEach((user) \u003d\u003e {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "          const toDisplay \u003d this.filterSearch.toLowerCase()"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            .split(\u0027 \u0027).filter(param \u003d\u003e param)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            .map(param \u003d\u003e user.searchPath.search(param) \u003e -1)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            .reduce((curr, bool) \u003d\u003e curr || bool, false);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "          if (!this.filterSearch || toDisplay) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            this.getUserCommits(user);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            if (this.filterTimeFrame \u003d\u003d\u003d \u0027week\u0027) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "              this.splitCommitsWeek(user);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            res.push(user);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        if (res.length) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          full.push(res);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      });"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.filtered \u003d full;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.getDates();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      this.sortFiltered();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    splitCommitsWeek(user) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      const { commits } \u003d user;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      const leng \u003d commits.length;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      const res \u003d [];"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      for (let weekId \u003d 0; weekId \u003c (leng - 1) / 7; weekId +\u003d 1) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        const week \u003d {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          insertions: 0,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          deletions: 0,"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          sinceDate: commits[weekId * 7].sinceDate,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          untilDate: \u0027\u0027,"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        };"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        for (let dayId \u003d 0; dayId \u003c 7; dayId +\u003d 1) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          const commit \u003d commits[(weekId * 7) + dayId];"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "          if (commit) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            week.insertions +\u003d commit.insertions;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            week.deletions +\u003d commit.deletions;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            week.untilDate \u003d commit.untilDate;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        res.push(week);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      user.commits \u003d res;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    getUserCommits(user) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      user.commits \u003d [];"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      const userFirst \u003d user.dailyCommits[0];"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      const userLast \u003d user.dailyCommits[user.dailyCommits.length - 1];"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      if (!userFirst) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      let sinceDate \u003d this.filterSinceDate;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      if (!sinceDate) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        ({ sinceDate } \u003d userFirst);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      let untilDate \u003d this.filterUntilDate;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      if (!untilDate) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        untilDate \u003d userLast.sinceDate;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      if (this.filterTimeFrame \u003d\u003d\u003d \u0027week\u0027) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        sinceDate \u003d dateRounding(sinceDate, 1);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      let diff \u003d getIntervalDay(userFirst.sinceDate, sinceDate);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      const startMs \u003d (new Date(sinceDate)).getTime();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      for (let dayId \u003d 0; dayId \u003c diff; dayId +\u003d 1) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        user.commits.push({"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          insertions: 0,"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          deletions: 0,"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          sinceDate: getDateStr(startMs + (dayId * DAY_IN_MS)),"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          untilDate: getDateStr(startMs + ((dayId + 1) * DAY_IN_MS)),"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      user.dailyCommits.forEach((commit) \u003d\u003e {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        const date \u003d commit.sinceDate;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        if (date \u003e\u003d sinceDate \u0026\u0026 date \u003c\u003d untilDate) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          user.commits.push(commit);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      });"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      if (this.filterTimeFrame \u003d\u003d\u003d \u0027week\u0027) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        untilDate \u003d dateRounding(untilDate);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      diff \u003d getIntervalDay(untilDate, userLast.sinceDate);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      const endMs \u003d (new Date(userLast.sinceDate)).getTime();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      for (let paddingId \u003d 1; paddingId \u003c diff; paddingId +\u003d 1) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        user.commits.push({"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          insertions: 0,"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          deletions: 0,"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          sinceDate: getDateStr(endMs + (paddingId * DAY_IN_MS)),"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          untilDate: getDateStr(endMs + ((paddingId + 1) * DAY_IN_MS)),"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "      return null;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    sortFiltered() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      const full \u003d [];"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      if (!this.filterGroupRepos) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        full.push([]);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.filtered.forEach((users) \u003d\u003e {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        if (this.filterGroupRepos) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          users.sort(comparator(ele \u003d\u003e ele[this.filterSort]));"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          full.push(users);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "          users.forEach(user \u003d\u003e full[0].push(user));"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      });"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      if (!this.filterGroupRepos) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        full[0].sort(comparator(ele \u003d\u003e ele[this.filterSort]));"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      if (this.filterSortReverse) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        full.forEach(repo \u003d\u003e repo.reverse());"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "      this.filtered \u003d full;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    },"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  },"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  created() {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    this.renderFilterHash();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    this.getFiltered();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "  },"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "};"
      }
    ],
    "authorContributionMap": {
      "ongspxm": 91,
      "eugenepeh": 308,
      "-": 3
    }
  },
  {
    "path": "src/main/java/reposense/RepoSense.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.time.ZonedDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.CliArguments;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.ConfigCliArguments;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.LocationsCliArguments;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.ViewCliArguments;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.parser.ArgsParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.parser.AuthorConfigCsvParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.parser.InvalidLocationException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.parser.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.parser.RepoConfigCsvParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.report.ReportGenerator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import reposense.system.DashboardServer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import reposense.util.FileUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yong24s"
        },
        "content": "public class RepoSense {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(RepoSense.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static final int SERVER_PORT_NUMBER \u003d 9000;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"E MMM d HH:mm:ss \u0027SGT\u0027 yyyy\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            CliArguments cliArguments \u003d ArgsParser.parse(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            List\u003cRepoConfiguration\u003e configs \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            if (cliArguments instanceof ViewCliArguments) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                DashboardServer.startServer(SERVER_PORT_NUMBER, (("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                        ViewCliArguments) cliArguments).getReportDirectoryPath().toAbsolutePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            } else if (cliArguments instanceof ConfigCliArguments) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                configs \u003d getRepoConfigurations((ConfigCliArguments) cliArguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            } else if (cliArguments instanceof LocationsCliArguments) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                configs \u003d getRepoConfigurations((LocationsCliArguments) cliArguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                throw new AssertionError(\"CliArguments\u0027s subclass type is unhandled.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            RepoConfiguration.setFormatsToRepoConfigs(configs, cliArguments.getFormats());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            RepoConfiguration.setDatesToRepoConfigs(configs, cliArguments.getSinceDate(), cliArguments.getUntilDate());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            ReportGenerator.generateReposReport(configs, cliArguments.getOutputFilePath().toAbsolutePath().toString(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                    formatter.format(ZonedDateTime.now(ZoneId.of(\"UTC+8\"))));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            FileUtil.zip(cliArguments.getOutputFilePath().toAbsolutePath(), \".json\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            if (cliArguments.isAutomaticallyLaunching()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                DashboardServer.startServer(SERVER_PORT_NUMBER, cliArguments.getOutputFilePath().toAbsolutePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            logger.log(Level.WARNING, ioe.getMessage(), ioe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            logger.log(Level.WARNING, pe.getMessage(), pe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Constructs a list of {@code RepoConfiguration} if {@code cliArguments} is a {@code ConfigCliArguments}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * @throws IOException if user-supplied csv file does not exists or is not readable."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public static List\u003cRepoConfiguration\u003e getRepoConfigurations(ConfigCliArguments cliArguments) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cRepoConfiguration\u003e repoConfigs \u003d new RepoConfigCsvParser(cliArguments.getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cRepoConfiguration\u003e authorConfigs \u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            authorConfigs \u003d new AuthorConfigCsvParser(cliArguments.getAuthorConfigFilePath()).parse();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            RepoConfiguration.merge(repoConfigs, authorConfigs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            // IOException thrown as author-config.csv is not found."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            // Ignore exception as the file is optional."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return repoConfigs;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Constructs a list of {@code RepoConfiguration} if {@code cliArguments} is a {@code LocationsCliArguments}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public static List\u003cRepoConfiguration\u003e getRepoConfigurations(LocationsCliArguments cliArguments) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cRepoConfiguration\u003e configs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String locationString : cliArguments.getLocations()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                configs.add(new RepoConfiguration(new RepoLocation(locationString)));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            } catch (InvalidLocationException ile) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                logger.log(Level.WARNING, ile.getMessage(), ile);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration.setStandaloneConfigIgnoredToRepoConfigs(configs, cliArguments.isStandaloneConfigIgnored());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return configs;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdityaA1998": 14,
      "yamidark": 9,
      "yong24s": 66,
      "eugenepeh": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/reposense/authorship/AuthorshipReporter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.authorship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.AuthorshipSummary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.FileInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.FileResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * Generates the authorship summary data for each repository."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class AuthorshipReporter {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Generates and returns the authorship summary for each repo in {@code config}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public static AuthorshipSummary generateAuthorshipSummary(RepoConfiguration config) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cFileInfo\u003e fileInfos \u003d FileInfoExtractor.extractFileInfos(config);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cFileResult\u003e fileResults \u003d fileInfos.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                .map(fileInfo -\u003e FileInfoAnalyzer.analyzeFile(config, fileInfo))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                .filter(Objects::nonNull)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return FileResultAggregator.aggregateFileResult(fileResults, config.getAuthorList());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 30
    }
  },
  {
    "path": "src/main/java/reposense/authorship/FileInfoAnalyzer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.authorship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.PathMatcher;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.analyzer.AnnotatorAnalyzer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.analyzer.CheckStyleParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.FileInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.FileResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.LineInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.git.GitBlame;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CommitHash;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yamidark"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * Analyzes the target and information given in the {@code FileInfo}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yamidark"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class FileInfoAnalyzer {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(FileInfoAnalyzer.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final String REUSED_TAG \u003d \"//@reused\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final int AUTHOR_NAME_OFFSET \u003d \"author \".length();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final int AUTHOR_EMAIL_OFFSET \u003d \"author-mail \".length();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final int FULL_COMMIT_HASH_LENGTH \u003d 40;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Analyzes the lines of the file, given in the {@code fileInfo}, that has changed in the time period provided"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * by {@code config}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Returns null if the file contains the reused tag, or none of the {@code Author} specified in"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * {@code config} contributed to the file in {@code fileInfo}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public static FileResult analyzeFile(RepoConfiguration config, FileInfo fileInfo) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        String relativePath \u003d fileInfo.getPath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (isReused(config.getRepoRoot(), relativePath)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        aggregateBlameAuthorInfo(config, fileInfo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (config.isNeedCheckStyle()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            CheckStyleParser.aggregateStyleIssue(fileInfo, config.getRepoRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (config.isAnnotationOverwrite()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            AnnotatorAnalyzer.aggregateAnnotationAuthorInfo(fileInfo, config.getAuthorEmailsAndAliasesMap());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (!config.getAuthorList().isEmpty() \u0026\u0026 fileInfo.isAllAuthorsIgnored(config.getAuthorList())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return generateFileResult(fileInfo);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Generates and returns a {@code FileResult} with the authorship results from {@code fileInfo} consolidated."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static FileResult generateFileResult(FileInfo fileInfo) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        HashMap\u003cAuthor, Integer\u003e authorContributionMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        for (LineInfo line : fileInfo.getLines()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            Author author \u003d line.getAuthor();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            authorContributionMap.put(author, authorContributionMap.getOrDefault(author, 0) + 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return new FileResult(fileInfo.getPath(), fileInfo.getLines(), authorContributionMap);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Sets the {@code Author} for each line in {@code fileInfo} based on the git blame analysis on the file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static void aggregateBlameAuthorInfo(RepoConfiguration config, FileInfo fileInfo) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Map\u003cString, Author\u003e authorEmailsAndAliasesMap \u003d config.getAuthorEmailsAndAliasesMap();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        String blameResults \u003d getGitBlameResult(config, fileInfo.getPath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        String[] blameResultLines \u003d blameResults.split(\"\\n\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d Paths.get(fileInfo.getPath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        for (int lineCount \u003d 0; lineCount \u003c blameResultLines.length; lineCount +\u003d 3) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            String commitHash \u003d blameResultLines[lineCount].substring(0, FULL_COMMIT_HASH_LENGTH);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            String authorName \u003d blameResultLines[lineCount + 1].substring(AUTHOR_NAME_OFFSET);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            String authorEmail \u003d blameResultLines[lineCount + 2]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                    .substring(AUTHOR_EMAIL_OFFSET).replaceAll(\"\u003c|\u003e\", \"\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            Author author \u003d authorEmailsAndAliasesMap.getOrDefault(authorName,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                    authorEmailsAndAliasesMap.getOrDefault(authorEmail, Author.UNKNOWN_AUTHOR));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            if (!fileInfo.isFileLineTracked(lineCount / 3) || isAuthorIgnoringFile(author, filePath)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    || CommitHash.isInsideCommitList(commitHash, config.getIgnoreCommitList())) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                author \u003d Author.UNKNOWN_AUTHOR;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            fileInfo.setLineAuthor(lineCount / 3, author);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Returns the analysis result from running git blame on {@code filePath}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static String getGitBlameResult(RepoConfiguration config, String filePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return GitBlame.blame(config.getRepoRoot(), filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Returns true if the first line in the file at {@code repoRoot}\u0027s {@code relativePath} contains the reused tag."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static boolean isReused(String repoRoot, String relativePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Path path \u003d Paths.get(repoRoot, relativePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        try (BufferedReader br \u003d new BufferedReader(new FileReader(path.toFile()))) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            String firstLine \u003d br.readLine();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            if (firstLine \u003d\u003d null || firstLine.contains(REUSED_TAG)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            logger.log(Level.WARNING, ioe.getMessage(), ioe);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code author} is ignoring the {@code filePath} based on its ignore glob list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isAuthorIgnoringFile(Author author, Path filePath) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        PathMatcher ignoreGlobMatcher \u003d author.getIgnoreGlobMatcher();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return ignoreGlobMatcher.matches(filePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 113,
      "eugenepeh": 14,
      "-": 6
    }
  },
  {
    "path": "src/main/java/reposense/authorship/FileInfoExtractor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.authorship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.FileInfo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.LineInfo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.git.CommitNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.git.GitCheckout;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.git.GitDiff;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.git.GitRevList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Format;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * Extracts out all the relevant {@code FileInfo} from the repository."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yamidark"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class FileInfoExtractor {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(FileInfoExtractor.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final String DIFF_FILE_CHUNK_SEPARATOR \u003d \"\\ndiff --git a/.*\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final String LINE_CHUNKS_SEPARATOR \u003d \"\\n@@ \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final String LINE_INSERTED_SYMBOL \u003d \"+\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final String STARTING_LINE_NUMBER_GROUP_NAME \u003d \"startingLineNumber\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final String FILE_CHANGED_GROUP_NAME \u003d \"filePath\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final String FILE_DELETED_SYMBOL \u003d \"/dev/null\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final String MATCH_GROUP_FAIL_MESSAGE_FORMAT \u003d \"Failed to match the %s group for:\\n%s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final String INVALID_FILE_PATH_MESSAGE_FORMAT \u003d \"Invalid file path %s provided, skipping this file.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final int LINE_CHANGED_HEADER_INDEX \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Pattern STARTING_LINE_NUMBER_PATTERN \u003d Pattern.compile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            \"-(\\\\d)+(,)?(\\\\d)* \\\\+(?\u003cstartingLineNumber\u003e\\\\d+)(,)?(\\\\d)* @@\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Pattern FILE_CHANGED_PATTERN \u003d Pattern.compile(\"\\n(\\\\+){3} b?/(?\u003cfilePath\u003e.*)\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Extracts a list of relevant files given in {@code config}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public static List\u003cFileInfo\u003e extractFileInfos(RepoConfiguration config) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Extracting relevant file info from \" + config.getLocation() + \"...\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        List\u003cFileInfo\u003e fileInfos \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        // checks out to the latest commit of the date range to ensure the FileInfo generated correspond to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        // git blame file analyze output"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            GitCheckout.checkoutDate(config.getRepoRoot(), config.getBranch(), config.getUntilDate());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        } catch (CommitNotFoundException cnfe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            return fileInfos;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String lastCommitHash \u003d GitRevList.getCommitHashBeforeDate("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                config.getRepoRoot(), config.getBranch(), config.getSinceDate());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (!lastCommitHash.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            fileInfos \u003d getEditedFileInfos(config, lastCommitHash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            getAllFileInfo(config, Paths.get(config.getRepoRoot()), fileInfos);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        fileInfos.sort(Comparator.comparing(FileInfo::getPath));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return fileInfos;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Generates a list of relevant {@code FileInfo} for all files that were edited in between the current"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * commit and the {@code lastCommitHash} commit, marks each {@code LineInfo} for each {@code FileInfo} on"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * whether they have been inserted within the commit range or not, and returns it."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public static List\u003cFileInfo\u003e getEditedFileInfos(RepoConfiguration config, String lastCommitHash) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cFileInfo\u003e fileInfos \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String fullDiffResult \u003d GitDiff.diffCommit(config.getRepoRoot(), lastCommitHash);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        // no diff between the 2 commits, return an empty list"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (fullDiffResult.isEmpty()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            return fileInfos;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        String[] fileDiffResultList \u003d fullDiffResult.split(DIFF_FILE_CHUNK_SEPARATOR);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        for (String fileDiffResult : fileDiffResultList) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            Matcher filePathMatcher \u003d FILE_CHANGED_PATTERN.matcher(fileDiffResult);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            // diff result does not have the markers to indicate that file has any line changes, skip it"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            if (!filePathMatcher.find()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            String filePath \u003d filePathMatcher.group(FILE_CHANGED_GROUP_NAME);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            // file is deleted, skip it as well"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            if (filePath.equals(FILE_DELETED_SYMBOL)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            if (Format.isInsideWhiteList(filePath, config.getFormats())) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                    FileInfo currentFileInfo \u003d generateFileInfo(config.getRepoRoot(), filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                    setLinesToTrack(currentFileInfo, fileDiffResult);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                    fileInfos.add(currentFileInfo);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                    logger.warning(String.format(INVALID_FILE_PATH_MESSAGE_FORMAT, filePath));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return fileInfos;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Analyzes the {@code fileDiffResult} and marks each {@code LineInfo} in {@code FileInfo} on whether they were"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * inserted in between the commit range."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static void setLinesToTrack(FileInfo fileInfo, String fileDiffResult) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        String[] linesChangedChunk \u003d fileDiffResult.split(LINE_CHUNKS_SEPARATOR);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cLineInfo\u003e lineInfos \u003d fileInfo.getLines();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        int fileLinePointer \u003d 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        // skips the header, index starts from 1"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        for (int sectionIndex \u003d 1; sectionIndex \u003c linesChangedChunk.length; sectionIndex++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            String linesChangedInSection \u003d linesChangedChunk[sectionIndex];"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            String[] linesChanged \u003d linesChangedInSection.split(\"\\n\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            int startingLineNumber \u003d getStartingLineNumber(linesChanged[LINE_CHANGED_HEADER_INDEX]);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            // mark all untouched lines between sections as untracked"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            while (fileLinePointer \u003c startingLineNumber - 1) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                lineInfos.get(fileLinePointer++).setTracked(false);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            // skips the header, index starts from 1"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            for (int lineIndex \u003d 1; lineIndex \u003c linesChanged.length; lineIndex++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                String lineChanged \u003d linesChanged[lineIndex];"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                // set line added to be tracked"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                if (lineChanged.startsWith(LINE_INSERTED_SYMBOL)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                    lineInfos.get(fileLinePointer++).setTracked(true);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        // set all remaining lines in file that were untouched to be untracked"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        while (fileLinePointer \u003c lineInfos.size()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            lineInfos.get(fileLinePointer++).setTracked(false);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Traverses each file from the repo root directory, generates the {@code FileInfo} for each relevant file found"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * based on {@code config} and inserts it into {@code fileInfos}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static void getAllFileInfo(RepoConfiguration config, Path directory, List\u003cFileInfo\u003e fileInfos) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        try (Stream\u003cPath\u003e pathStream \u003d Files.list(directory)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            for (Path filePath : pathStream.collect(Collectors.toList())) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                String relativePath \u003d filePath.toString().substring(config.getRepoRoot().length());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                if (Files.isDirectory(filePath)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                    getAllFileInfo(config, filePath, fileInfos);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                if (Format.isInsideWhiteList(relativePath, config.getFormats())) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                        fileInfos.add(generateFileInfo(config.getRepoRoot(), relativePath));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                    } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                        logger.warning(String.format(INVALID_FILE_PATH_MESSAGE_FORMAT, filePath));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            logger.log(Level.SEVERE, \"Error occured while extracing all relevant file infos.\", ioe);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Generates and returns a {@code FileInfo} with a list of {@code LineInfo} for each line content in the"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * {@code relativePath} file."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public static FileInfo generateFileInfo(String repoRoot, String relativePath) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileInfo fileInfo \u003d new FileInfo(relativePath.replace(\u0027\\\\\u0027, \u0027/\u0027));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Path path \u003d Paths.get(repoRoot, fileInfo.getPath());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        try (BufferedReader br \u003d new BufferedReader(new FileReader(path.toFile()))) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            int lineNum \u003d 1;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                fileInfo.addLine(new LineInfo(lineNum++, line));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            logger.log(Level.SEVERE, ioe.getMessage(), ioe);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return fileInfo;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Returns the starting line changed number, within the file diff result, by matching the pattern inside"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * {@code linesChanged}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static int getStartingLineNumber(String linesChanged) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Matcher chunkHeaderMatcher \u003d STARTING_LINE_NUMBER_PATTERN.matcher(linesChanged);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (!chunkHeaderMatcher.find()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            logger.severe(String.format(MATCH_GROUP_FAIL_MESSAGE_FORMAT, \"line changed\", linesChanged));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            throw new AssertionError(\"Should not have error matching line number pattern inside chunk header!\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return Integer.parseInt(chunkHeaderMatcher.group(STARTING_LINE_NUMBER_GROUP_NAME));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 202,
      "eugenepeh": 13,
      "-": 4
    }
  },
  {
    "path": "src/main/java/reposense/authorship/FileResultAggregator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.authorship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.AuthorshipSummary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.FileResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.LineInfo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * Aggregates the file analysis results to get the contribution and issue summary for all authors."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class FileResultAggregator {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Returns the {@code AuthorshipSummary} generated from aggregating the {@code fileResults}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public static AuthorshipSummary aggregateFileResult(List\u003cFileResult\u003e fileResults, List\u003cAuthor\u003e authors) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        AuthorshipSummary authorContributionSummary \u003d new AuthorshipSummary(fileResults, authors);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        for (FileResult fileResult : fileResults) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            for (LineInfo lineInfo : fileResult.getLines()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                Author author \u003d lineInfo.getAuthor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                if (!authors.contains(author)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                authorContributionSummary.addAuthorContributionCount(author);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return authorContributionSummary;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 31
    }
  },
  {
    "path": "src/main/java/reposense/authorship/analyzer/AnnotatorAnalyzer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.authorship.analyzer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.FileInfo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.LineInfo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * Analyzes the authorship of a {@code FileInfo} using the given annotations on the file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AnnotatorAnalyzer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String AUTHOR_TAG \u003d \"@@author\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String REGEX_AUTHOR_NAME_FORMAT \u003d \"([a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern PATTERN_AUTHOR_NAME_FORMAT \u003d Pattern.compile(REGEX_AUTHOR_NAME_FORMAT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MATCHER_GROUP_AUTHOR_NAME \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Overrides the authorship information in {@code fileInfo} based on annotations given on the file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public static void aggregateAnnotationAuthorInfo(FileInfo fileInfo, Map\u003cString, Author\u003e authorAliasMap) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Author currentAuthor \u003d Author.UNKNOWN_AUTHOR;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d Paths.get(fileInfo.getPath());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        for (LineInfo lineInfo : fileInfo.getLines()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            if (lineInfo.getContent().contains(AUTHOR_TAG)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                Author newAuthor \u003d findAuthorInLine(lineInfo.getContent(), authorAliasMap);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                if (newAuthor.equals(Author.UNKNOWN_AUTHOR)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    //end of an author tag should belong to this author too."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                    lineInfo.setAuthor(currentAuthor);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                } else if (newAuthor.getIgnoreGlobMatcher().matches(filePath)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                    newAuthor \u003d Author.UNKNOWN_AUTHOR;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                //set a new author"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                currentAuthor \u003d newAuthor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            if (!currentAuthor.equals(Author.UNKNOWN_AUTHOR)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                lineInfo.setAuthor(currentAuthor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static Author findAuthorInLine(String line, Map\u003cString, Author\u003e authorAliasMap) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] split \u003d line.split(AUTHOR_TAG);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String name \u003d extractAuthorName(split[1]);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                return Author.UNKNOWN_AUTHOR;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            return authorAliasMap.getOrDefault(name, Author.UNKNOWN_AUTHOR);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            return Author.UNKNOWN_AUTHOR;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts the name that follows the specific format."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return an empty string if no such author was found, the new author name otherwise"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static String extractAuthorName(String authorTagParameters) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedParameters \u003d authorTagParameters.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher matcher \u003d PATTERN_AUTHOR_NAME_FORMAT.matcher(trimmedParameters);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean foundMatch \u003d matcher.find();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!foundMatch) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return matcher.group(MATCHER_GROUP_AUTHOR_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 18,
      "eugenepeh": 11,
      "-": 48
    }
  },
  {
    "path": "src/main/java/reposense/authorship/analyzer/CheckStyleParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.authorship.analyzer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.io.StringReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import javax.xml.parsers.DocumentBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import javax.xml.parsers.DocumentBuilderFactory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import javax.xml.parsers.ParserConfigurationException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.w3c.dom.Document;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.w3c.dom.Element;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.w3c.dom.NodeList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.xml.sax.InputSource;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.xml.sax.SAXException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.FileInfo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.IssueInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.LineInfo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.system.CommandRunner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class CheckStyleParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final String MESSAGE \u003d \"message\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final String SEVERITY \u003d \"severity\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final String LINE \u003d \"line\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(CheckStyleParser.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void aggregateStyleIssue(FileInfo fileInfo, String rootRepo) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String raw \u003d CommandRunner.checkStyleRaw(rootRepo + \u0027/\u0027 + fileInfo.getPath());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        logger.info(\"Checking style of:\" + fileInfo.getPath());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NodeList nodeList \u003d getNodeListFromRawOutput(raw);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c nodeList.getLength(); i++) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            Element element \u003d (Element) nodeList.item(i);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            String message \u003d element.getAttribute(MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            String severity \u003d element.getAttribute(SEVERITY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            int lineNumber \u003d Integer.parseInt(element.getAttribute(LINE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            LineInfo line \u003d fileInfo.getLine(lineNumber);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            line.getIssues().add(new IssueInfo(severity, message));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static NodeList getNodeListFromRawOutput(String raw) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DocumentBuilderFactory factory \u003d DocumentBuilderFactory.newInstance();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DocumentBuilder builder \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            builder \u003d factory.newDocumentBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParserConfigurationException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(\"Unexpected Exception while Initializing XML Parser\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        InputSource is \u003d new InputSource(new StringReader(raw));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Document doc \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            doc \u003d builder.parse(is);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (SAXException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        doc.getDocumentElement().normalize();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        NodeList nodeList \u003d doc.getElementsByTagName(\"error\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return nodeList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdityaA1998": 5,
      "yamidark": 5,
      "eugenepeh": 12,
      "-": 48
    }
  },
  {
    "path": "src/main/java/reposense/authorship/analyzer/MethodAnalyzer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.authorship.analyzer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.github.javaparser.JavaParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.github.javaparser.ast.CompilationUnit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.github.javaparser.ast.body.ConstructorDeclaration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.github.javaparser.ast.body.MethodDeclaration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.github.javaparser.ast.visitor.VoidVisitorAdapter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.FileInfo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.LineInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.MethodInfo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MethodAnalyzer {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(MethodAnalyzer.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void aggregateMethodInfo(FileInfo fileInfo, RepoConfiguration config) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        FileInputStream in \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            in \u003d new FileInputStream(config.getRepoRoot() + \"/\" + fileInfo.getPath());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            logger.log(Level.SEVERE, e.getMessage(), e);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        CompilationUnit cu;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            cu \u003d JavaParser.parse(in);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        MethodVisitor methodVistor \u003d new MethodVisitor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        methodVistor.visit(cu, null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ArrayList\u003cMethodInfo\u003e methods \u003d methodVistor.getMethods();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        for (MethodInfo methodInfo : methods) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            HashMap\u003cAuthor, Integer\u003e contributorMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int lineNum \u003d methodInfo.getStart(); lineNum \u003c\u003d methodInfo.getEnd(); lineNum++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                LineInfo line \u003d fileInfo.getLine(lineNum);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                Author author \u003d line.getAuthor();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                if (config.getAuthorList().isEmpty() || config.getAuthorList().contains(author)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    int authorLineCount \u003d contributorMap.getOrDefault(author, 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    contributorMap.put(author, authorLineCount + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                //line.setMethodInfo(methodInfo);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!contributorMap.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                Author owner \u003d Collections.max("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                        contributorMap.entrySet(), (author1, author2) -\u003e (author1.getValue() - author2.getValue())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                ).getKey();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                methodInfo.setOwner(owner);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                methodInfo.setOwner(new Author(\"\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        //fileInfo.setMethodInfos(methods);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class MethodVisitor extends VoidVisitorAdapter\u003cVoid\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        private ArrayList\u003cMethodInfo\u003e methods \u003d new ArrayList\u003cMethodInfo\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        private int identifierCounter \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        public void visit(MethodDeclaration n, Void arg) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            methods.add(new MethodInfo(n.getBegin().get().line, n.getEnd().get().line, n.getName().toString()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            super.visit(n, arg);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public void visit(ConstructorDeclaration n, Void arg) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            methods.add(new MethodInfo(n.getBegin().get().line, n.getEnd().get().line, n.getName().toString()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            super.visit(n, arg);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public ArrayList\u003cMethodInfo\u003e getMethods() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return methods;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdityaA1998": 7,
      "yamidark": 7,
      "eugenepeh": 12,
      "-": 67
    }
  },
  {
    "path": "src/main/java/reposense/authorship/model/AuthorshipSummary.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.authorship.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * Stores the contribution summary of the authors in the repo."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class AuthorshipSummary {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final List\u003cFileResult\u003e fileResults;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final HashMap\u003cAuthor, Integer\u003e authorFinalContributionMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public AuthorshipSummary(List\u003cFileResult\u003e fileResults, List\u003cAuthor\u003e authors) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.fileResults \u003d fileResults;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        authorFinalContributionMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        // initialise each author contribution to be 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        authors.forEach((author) -\u003e authorFinalContributionMap.put(author, 0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Increments the contribution count of {@code author} by one."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void addAuthorContributionCount(Author author) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        authorFinalContributionMap.put(author, authorFinalContributionMap.get(author) + 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public HashMap\u003cAuthor, Integer\u003e getAuthorFinalContributionMap() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return authorFinalContributionMap;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public List\u003cFileResult\u003e getFileResults() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return fileResults;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 37
    }
  },
  {
    "path": "src/main/java/reposense/authorship/model/FileInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.authorship.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * Stores the path to the file and the list of {@code LineInfo} for each line in the file."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class FileInfo {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final String path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final ArrayList\u003cLineInfo\u003e lines;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public FileInfo(String path) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        lines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Returns true if none of the {@code Author} in {@code listedAuthors} contributed to this file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public boolean isAllAuthorsIgnored(List\u003cAuthor\u003e listedAuthors) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return lines.stream().noneMatch(line -\u003e listedAuthors.contains(line.getAuthor()));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public LineInfo getLine(int num) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return lines.get(num - 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void addLine(LineInfo line) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        lines.add(line);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public ArrayList\u003cLineInfo\u003e getLines() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return lines;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Sets the {@code Author} of the {@code LineInfo} in {@code lineNumber} for this {@code FileInfo}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void setLineAuthor(int lineNumber, Author author) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        lines.get(lineNumber).setAuthor(author);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Returns true if the {@code LineInfo} in {@code lineNumber} index is being tracked."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public boolean isFileLineTracked(int lineNumber) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return getLines().get(lineNumber).isTracked();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (!(other instanceof FileInfo)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileInfo otherFileInfo \u003d (FileInfo) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return path.equals(otherFileInfo.path)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                \u0026\u0026 lines.equals(otherFileInfo.lines);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 71
    }
  },
  {
    "path": "src/main/java/reposense/authorship/model/FileResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.authorship.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * Stores the result from analyzing a {@code FileInfo}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class FileResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final String path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final ArrayList\u003cLineInfo\u003e lines;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final HashMap\u003cAuthor, Integer\u003e authorContributionMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public FileResult(String path, ArrayList\u003cLineInfo\u003e lines, HashMap\u003cAuthor, Integer\u003e authorContributionMap) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.lines \u003d lines;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.authorContributionMap \u003d authorContributionMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public List\u003cLineInfo\u003e getLines() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return lines;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public HashMap\u003cAuthor, Integer\u003e getAuthorContributionMap() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return authorContributionMap;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 34
    }
  },
  {
    "path": "src/main/java/reposense/authorship/model/IssueInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.authorship.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class IssueInfo {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    private String severity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public IssueInfo(String severity, String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        this.severity \u003d severity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setMessage(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSeverity() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return severity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setSeverity(String severity) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.severity \u003d severity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yamidark": 1,
      "-": 29
    }
  },
  {
    "path": "src/main/java/reposense/authorship/model/LineInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.authorship.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * Stores the information of a line in a {@code FileInfo}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class LineInfo {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int lineNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Author author;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String content;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private ArrayList\u003cIssueInfo\u003e issues;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private transient boolean isTracked;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public LineInfo(int lineNumber, String content) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.lineNumber \u003d lineNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        //V this line is commented to reduce the size of the output JSON"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        //this.issues \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        isTracked \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public ArrayList\u003cIssueInfo\u003e getIssues() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return issues;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Author getAuthor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return author;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAuthor(Author author) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getLineNumber() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return lineNumber;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getContent() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void setTracked(boolean isTracked) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.isTracked \u003d isTracked;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public boolean isTracked() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return isTracked;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasIssue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return !issues.isEmpty();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void addNewIssue(IssueInfo issueInfo) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        issues.add(issueInfo);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (!(other instanceof LineInfo)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        LineInfo otherLineInfo \u003d (LineInfo) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return lineNumber \u003d\u003d otherLineInfo.lineNumber"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                \u0026\u0026 Objects.equals(author, otherLineInfo.author)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                \u0026\u0026 content.equals(otherLineInfo.content)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                \u0026\u0026 Objects.equals(issues, otherLineInfo.issues)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                \u0026\u0026 isTracked \u003d\u003d otherLineInfo.isTracked;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yamidark": 42,
      "eugenepeh": 1,
      "-": 40
    }
  },
  {
    "path": "src/main/java/reposense/authorship/model/MethodInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.authorship.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class MethodInfo {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int METHOD_IDENTIFIER_COUNT \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private int start;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private int end;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private String methodName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Author owner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private int methodUid;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public MethodInfo(int start, int end, String methodName) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.methodName \u003d methodName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.methodUid \u003d ++METHOD_IDENTIFIER_COUNT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMethodName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return methodName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setMethodName(String methodName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.methodName \u003d methodName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getStart() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setStart(int start) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getEnd() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setEnd(int end) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Author getOwner() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return owner;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setOwner(Author owner) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.owner \u003d owner;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getTotalLines() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return end - start + 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public int getMethodUid() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return methodUid;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void setMethodUid(int methodUid) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.methodUid \u003d methodUid;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 2,
      "eugenepeh": 7,
      "-": 56
    }
  },
  {
    "path": "src/main/java/reposense/builder/ConfigurationBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.builder;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.parser.InvalidLocationException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigurationBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private RepoConfiguration config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public ConfigurationBuilder(String location, String branch) throws InvalidLocationException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d new RepoConfiguration(new RepoLocation(location), branch);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public ConfigurationBuilder needCheckStyle(boolean value) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setNeedCheckStyle(value);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ConfigurationBuilder commitNum(int value) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setCommitNum(value);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ConfigurationBuilder annotationOverwrite(boolean value) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAnnotationOverwrite(value);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ConfigurationBuilder ignoreDirectoryList(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        config.setIgnoreGlobList(list);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public ConfigurationBuilder authorList(List\u003cAuthor\u003e list) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAuthorList(list);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public RepoConfiguration build() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 3,
      "yong24s": 2,
      "eugenepeh": 3,
      "-": 38
    }
  },
  {
    "path": "src/main/java/reposense/commits/CommitInfoAnalyzer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.commits;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.commits.model.CommitInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.commits.model.CommitResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CommitHash;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yamidark"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * Analyzes commit information found in the git log."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yamidark"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class CommitInfoAnalyzer {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(CommitInfoAnalyzer.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final DateFormat GIT_ISO_FORMAT \u003d new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final String LOG_SPLITTER \u003d \"\\\\|\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final int COMMIT_HASH_INDEX \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final int AUTHOR_INDEX \u003d 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final int EMAIL_INDEX \u003d 2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final int DATE_INDEX \u003d 3;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final int MESSAGE_INDEX \u003d 4;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Pattern INSERTION_PATTERN \u003d Pattern.compile(\"([0-9]+) insertion\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Pattern DELETION_PATTERN \u003d Pattern.compile(\"([0-9]+) deletion\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Analyzes each {@code CommitInfo} in {@code commitInfos} and returns a list of {@code CommitResult} that is not"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * specified to be ignored or the author is inside {@code config}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public static List\u003cCommitResult\u003e analyzeCommits(List\u003cCommitInfo\u003e commitInfos, RepoConfiguration config) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return commitInfos.stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                .map(commitInfo -\u003e analyzeCommit(commitInfo, config.getAuthorEmailsAndAliasesMap()))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                .filter(commitResult -\u003e !commitResult.getAuthor().equals(Author.UNKNOWN_AUTHOR)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 !CommitHash.isInsideCommitList(commitResult.getHash(), config.getIgnoreCommitList()))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                .sorted(Comparator.comparing(CommitResult::getTime))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Extracts the relevant data from {@code commitInfo} into a {@code CommitResult}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public static CommitResult analyzeCommit(CommitInfo commitInfo, Map\u003cString, Author\u003e authorAliasMap) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        String infoLine \u003d commitInfo.getInfoLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        String statLine \u003d commitInfo.getStatLine();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        String[] elements \u003d infoLine.split(LOG_SPLITTER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        String hash \u003d elements[COMMIT_HASH_INDEX];"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Author author \u003d authorAliasMap.getOrDefault(elements[AUTHOR_INDEX],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                authorAliasMap.getOrDefault(elements[EMAIL_INDEX], Author.UNKNOWN_AUTHOR));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Date date \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            date \u003d GIT_ISO_FORMAT.parse(elements[DATE_INDEX]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            logger.log(Level.WARNING, \"Unable to parse the date from git log result for commit.\", pe);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d (elements.length \u003e MESSAGE_INDEX) ? elements[MESSAGE_INDEX] : \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        int insertion \u003d getInsertion(statLine);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        int deletion \u003d getDeletion(statLine);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return new CommitResult(author, hash, date, message, insertion, deletion);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static int getInsertion(String raw) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return getNumberWithPattern(raw, INSERTION_PATTERN);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static int getDeletion(String raw) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return getNumberWithPattern(raw, DELETION_PATTERN);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static int getNumberWithPattern(String raw, Pattern p) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Matcher m \u003d p.matcher(raw);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return m.find() ? Integer.parseInt(m.group(1)) : 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 81,
      "eugenepeh": 7,
      "-": 3
    }
  },
  {
    "path": "src/main/java/reposense/commits/CommitInfoExtractor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.commits;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.commits.model.CommitInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.git.GitCheckout;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.git.GitLog;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * Extracts commit information of a repository."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class CommitInfoExtractor {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(CommitInfoExtractor.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Extracts out and returns the raw information of each commit for the repo in {@code config}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public static List\u003cCommitInfo\u003e extractCommitInfos(RepoConfiguration config) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        logger.info(\"Extracting commits info for \" + config.getLocation() + \"...\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitCheckout.checkoutBranch(config.getRepoRoot(), config.getBranch());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cCommitInfo\u003e repoCommitInfos \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        for (Author author : config.getAuthorList()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            String gitLogResult \u003d GitLog.get(config, author);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            List\u003cCommitInfo\u003e authorCommitInfos \u003d parseGitLogResults(gitLogResult);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            repoCommitInfos.addAll(authorCommitInfos);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return repoCommitInfos;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Parses the {@code gitLogResult} into a list of {@code CommitInfo} and returns it."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static ArrayList\u003cCommitInfo\u003e parseGitLogResults(String gitLogResult) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        ArrayList\u003cCommitInfo\u003e commitInfos \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        String[] rawLines \u003d gitLogResult.split(\"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (rawLines.length \u003c 2) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            //no log (maybe because no contribution for that file type)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            return commitInfos;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        for (int i \u003d 0; i \u003c rawLines.length; i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            commitInfos.add(new CommitInfo(rawLines[i], rawLines[++i]));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            i++; //to skip the empty line"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Collections.reverse(commitInfos);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return commitInfos;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 55,
      "yong24s": 1,
      "eugenepeh": 4
    }
  },
  {
    "path": "src/main/java/reposense/commits/CommitResultAggregator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.commits;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.commits.model.AuthorIntervalContribution;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.commits.model.CommitContributionSummary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.commits.model.CommitResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * Uses the commit analysis results to generate the summary information of a repository."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yamidark"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class CommitResultAggregator {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Returns the {@code CommitContributionSummary} generated from aggregating the {@code commitResults}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public static CommitContributionSummary aggregateCommitResults("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            RepoConfiguration config, List\u003cCommitResult\u003e commitResults) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Date startDate \u003d config.getSinceDate() \u003d\u003d null ? getStartDate(commitResults) : config.getSinceDate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        HashSet\u003cAuthor\u003e suspiciousAuthors \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Map\u003cAuthor, List\u003cAuthorIntervalContribution\u003e\u003e authorDailyIntervalContributions \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                getAuthorIntervalContributions(config, commitResults, startDate, 1, suspiciousAuthors);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Map\u003cAuthor, List\u003cAuthorIntervalContribution\u003e\u003e authorWeeklyIntervalContributions \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                getAuthorIntervalContributions(config, commitResults, startDate, 7, suspiciousAuthors);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Map\u003cAuthor, Float\u003e authorContributionVariance \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                calcAuthorContributionVariance(authorDailyIntervalContributions);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return new CommitContributionSummary("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                config.getAuthorDisplayNameMap(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                authorDailyIntervalContributions,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                authorWeeklyIntervalContributions,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                authorContributionVariance);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static Map\u003cAuthor, Float\u003e calcAuthorContributionVariance("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            Map\u003cAuthor, List\u003cAuthorIntervalContribution\u003e\u003e intervalContributionMaps) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cAuthor, Float\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Author author : intervalContributionMaps.keySet()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cAuthorIntervalContribution\u003e contributions \u003d intervalContributionMaps.get(author);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            result.put(author, getContributionVariance(contributions));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static float getContributionVariance(List\u003cAuthorIntervalContribution\u003e contributions) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        if (contributions.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        //get mean"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        float total \u003d 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        for (AuthorIntervalContribution contribution : contributions) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            total +\u003d contribution.getTotalContribution();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        float mean \u003d total / contributions.size();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        float variance \u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        for (AuthorIntervalContribution contribution : contributions) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            variance +\u003d Math.pow((mean - contribution.getTotalContribution()), 2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return variance / contributions.size();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static Map\u003cAuthor, List\u003cAuthorIntervalContribution\u003e\u003e getAuthorIntervalContributions("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            RepoConfiguration config, List\u003cCommitResult\u003e commitInfos,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            Date startDate, int intervalLength, Set\u003cAuthor\u003e suspiciousAuthors) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        //init"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cAuthor, List\u003cAuthorIntervalContribution\u003e\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        for (Author author : config.getAuthorDisplayNameMap().keySet()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            result.put(author, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        if (!commitInfos.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            Date currentDate \u003d getStartOfDate(startDate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            Date nextDate \u003d getNextCutoffDate(currentDate, intervalLength);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            initIntervalContributionForNewDate(result, currentDate, nextDate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            for (CommitResult commit : commitInfos) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                while (nextDate.before(commit.getTime())) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                    currentDate \u003d new Date(nextDate.getTime());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                    nextDate \u003d getNextCutoffDate(nextDate, intervalLength);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                    initIntervalContributionForNewDate(result, currentDate, nextDate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cAuthorIntervalContribution\u003e tempList \u003d result.get(commit.getAuthor());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                if (tempList !\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    tempList.get(tempList.size() - 1).updateForCommit(commit);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static void initIntervalContributionForNewDate("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            Map\u003cAuthor, List\u003cAuthorIntervalContribution\u003e\u003e map, Date sinceDate, Date untilDate) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        for (List\u003cAuthorIntervalContribution\u003e dateToInterval : map.values()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            //dials back one minute so that github api can include the commit on the time itself"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            dateToInterval.add(new AuthorIntervalContribution(0, 0, sinceDate, untilDate));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Date getStartOfDate(Date current) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.setTime(current);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.HOUR_OF_DAY, 0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.MINUTE, 0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.SECOND, 0);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.MILLISECOND, 0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return cal.getTime();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Date getNextCutoffDate(Date current, int intervalLength) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar c \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        c.setTime(current);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        c.add(Calendar.DATE, intervalLength);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return c.getTime();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static Date getStartDate(List\u003cCommitResult\u003e commitInfos) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        cal.set(Calendar.YEAR, 2050);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Date min \u003d cal.getTime();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        if (!commitInfos.isEmpty()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            min \u003d commitInfos.get(0).getTime();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return min;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 35,
      "eugenepeh": 23,
      "-": 78
    }
  },
  {
    "path": "src/main/java/reposense/commits/CommitsReporter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.commits;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.commits.model.CommitContributionSummary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.commits.model.CommitInfo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.commits.model.CommitResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * Generates the commit summary data for each repository."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class CommitsReporter {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Generates and returns the commit contribution summary for each repo in {@code config}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public static CommitContributionSummary generateCommitSummary(RepoConfiguration config) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cCommitResult\u003e commitResults \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return CommitResultAggregator.aggregateCommitResults(config, commitResults);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 25
    }
  },
  {
    "path": "src/main/java/reposense/commits/model/AuthorIntervalContribution.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.commits.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class AuthorIntervalContribution {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private int insertions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private int deletions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private Date sinceDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private Date untilDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public AuthorIntervalContribution(int insertions, int deletions, Date sinceDate, Date untilDate) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.insertions \u003d insertions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.deletions \u003d deletions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.sinceDate \u003d sinceDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.untilDate \u003d untilDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public Date getSinceDate() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return sinceDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void setSinceDate(Date sinceDate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.sinceDate \u003d sinceDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public Date getUntilDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return untilDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void setUntilDate(Date untilDate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.untilDate \u003d untilDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getInsertions() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return insertions;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInsertions(int insertions) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.insertions \u003d insertions;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getDeletions() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return deletions;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDeletions(int deletions) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.deletions \u003d deletions;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void updateForCommit(CommitResult commit) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        insertions +\u003d commit.getInsertions();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        deletions +\u003d commit.getDeletions();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getTotalContribution() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return insertions + deletions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 2,
      "yong24s": 13,
      "eugenepeh": 1,
      "-": 43
    }
  },
  {
    "path": "src/main/java/reposense/commits/model/CommitContributionSummary.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.commits.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * Stores the consolidated results of commit analysis."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class CommitContributionSummary {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final Map\u003cAuthor, List\u003cAuthorIntervalContribution\u003e\u003e authorWeeklyIntervalContributions;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final Map\u003cAuthor, List\u003cAuthorIntervalContribution\u003e\u003e authorDailyIntervalContributions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final Map\u003cAuthor, Float\u003e authorContributionVariance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final Map\u003cAuthor, String\u003e authorDisplayNameMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public CommitContributionSummary("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            Map\u003cAuthor, String\u003e authorDisplayNameMap,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            Map\u003cAuthor, List\u003cAuthorIntervalContribution\u003e\u003e authorDailyIntervalContributions,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            Map\u003cAuthor, List\u003cAuthorIntervalContribution\u003e\u003e authorWeeklyIntervalContributions,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            Map\u003cAuthor, Float\u003e authorContributionVariance) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.authorDisplayNameMap \u003d authorDisplayNameMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.authorDailyIntervalContributions \u003d authorDailyIntervalContributions;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.authorWeeklyIntervalContributions \u003d authorWeeklyIntervalContributions;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.authorContributionVariance \u003d authorContributionVariance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public Map\u003cAuthor, String\u003e getAuthorDisplayNameMap() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return authorDisplayNameMap;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public Map\u003cAuthor, List\u003cAuthorIntervalContribution\u003e\u003e getAuthorWeeklyIntervalContributions() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return authorWeeklyIntervalContributions;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public Map\u003cAuthor, List\u003cAuthorIntervalContribution\u003e\u003e getAuthorDailyIntervalContributions() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return authorDailyIntervalContributions;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public Map\u003cAuthor, Float\u003e getAuthorContributionVariance() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return authorContributionVariance;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 43
    }
  },
  {
    "path": "src/main/java/reposense/commits/model/CommitInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.commits.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * Stores the raw information generated for each commit."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class CommitInfo {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final String infoLine;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final String statLine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public CommitInfo(String infoLine, String statLine) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.infoLine \u003d infoLine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.statLine \u003d statLine;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public String getInfoLine() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return infoLine;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public String getStatLine() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return statLine;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 22
    }
  },
  {
    "path": "src/main/java/reposense/commits/model/CommitResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.commits.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * Stores the result from analyzing a {@code CommitInfo}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class CommitResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final Author author;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final String hash;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final Date time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final String message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final int insertions;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final int deletions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public CommitResult(Author author, String hash, Date time, String message, int insertions, int deletions) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.author \u003d author;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.hash \u003d hash;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.insertions \u003d insertions;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.deletions \u003d deletions;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public Author getAuthor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return author;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public String getHash() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return hash;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public Date getTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public int getInsertions() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return insertions;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public int getDeletions() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return deletions;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (!(other instanceof CommitResult)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        CommitResult otherCommitResult \u003d (CommitResult) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return author.equals(otherCommitResult.author)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                \u0026\u0026 hash.equals(otherCommitResult.hash)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                \u0026\u0026 time.equals(otherCommitResult.time)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                \u0026\u0026 message.equals(otherCommitResult.message)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                \u0026\u0026 insertions \u003d\u003d otherCommitResult.insertions"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                \u0026\u0026 deletions \u003d\u003d otherCommitResult.deletions;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 69
    }
  },
  {
    "path": "src/main/java/reposense/git/CommitNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * Signals that a expected commit cannot be found."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class CommitNotFoundException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public CommitNotFoundException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 11
    }
  },
  {
    "path": "src/main/java/reposense/git/GitBlame.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import static reposense.system.CommandRunner.runCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import static reposense.util.StringsUtil.addQuote;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.util.StringsUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * Contains git blame related functionalities."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * Git blame is responsible for showing which revision and author last modified each line of a file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class GitBlame {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final String COMMIT_HASH_REGEX \u003d \"(^[0-9a-f]{40} .*)\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final String AUTHOR_NAME_REGEX \u003d \"(^author .*)\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final String AUTHOR_EMAIL_REGEX \u003d \"(^author-mail .*)\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final String COMBINATION_REGEX \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            COMMIT_HASH_REGEX + \"|\" + AUTHOR_NAME_REGEX + \"|\" + AUTHOR_EMAIL_REGEX;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Returns the raw git blame result for the {@code fileDirectory}, performed at the {@code root} directory."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static String blame(String root, String fileDirectory) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Path rootPath \u003d Paths.get(root);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String blameCommand \u003d \"git blame -w --line-porcelain\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        blameCommand +\u003d \" \" + addQuote(fileDirectory);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return StringsUtil.filterText(runCommand(rootPath, blameCommand), COMBINATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 34
    }
  },
  {
    "path": "src/main/java/reposense/git/GitBranch.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import static reposense.system.CommandRunner.runCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.util.StringsUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * Contains git branch related functionalities."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * Git branch is responsible for list, create, or delete branches."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class GitBranch {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Returns the current working branch of the repository at {@code root}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static String getCurrentBranch(String root) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Path rootPath \u003d Paths.get(root);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String gitBranchCommand \u003d \"git branch\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return StringsUtil.filterText(runCommand(rootPath, gitBranchCommand), \"\\\\* (.*)\").split(\"\\\\*\")[1].trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 25
    }
  },
  {
    "path": "src/main/java/reposense/git/GitCheckout.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import static reposense.system.CommandRunner.runCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.commits.model.CommitResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * Contains git checkout related functionalities."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * Git branch is responsible for switch branches, revision or restore working tree files."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class GitCheckout {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(GitCheckout.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static void checkoutRecentBranch(String root) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        checkout(root, \"-\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static void checkoutBranch(String root, String branch) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        checkout(root, branch);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Checkouts to the hash revision given in the {@code commit}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static void checkoutCommit(String root, CommitResult commit) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        logger.info(\"Checking out \" + commit.getHash() + \"time:\" + commit.getTime());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        checkout(root, commit.getHash());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Checkouts to the given {@code hash} revision."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static void checkout(String root, String hash) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Path rootPath \u003d Paths.get(root);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        runCommand(rootPath, \"git checkout \" + hash);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Checks out to the latest commit before {@code untilDate} in {@code branchName} branch"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * if {@code untilDate} is not null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * @throws CommitNotFoundException if commits before {@code untilDate} cannot be found."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static void checkoutDate(String root, String branchName, Date untilDate) throws CommitNotFoundException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        if (untilDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String hash \u003d GitRevList.getCommitHashUntilDate(root, branchName, untilDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        if (hash.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            throw new CommitNotFoundException(\"Commit before until date is not found.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Path rootPath \u003d Paths.get(root);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String checkoutCommand \u003d \"git checkout \" + hash;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        runCommand(rootPath, checkoutCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 64
    }
  },
  {
    "path": "src/main/java/reposense/git/GitClone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import static reposense.system.CommandRunner.runCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import static reposense.util.StringsUtil.addQuote;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.util.FileUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * Contains git clone related functionalities."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * Git clone is responsible for cloning a local/remote repository into a new directory."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class GitClone {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(GitClone.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Clones repo specified in the {@code repoConfig} and updates it with the branch info."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static void clone(RepoConfiguration repoConfig)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            throws GitCloneException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            FileUtil.deleteDirectory(repoConfig.getRepoRoot());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            logger.info(\"Cloning from \" + repoConfig.getLocation() + \"...\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            clone(repoConfig.getLocation(), repoConfig.getRepoName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            logger.info(\"Cloning completed!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        } catch (RuntimeException rte) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            logger.log(Level.SEVERE, \"Error encountered in Git Cloning, will attempt to continue analyzing\", rte);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            throw new GitCloneException(rte);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            //Due to an unsolved bug on Windows Git, for some repository, Git Clone will return an error even"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            // though the repo is cloned properly."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            throw new GitCloneException(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            if (repoConfig.getBranch().equals(RepoConfiguration.DEFAULT_BRANCH)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                String currentBranch \u003d GitBranch.getCurrentBranch(repoConfig.getRepoRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                repoConfig.setBranch(currentBranch);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            GitCheckout.checkout(repoConfig.getRepoRoot(), repoConfig.getBranch());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        } catch (RuntimeException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            logger.log(Level.SEVERE, \"Branch does not exist! Analyze terminated.\", e);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            throw new GitCloneException(e);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void clone(RepoLocation location, String repoName) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Path rootPath \u003d Paths.get(FileUtil.REPOS_ADDRESS, repoName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Files.createDirectories(rootPath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        runCommand(rootPath, \"git clone \" + addQuote(location.toString()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 59,
      "-": 3
    }
  },
  {
    "path": "src/main/java/reposense/git/GitCloneException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class GitCloneException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public GitCloneException(Exception e) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        super(e.getMessage());"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 8
    }
  },
  {
    "path": "src/main/java/reposense/git/GitDiff.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import static reposense.system.CommandRunner.runCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * Contains git diff related functionalities."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * Git diff is responsible for obtaining the changes between commits, commit and working tree, etc."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class GitDiff {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Returns the git diff result of the current commit compared to {@code lastCommitHash}, without any context."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static String diffCommit(String root, String lastCommitHash) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Path rootPath \u003d Paths.get(root);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return runCommand(rootPath, \"git diff -U0 \" + lastCommitHash);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 21
    }
  },
  {
    "path": "src/main/java/reposense/git/GitLog.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import static reposense.system.CommandRunner.runCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * Contains git log related functionalities."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * Git log is responsible to obtain the commit logs and the authors\u0027 info."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class GitLog {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static String get(RepoConfiguration config, Author author) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Path rootPath \u003d Paths.get(config.getRepoRoot());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String command \u003d \"git log --no-merges -i \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        command +\u003d GitUtil.convertToGitDateRangeArgs(config.getSinceDate(), config.getUntilDate());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        command +\u003d \" --pretty\u003dformat:\\\"%H|%aN|%aE|%ad|%s\\\" --date\u003diso --shortstat\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        command +\u003d GitUtil.convertToFilterAuthorArgs(author);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        command +\u003d GitUtil.convertToGitFormatsArgs(config.getFormats());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        command +\u003d GitUtil.convertToGitExcludeGlobArgs(author.getIgnoreGlobList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return runCommand(rootPath, command);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 29
    }
  },
  {
    "path": "src/main/java/reposense/git/GitRevList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import static reposense.system.CommandRunner.runCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * Contains git rev list related functionalities."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * Git rev list is responsible for showing commit objects in reverse chronological order."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class GitRevList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final String REVISION_PATH_SEPARATOR \u003d \" -- \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Returns the latest commit hash before {@code date}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Returns an empty {@code String} if {@code date} is null, or there is no such commit."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static String getCommitHashBeforeDate(String root, String branchName, Date date) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Path rootPath \u003d Paths.get(root);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String revListCommand \u003d \"git rev-list -1 --before\u003d\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                + GitUtil.GIT_LOG_SINCE_DATE_FORMAT.format(date) + \" \" + branchName + REVISION_PATH_SEPARATOR;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return runCommand(rootPath, revListCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Returns the latest commit hash inclusive and until the end of the day of {@code date}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Returns an empty {@code String} if {@code date} is null, or there is no such commit."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static String getCommitHashUntilDate(String root, String branchName, Date date) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Path rootPath \u003d Paths.get(root);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String revListCommand \u003d \"git rev-list -1 --before\u003d\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                + GitUtil.GIT_LOG_UNTIL_DATE_FORMAT.format(date) + \" \" + branchName + REVISION_PATH_SEPARATOR;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return runCommand(rootPath, revListCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 46
    }
  },
  {
    "path": "src/main/java/reposense/git/GitShortlog.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import static reposense.system.CommandRunner.runCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * Contains git shortlog related functionalities."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * Git shortlog provides a summary of git log output."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class GitShortlog {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Extracts all the author identities from the repository and date range given in {@code config}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static List\u003cAuthor\u003e getAuthors(RepoConfiguration config) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String summary \u003d getShortlogSummary("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                config.getRepoRoot(), config.getSinceDate(), config.getUntilDate());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (summary.isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            return Collections.emptyList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String[] lines \u003d summary.split(\"\\n\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return Arrays.stream(lines)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                .map(line -\u003e new Author(line.split(\"\\t\")[1]))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static String getShortlogSummary(String root, Date sinceDate, Date untilDate) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Path rootPath \u003d Paths.get(root);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String command \u003d \"git log --pretty\u003dshort\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        command +\u003d GitUtil.convertToGitDateRangeArgs(sinceDate, untilDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        command +\u003d \" | git shortlog --summary\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return runCommand(rootPath, command);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 8,
      "eugenepeh": 39
    }
  },
  {
    "path": "src/main/java/reposense/git/GitUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import static reposense.util.StringsUtil.addQuote;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Format;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.util.StringsUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * Contains Git related utilities."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "class GitUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    static final DateFormat GIT_LOG_SINCE_DATE_FORMAT \u003d new SimpleDateFormat(\"yyyy-MM-dd\u0027T\u002700:00:00+08:00\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    static final DateFormat GIT_LOG_UNTIL_DATE_FORMAT \u003d new SimpleDateFormat(\"yyyy-MM-dd\u0027T\u002723:59:59+08:00\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    // ignore check against email"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final String AUTHOR_NAME_PATTERN \u003d \"^%s \u003c.*\u003e$\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    // ignore check against author name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final String AUTHOR_EMAIL_PATTERN \u003d \"^.* \u003c%s\u003e$\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final String OR_OPERATOR_PATTERN \u003d \"\\\\|\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Returns the {@code String} command to specify the date range of commits to analyze for `git` commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    static String convertToGitDateRangeArgs(Date sinceDate, Date untilDate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String gitDateRangeArgs \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        if (sinceDate !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            gitDateRangeArgs +\u003d \" --since\u003d\" + addQuote(GIT_LOG_SINCE_DATE_FORMAT.format(sinceDate));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        if (untilDate !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            gitDateRangeArgs +\u003d \" --until\u003d\" + addQuote(GIT_LOG_UNTIL_DATE_FORMAT.format(untilDate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return gitDateRangeArgs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Returns the {@code String} command to specify the authors to analyze for `git log` command."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    static String convertToFilterAuthorArgs(Author author) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        StringBuilder filterAuthorArgsBuilder \u003d new StringBuilder(\" --author\u003d\\\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        // git author names and emails may contain regex meta-characters, so we need to escape those"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        author.getAuthorAliases().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                .map(authorAlias -\u003e String.format(AUTHOR_NAME_PATTERN,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                        StringsUtil.replaceSpecialSymbols(authorAlias, \".\")) + OR_OPERATOR_PATTERN)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                .forEach(filterAuthorArgsBuilder::append);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        author.getEmails().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                .map(email -\u003e String.format(AUTHOR_EMAIL_PATTERN,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                        StringsUtil.replaceSpecialSymbols(email, \".\")) + OR_OPERATOR_PATTERN)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                .forEach(filterAuthorArgsBuilder::append);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        filterAuthorArgsBuilder.append("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                String.format(AUTHOR_NAME_PATTERN,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                        StringsUtil.replaceSpecialSymbols(author.getGitId(), \".\"))).append(\"\\\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return filterAuthorArgsBuilder.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Returns the {@code String} command to specify the file formats to analyze for `git` commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    static String convertToGitFormatsArgs(List\u003cFormat\u003e formats) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        StringBuilder gitFormatsArgsBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        final String cmdFormat \u003d \" -- \" + addQuote(\"*.%s\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        formats.stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(format -\u003e String.format(cmdFormat, format.toString()))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                .forEach(gitFormatsArgsBuilder::append);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return gitFormatsArgsBuilder.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Returns the {@code String} command to specify the globs to exclude for `git log` command."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    static String convertToGitExcludeGlobArgs(List\u003cString\u003e ignoreGlobList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        StringBuilder gitExcludeGlobArgsBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        final String cmdFormat \u003d \" \" + addQuote(\":(exclude)%s\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        ignoreGlobList.stream()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                .filter(item -\u003e !item.isEmpty())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                .map(ignoreGlob -\u003e String.format(cmdFormat, ignoreGlob))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                .forEach(gitExcludeGlobArgsBuilder::append);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return gitExcludeGlobArgsBuilder.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 90,
      "-": 3
    }
  },
  {
    "path": "src/main/java/reposense/model/Author.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.FileSystems;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.PathMatcher;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * Represents a Git Author."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Author {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final String UNKNOWN_AUTHOR_GIT_ID \u003d \"-\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final String STANDARD_GITHUB_EMAIL_DOMAIN \u003d \"@users.noreply.github.com\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final String MESSAGE_UNCOMMON_EMAIL_PATTERN \u003d \"The provided email, %s, uses uncommon pattern.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final String MESSAGE_UNCOMMON_GLOB_PATTERN \u003d \"The provided ignore glob, %s, uses uncommon pattern.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final String COMMON_EMAIL_REGEX \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            \"^([a-zA-Z0-9_\\\\-\\\\.\\\\+]+)@([a-zA-Z0-9_\\\\-\\\\.]+)\\\\.([a-zA-Z]{2,5})$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final String COMMON_GLOB_REGEX \u003d \"^[-a-zA-Z0-9 _/\\\\\\\\*!{}\\\\[\\\\]!(),:.]*$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static final Author UNKNOWN_AUTHOR \u003d new Author(UNKNOWN_AUTHOR_GIT_ID);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private final String gitId;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private transient List\u003cString\u003e emails;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private transient String displayName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private transient List\u003cString\u003e authorAliases;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private transient List\u003cString\u003e ignoreGlobList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private transient PathMatcher ignoreGlobMatcher;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public Author(String gitId) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.gitId \u003d gitId;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.emails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.displayName \u003d gitId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.authorAliases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.ignoreGlobList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        addStandardGitHubEmail(this.emails);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        updateIgnoreGlobMatcher();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public Author(StandaloneAuthor sa) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String gitId \u003d sa.getGithubId();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        List\u003cString\u003e emails \u003d new ArrayList\u003c\u003e(sa.getEmails());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String displayName \u003d !sa.getDisplayName().isEmpty() ? sa.getDisplayName() : sa.getGithubId();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        List\u003cString\u003e authorAliases \u003d sa.getAuthorNames();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        List\u003cString\u003e ignoreGlobList \u003d sa.getIgnoreGlobList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.gitId \u003d gitId;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.displayName \u003d displayName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.authorAliases \u003d authorAliases;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        setEmails(emails);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        setIgnoreGlobList(ignoreGlobList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public Author(Author another) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.gitId \u003d another.gitId;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.emails \u003d another.emails;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.displayName \u003d another.gitId;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.authorAliases \u003d another.authorAliases;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.ignoreGlobList \u003d another.authorAliases;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.ignoreGlobMatcher \u003d another.ignoreGlobMatcher;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Checks that all the strings in the {@code emails} only contains commonly used email patterns."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * @throws IllegalArgumentException if any of the values do not meet the criteria."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static void validateEmails(List\u003cString\u003e emails) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        for (String email : emails) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            if (!email.matches(COMMON_EMAIL_REGEX)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                throw new IllegalArgumentException(String.format(MESSAGE_UNCOMMON_EMAIL_PATTERN, email));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Checks that all the strings in the {@code ignoreGlobList} only contains commonly used glob patterns."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * @throws IllegalArgumentException if any of the values do not meet the criteria."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static void validateIgnoreGlobs(List\u003cString\u003e ignoreGlobList) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        for (String glob : ignoreGlobList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            if (!glob.matches(COMMON_GLOB_REGEX)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                throw new IllegalArgumentException(String.format(MESSAGE_UNCOMMON_GLOB_PATTERN, glob));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public String getGitId() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return gitId;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public List\u003cString\u003e getEmails() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return emails;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void setEmails(List\u003cString\u003e emails) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        validateEmails(emails);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.emails \u003d new ArrayList\u003c\u003e(emails);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        addStandardGitHubEmail(this.emails);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public String getDisplayName() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return displayName;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDisplayName(String displayName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.displayName \u003d displayName;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public List\u003cString\u003e getAuthorAliases() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return authorAliases;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void setAuthorAliases(List\u003cString\u003e authorAliases) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.authorAliases \u003d authorAliases;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public List\u003cString\u003e getIgnoreGlobList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return ignoreGlobList;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void setIgnoreGlobList(List\u003cString\u003e ignoreGlobList) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        validateIgnoreGlobs(ignoreGlobList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.ignoreGlobList \u003d new ArrayList\u003c\u003e(ignoreGlobList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        updateIgnoreGlobMatcher();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public PathMatcher getIgnoreGlobMatcher() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return ignoreGlobMatcher;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void appendIgnoreGlobList(List\u003cString\u003e ignoreGlobList) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        validateIgnoreGlobs(ignoreGlobList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.ignoreGlobList.addAll(ignoreGlobList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        updateIgnoreGlobMatcher();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        // instanceof handles null"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (!(other instanceof Author)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Author otherAuthor \u003d (Author) other;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return this.gitId.equalsIgnoreCase(otherAuthor.gitId);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return gitId !\u003d null ? gitId.toLowerCase().hashCode() : 0;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return gitId;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Updates the {@code PathMatcher} to the new ignore glob list set."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Called after a new ignore glob list is set."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private void updateIgnoreGlobMatcher() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        String globString \u003d \"glob:{\" + String.join(\",\", ignoreGlobList) + \"}\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        ignoreGlobMatcher \u003d FileSystems.getDefault().getPathMatcher(globString);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Adds the standard github email to {@code emails} if doesn\u0027t exist."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private void addStandardGitHubEmail(List\u003cString\u003e emails) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String standardGitHubEmail \u003d getGitId() + STANDARD_GITHUB_EMAIL_DOMAIN;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        if (!emails.contains(standardGitHubEmail)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            emails.add(standardGitHubEmail);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yamidark": 48,
      "yong24s": 12,
      "eugenepeh": 98,
      "-": 27
    }
  },
  {
    "path": "src/main/java/reposense/model/CliArguments.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yong24s"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yong24s"
        },
        "content": " * Represents command line arguments user supplied when running the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yong24s"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yong24s"
        },
        "content": "public abstract class CliArguments {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected Path outputFilePath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected Optional\u003cDate\u003e sinceDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected Optional\u003cDate\u003e untilDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    protected List\u003cFormat\u003e formats;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    protected boolean isAutomaticallyLaunching;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public Path getOutputFilePath() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return outputFilePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public Optional\u003cDate\u003e getSinceDate() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return sinceDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public Optional\u003cDate\u003e getUntilDate() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return untilDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFormat\u003e getFormats() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return formats;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAutomaticallyLaunching() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return isAutomaticallyLaunching;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        // instanceof handles null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (!(other instanceof CliArguments)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments otherCliArguments \u003d (CliArguments) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return this.outputFilePath.equals(otherCliArguments.outputFilePath)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                \u0026\u0026 this.sinceDate.equals(otherCliArguments.sinceDate)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                \u0026\u0026 this.untilDate.equals(otherCliArguments.untilDate)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.formats.equals(otherCliArguments.formats)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.isAutomaticallyLaunching \u003d\u003d otherCliArguments.isAutomaticallyLaunching;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yong24s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 2,
      "yong24s": 47,
      "-": 9
    }
  },
  {
    "path": "src/main/java/reposense/model/ConfigCliArguments.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yong24s"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.parser.AuthorConfigCsvParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.parser.RepoConfigCsvParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yong24s"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yong24s"
        },
        "content": " * Represents command line arguments user supplied when running the program with mandatory field -config."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yong24s"
        },
        "content": "public class ConfigCliArguments extends CliArguments {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configFolderPath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private Path repoConfigFilePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private Path authorConfigFilePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ConfigCliArguments(Path configFolderPath, Path outputFilePath, Optional\u003cDate\u003e sinceDate,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cDate\u003e untilDate, List\u003cFormat\u003e formats, boolean isAutomaticallyLaunching) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configFolderPath \u003d configFolderPath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.repoConfigFilePath \u003d configFolderPath.resolve(RepoConfigCsvParser.REPO_CONFIG_FILENAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.authorConfigFilePath \u003d configFolderPath.resolve(AuthorConfigCsvParser.AUTHOR_CONFIG_FILENAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.outputFilePath \u003d outputFilePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.sinceDate \u003d sinceDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.untilDate \u003d untilDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.formats \u003d formats;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isAutomaticallyLaunching \u003d isAutomaticallyLaunching;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigFolderPath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFolderPath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public Path getRepoConfigFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return repoConfigFilePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public Path getAuthorConfigFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return authorConfigFilePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        // instanceof handles null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (!(other instanceof ConfigCliArguments)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        ConfigCliArguments otherConfigCliArguments \u003d (ConfigCliArguments) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return super.equals(other)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                \u0026\u0026 this.repoConfigFilePath.equals(otherConfigCliArguments.repoConfigFilePath)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                \u0026\u0026 this.authorConfigFilePath.equals(otherConfigCliArguments.authorConfigFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yong24s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yong24s": 51,
      "-": 9
    }
  },
  {
    "path": "src/main/java/reposense/model/LocationsCliArguments.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yong24s"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yong24s"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yong24s"
        },
        "content": " * Represents command line arguments user supplied when running the program with mandatory field -repos."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yong24s"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yong24s"
        },
        "content": "public class LocationsCliArguments extends CliArguments {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private List\u003cString\u003e locations;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isStandaloneConfigIgnored;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocationsCliArguments(List\u003cString\u003e locations, Path outputFilePath, Optional\u003cDate\u003e sinceDate,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cDate\u003e untilDate, List\u003cFormat\u003e formats, boolean isAutomaticallyLaunching,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isStandaloneConfigIgnored) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.locations \u003d locations;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.outputFilePath \u003d outputFilePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.sinceDate \u003d sinceDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.untilDate \u003d untilDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.formats \u003d formats;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isAutomaticallyLaunching \u003d isAutomaticallyLaunching;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isStandaloneConfigIgnored \u003d isStandaloneConfigIgnored;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public List\u003cString\u003e getLocations() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return locations;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isStandaloneConfigIgnored() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return isStandaloneConfigIgnored;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        // instanceof handles null"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (!(other instanceof LocationsCliArguments)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        LocationsCliArguments otherLocationsCliArguments \u003d (LocationsCliArguments) other;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return super.equals(other)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.locations.equals(otherLocationsCliArguments.locations)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.isStandaloneConfigIgnored \u003d\u003d otherLocationsCliArguments.isStandaloneConfigIgnored;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yong24s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yong24s": 40,
      "-": 12
    }
  },
  {
    "path": "src/main/java/reposense/model/RepoConfiguration.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.util.FileUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class RepoConfiguration {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_BRANCH \u003d \"HEAD\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(RepoConfiguration.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private RepoLocation location;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private String branch;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private String displayName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private Date sinceDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private Date untilDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private transient boolean needCheckStyle \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private transient boolean annotationOverwrite \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient List\u003cFormat\u003e formats;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private transient int commitNum \u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private transient List\u003cString\u003e ignoreGlobList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private transient List\u003cAuthor\u003e authorList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private transient TreeMap\u003cString, Author\u003e authorEmailsAndAliasesMap \u003d new TreeMap\u003c\u003e(String.CASE_INSENSITIVE_ORDER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private transient Map\u003cAuthor, String\u003e authorDisplayNameMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private transient boolean isStandaloneConfigIgnored;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private transient List\u003cCommitHash\u003e ignoreCommitList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public RepoConfiguration(RepoLocation location) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this(location, DEFAULT_BRANCH);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public RepoConfiguration(RepoLocation location, String branch) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this(location, branch, Collections.emptyList(), Collections.emptyList(), false, Collections.emptyList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public RepoConfiguration(RepoLocation location, String branch, List\u003cFormat\u003e formats, List\u003cString\u003e ignoreGlobList,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isStandaloneConfigIgnored, List\u003cCommitHash\u003e ignoreCommitList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.branch \u003d location.isEmpty() ? DEFAULT_BRANCH : branch;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.ignoreGlobList \u003d ignoreGlobList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.isStandaloneConfigIgnored \u003d isStandaloneConfigIgnored;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.formats \u003d formats;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.ignoreCommitList \u003d ignoreCommitList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String organization \u003d location.getOrganization();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String repoName \u003d location.getRepoName();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (organization !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            displayName \u003d organization + \"_\" + repoName + \"_\" + branch;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            displayName \u003d repoName + \"_\" + branch;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public static void setDatesToRepoConfigs("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            List\u003cRepoConfiguration\u003e configs, Optional\u003cDate\u003e sinceDate, Optional\u003cDate\u003e untilDate) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        for (RepoConfiguration config : configs) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            config.setSinceDate(sinceDate.orElse(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            config.setUntilDate(untilDate.orElse(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Merges a {@code RepoConfiguration} from {@code repoConfigs} with another from {@code authorConfigs}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * if {@code location} and {@code branch} matches."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public static void merge(List\u003cRepoConfiguration\u003e repoConfigs, List\u003cRepoConfiguration\u003e authorConfigs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        for (RepoConfiguration authorConfig : authorConfigs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (authorConfig.location.isEmpty()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                for (RepoConfiguration repoConfig : repoConfigs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                    repoConfig.addAuthors(authorConfig.getAuthorList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            int index \u003d repoConfigs.indexOf(authorConfig);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                logger.warning(String.format("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                        \"Repository %s is not found in repo-config.csv.\", authorConfig.getLocation()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            RepoConfiguration repoConfig \u003d repoConfigs.get(index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            repoConfig.addAuthors(authorConfig.getAuthorList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Sets {@code formats} to {@code RepoConfiguration} in {@code configs} if its format list is empty."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setFormatsToRepoConfigs(List\u003cRepoConfiguration\u003e configs, List\u003cFormat\u003e formats) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        configs.stream().filter(config -\u003e config.getFormats().isEmpty())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                        .forEach(config -\u003e config.setFormats(formats));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code isStandaloneConfigIgnored} to all {@code RepoConfiguration} in {@code configs}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setStandaloneConfigIgnoredToRepoConfigs("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cRepoConfiguration\u003e configs, boolean isStandaloneConfigIgnored) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        configs.stream().forEach(config -\u003e config.setStandaloneConfigIgnored(isStandaloneConfigIgnored));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears authors information and use the information provided from {@code standaloneConfig}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void update(StandaloneConfig standaloneConfig) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        List\u003cAuthor\u003e newAuthorList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        TreeMap\u003cString, Author\u003e newAuthorEmailsAndAliasesMap \u003d new TreeMap\u003c\u003e(String.CASE_INSENSITIVE_ORDER);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Map\u003cAuthor, String\u003e newAuthorDisplayNameMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        List\u003cString\u003e newIgnoreGlobList \u003d standaloneConfig.getIgnoreGlobList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        for (StandaloneAuthor sa : standaloneConfig.getAuthors()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            Author author \u003d new Author(sa);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            author.appendIgnoreGlobList(newIgnoreGlobList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            newAuthorList.add(author);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            newAuthorDisplayNameMap.put(author, author.getDisplayName());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            List\u003cString\u003e aliases \u003d new ArrayList\u003c\u003e(author.getAuthorAliases());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            List\u003cString\u003e emails \u003d new ArrayList\u003c\u003e(author.getEmails());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            aliases.add(author.getGitId());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            aliases.forEach(alias -\u003e newAuthorEmailsAndAliasesMap.put(alias, author));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            emails.forEach(email -\u003e newAuthorEmailsAndAliasesMap.put(email, author));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Format.validateFormats(standaloneConfig.getFormats());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        CommitHash.validateCommits(standaloneConfig.getIgnoreCommitList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        // only assign the new values when all the fields in {@code standaloneConfig} pass the validations."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        authorList \u003d newAuthorList;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        authorEmailsAndAliasesMap \u003d newAuthorEmailsAndAliasesMap;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        authorDisplayNameMap \u003d newAuthorDisplayNameMap;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        ignoreGlobList \u003d newIgnoreGlobList;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        formats \u003d Format.convertStringsToFormats(standaloneConfig.getFormats());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        ignoreCommitList \u003d CommitHash.convertStringsToCommits(standaloneConfig.getIgnoreCommitList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public String getRepoRoot() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String path \u003d FileUtil.REPOS_ADDRESS + File.separator + getRepoName() + File.separator;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!getRepoName().isEmpty()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            path +\u003d getRepoName() + File.separator;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return path;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (!(other instanceof RepoConfiguration)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return hashCode() \u003d\u003d ((RepoConfiguration) other).hashCode();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return Objects.hash(location, branch);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public Map\u003cAuthor, String\u003e getAuthorDisplayNameMap() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return authorDisplayNameMap;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAuthorDisplayNameMap(Map\u003cAuthor, String\u003e authorDisplayNameMap) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        this.authorDisplayNameMap \u003d authorDisplayNameMap;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getCommitNum() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        return commitNum;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setCommitNum(int commitNum) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commitNum \u003d commitNum;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isNeedCheckStyle() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return needCheckStyle;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setNeedCheckStyle(boolean needCheckStyle) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        this.needCheckStyle \u003d needCheckStyle;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getBranch() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        return branch;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setBranch(String branch) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        updateDisplayName(branch);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        this.branch \u003d branch;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateDisplayName(String branch) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        this.displayName \u003d displayName.substring(0, displayName.lastIndexOf(\u0027_\u0027) + 1) + branch;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnnotationOverwrite() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        return annotationOverwrite;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAnnotationOverwrite(boolean annotationOverwrite) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        this.annotationOverwrite \u003d annotationOverwrite;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public List\u003cString\u003e getIgnoreGlobList() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return ignoreGlobList;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void setIgnoreGlobList(List\u003cString\u003e ignoreGlobList) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.ignoreGlobList \u003d ignoreGlobList;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cCommitHash\u003e getIgnoreCommitList() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return ignoreCommitList;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setIgnoreCommitList(List\u003cCommitHash\u003e ignoreCommitList) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        this.ignoreCommitList \u003d ignoreCommitList;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cAuthor\u003e getAuthorList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        return authorList;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the details of {@code author} to {@code RepoConfiguration} including the default alias, alias"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * and display name."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAuthorDetails(Author author) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        // Set GitHub Id and its corresponding email as default"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        addAuthorEmailsAndAliasesMapEntry(author, Arrays.asList(author.getGitId()));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        addAuthorEmailsAndAliasesMapEntry(author, author.getAuthorAliases());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        addAuthorEmailsAndAliasesMapEntry(author, author.getEmails());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        setAuthorDisplayName(author, author.getDisplayName());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Propagate the {@code IgnoreGlobList} of {@code RepoConfiguration} to {@code author}."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    private void propagateIgnoreGlobList(Author author) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        author.appendIgnoreGlobList(this.getIgnoreGlobList());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void addAuthor(Author author) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        authorList.add(author);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        setAuthorDetails(author);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        propagateIgnoreGlobList(author);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addAuthors(List\u003cAuthor\u003e authorList) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Author author : authorList) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            if (containsAuthor(author)) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.warning(String.format("
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Skipping author as %s already in repository %s\", author.getGitId(), getDisplayName()));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            addAuthor(author);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public boolean containsAuthor(Author author) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return authorList.contains(author);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Clears authors information and sets the {@code authorList} to {@code RepoConfiguration}."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAuthorList(List\u003cAuthor\u003e authorList) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        this.authorList \u003d authorList;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        authorEmailsAndAliasesMap.clear();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        authorDisplayNameMap.clear();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        authorList.forEach(author -\u003e {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            setAuthorDetails(author);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            propagateIgnoreGlobList(author);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        });"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public TreeMap\u003cString, Author\u003e getAuthorEmailsAndAliasesMap() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return authorEmailsAndAliasesMap;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void setAuthorEmailsAndAliasesMap(TreeMap\u003cString, Author\u003e authorEmailsAndAliasesMap) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        this.authorEmailsAndAliasesMap \u003d authorEmailsAndAliasesMap;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public Date getSinceDate() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return sinceDate;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void setSinceDate(Date sinceDate) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.sinceDate \u003d sinceDate;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public Date getUntilDate() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return untilDate;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void setUntilDate(Date untilDate) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.untilDate \u003d untilDate;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cFormat\u003e getFormats() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return formats;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFormats(List\u003cFormat\u003e formats) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.formats \u003d formats;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void setAuthorDisplayName(Author author, String displayName) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        authorDisplayNameMap.put(author, displayName);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void addAuthorEmailsAndAliasesMapEntry(Author author, List\u003cString\u003e values) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        values.forEach(value -\u003e authorEmailsAndAliasesMap.put(value, author));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public String getDisplayName() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return displayName;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public String getRepoName() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        return location.getRepoName();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setStandaloneConfigIgnored(boolean isStandaloneConfigIgnored) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isStandaloneConfigIgnored \u003d isStandaloneConfigIgnored;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    public RepoLocation getLocation() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getOrganization() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        return location.getOrganization();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isStandaloneConfigIgnored() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        return isStandaloneConfigIgnored;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 24,
      "yong24s": 117,
      "eugenepeh": 46,
      "-": 178
    }
  },
  {
    "path": "src/main/java/reposense/model/StandaloneAuthor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an author in {@code StandaloneConfig}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class StandaloneAuthor {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private String githubId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private List\u003cString\u003e emails;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String displayName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private List\u003cString\u003e authorNames;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private List\u003cString\u003e ignoreGlobList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getGithubId() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return githubId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public List\u003cString\u003e getEmails() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        if (emails \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            return Collections.emptyList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return emails;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDisplayName() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (displayName \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return displayName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public List\u003cString\u003e getAuthorNames() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (authorNames \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return Collections.emptyList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return authorNames;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public List\u003cString\u003e getIgnoreGlobList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (ignoreGlobList \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return Collections.emptyList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return ignoreGlobList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (!(other instanceof StandaloneAuthor)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        StandaloneAuthor otherStandaloneAuthor \u003d (StandaloneAuthor) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return githubId.equals(otherStandaloneAuthor.githubId)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                \u0026\u0026 getEmails().equals(otherStandaloneAuthor.getEmails())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                \u0026\u0026 getDisplayName().equals(otherStandaloneAuthor.getDisplayName())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                \u0026\u0026 getAuthorNames().equals(otherStandaloneAuthor.getAuthorNames())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                \u0026\u0026 getIgnoreGlobList().equals(otherStandaloneAuthor.getIgnoreGlobList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yong24s": 30,
      "yamidark": 6,
      "eugenepeh": 10,
      "-": 23
    }
  },
  {
    "path": "src/main/java/reposense/model/StandaloneConfig.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the structure of a config.json in _reposense folder."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StandaloneConfig {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cStandaloneAuthor\u003e authors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private List\u003cString\u003e ignoreGlobList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private List\u003cString\u003e formats;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private List\u003cString\u003e ignoreCommitList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cStandaloneAuthor\u003e getAuthors() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (authors \u003d\u003d null) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return Collections.emptyList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        authors.removeIf(Objects::isNull);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return authors;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public List\u003cString\u003e getIgnoreGlobList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (ignoreGlobList \u003d\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return Collections.emptyList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        ignoreGlobList.removeIf(Objects::isNull);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return ignoreGlobList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public List\u003cString\u003e getFormats() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (formats \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return Format.DEFAULT_FORMAT_STRINGS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        formats.removeIf(Objects::isNull);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return formats;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public List\u003cString\u003e getIgnoreCommitList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (ignoreCommitList \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            return Collections.emptyList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        ignoreCommitList.removeIf(Objects::isNull);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return ignoreCommitList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (!(other instanceof StandaloneConfig)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        StandaloneConfig otherStandaloneConfig \u003d (StandaloneConfig) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return authors.equals(otherStandaloneConfig.authors)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                \u0026\u0026 getIgnoreGlobList().equals(otherStandaloneConfig.getIgnoreGlobList())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                \u0026\u0026 getFormats().equals(otherStandaloneConfig.getFormats())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                \u0026\u0026 getIgnoreCommitList().equals(otherStandaloneConfig.getIgnoreCommitList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yong24s": 44,
      "yamidark": 9,
      "-": 15
    }
  },
  {
    "path": "src/main/java/reposense/model/ViewCliArguments.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yong24s"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": " * Represents command line arguments user supplied when running the program with mandatory field -view."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yong24s"
        },
        "content": "public class ViewCliArguments extends CliArguments {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private Path reportDirectoryPath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public ViewCliArguments(Path reportDirectoryPath) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.reportDirectoryPath \u003d reportDirectoryPath;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public Path getReportDirectoryPath() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return reportDirectoryPath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        // instanceof handles null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (!(other instanceof ViewCliArguments)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        ViewCliArguments otherViewCliArguments \u003d (ViewCliArguments) other;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return super.equals(other)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                \u0026\u0026 this.reportDirectoryPath.equals(otherViewCliArguments.reportDirectoryPath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yong24s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yong24s": 35
    }
  },
  {
    "path": "src/main/java/reposense/parser/AlphanumericArgumentType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yong24s"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.Argument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yong24s"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yong24s"
        },
        "content": " * Represents an alphanumeric type String argument."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yong24s"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "public class AlphanumericArgumentType implements ArgumentType\u003cString\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final String PARSE_EXCEPTION_MESSAGE_NOT_IN_ALPLANUMERIC \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            \"Invalid format. It must be in alphanumeric.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Pattern ALPHANUMERIC_PATTERN \u003d Pattern.compile(\"[A-Za-z0-9]+\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public String convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (!ALPHANUMERIC_PATTERN.matcher(value).matches()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            throw new ArgumentParserException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                    String.format(PARSE_EXCEPTION_MESSAGE_NOT_IN_ALPLANUMERIC, value), parser);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yong24s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yong24s": 27
    }
  },
  {
    "path": "src/main/java/reposense/parser/ArgsParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yong24s"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.ArgumentParsers;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import net.sourceforge.argparse4j.impl.Arguments;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.impl.action.HelpArgumentAction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentParserException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import net.sourceforge.argparse4j.inf.MutuallyExclusiveGroup;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.Namespace;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.CliArguments;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.ConfigCliArguments;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Format;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.LocationsCliArguments;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.ViewCliArguments;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yong24s"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yong24s"
        },
        "content": " * Verifies and parses a string-formatted date to a {@code CliArguments} object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yong24s"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yong24s"
        },
        "content": "public class ArgsParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public static final String DEFAULT_REPORT_NAME \u003d \"reposense-report\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final String PROGRAM_USAGE \u003d \"java -jar RepoSense.jar\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final String PROGRAM_DESCRIPTION \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            \"RepoSense is a contribution analysis tool for Git repositories.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final String MESSAGE_SINCE_DATE_LATER_THAN_UNTIL_DATE \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            \"\\\"Since Date\\\" cannot be later than \\\"Until Date\\\"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_PATH \u003d Paths.get(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static ArgumentParser getArgumentParser() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        ArgumentParser parser \u003d ArgumentParsers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .newFor(PROGRAM_USAGE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .addHelp(false)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .build()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .description(PROGRAM_DESCRIPTION);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        MutuallyExclusiveGroup mutexParser \u003d parser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                .addMutuallyExclusiveGroup(PROGRAM_USAGE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .required(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        parser.addArgument(\"-h\", \"--help\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .help(\"Show help message.\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .action(new HelpArgumentAction());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        mutexParser.addArgument(\"-config\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .type(new ConfigFolderArgumentType())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .metavar(\"PATH\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .setDefault(EMPTY_PATH.toAbsolutePath())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .help(\"The directory containing the config files.\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"If not provided, the config files will be obtained from the current working directory.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        mutexParser.addArgument(\"-repo\", \"-repos\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .nargs(\"+\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .dest(\"repos\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .metavar(\"LOCATION\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .help(\"The GitHub URL or disk locations to clone repository.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.addArgument(\"-view\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .nargs(\"?\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                .metavar(\"PATH\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .type(new ReportFolderArgumentType())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .setConst(EMPTY_PATH)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .help(\"Starts a server to display the dashboard in the provided directory.\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"If used as a flag (with no argument), \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                        + \"generates a report and automatically displays the dashboard.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        parser.addArgument(\"-output\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .metavar(\"PATH\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .type(new OutputFolderArgumentType())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .setDefault(Paths.get(ArgsParser.DEFAULT_REPORT_NAME))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .help(\"The directory to output the report folder, reposense-report. \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                        + \"If not provided, the report folder will be created in the current working directory.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        parser.addArgument(\"-since\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .metavar(\"dd/MM/yyyy\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .type(new DateArgumentType())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .setDefault(Optional.empty())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .help(\"The date to start filtering.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        parser.addArgument(\"-until\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .metavar(\"dd/MM/yyyy\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .type(new DateArgumentType())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .setDefault(Optional.empty())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .help(\"The date to stop filtering.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        parser.addArgument(\"-formats\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .nargs(\"*\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .metavar(\"FORMAT\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .type(new AlphanumericArgumentType())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .setDefault(Format.DEFAULT_FORMAT_STRINGS)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .help(\"The alphanumeric file formats to process.\\n\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                        + \"If not provided, default file formats will be used.\\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                        + \"Please refer to userguide for more information.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.addArgument(\"--ignore-standalone-config\", \"-isac\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .action(Arguments.storeTrue())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .help(\"A flag to ignore the standalone config file in the repo.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return parser;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Parses the given string arguments to a {@code CliArguments} object."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * @throws ParseException if the given string arguments fails to parse to a {@code CliArguments} object."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public static CliArguments parse(String[] args) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            ArgumentParser parser \u003d getArgumentParser();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            Namespace results \u003d parser.parseArgs(args);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            Path configFolderPath \u003d results.get(\"config\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            Path reportFolderPath \u003d results.get(\"view\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            Path outputFolderPath \u003d results.get(\"output\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            Optional\u003cDate\u003e sinceDate \u003d results.get(\"since\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            Optional\u003cDate\u003e untilDate \u003d results.get(\"until\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            List\u003cString\u003e locations \u003d results.get(\"repos\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cFormat\u003e formats \u003d Format.convertStringsToFormats(results.get(\"formats\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isStandaloneConfigIgnored \u003d results.get(\"ignore_standalone_config\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            verifyDatesRangeIsCorrect(sinceDate, untilDate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            if (reportFolderPath !\u003d null \u0026\u0026 !reportFolderPath.equals(EMPTY_PATH)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ViewCliArguments(reportFolderPath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            boolean isAutomaticallyLaunching \u003d reportFolderPath !\u003d null;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            if (locations !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                return new LocationsCliArguments(locations, outputFolderPath, sinceDate, untilDate, formats,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                        isAutomaticallyLaunching, isStandaloneConfigIgnored);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ConfigCliArguments("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                    configFolderPath, outputFolderPath, sinceDate, untilDate, formats, isAutomaticallyLaunching);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        } catch (ArgumentParserException ape) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            throw new ParseException(getArgumentParser().formatUsage() + ape.getMessage() + \"\\n\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Verifies that {@code sinceDate} is earlier than {@code untilDate}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * @throws ParseException if {@code sinceDate} supplied is later than {@code untilDate}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static void verifyDatesRangeIsCorrect(Optional\u003cDate\u003e sinceDate, Optional\u003cDate\u003e untilDate)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (sinceDate.isPresent() \u0026\u0026 untilDate.isPresent() \u0026\u0026 sinceDate.get().getTime() \u003e untilDate.get().getTime()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            throw new ParseException(MESSAGE_SINCE_DATE_LATER_THAN_UNTIL_DATE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yong24s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdityaA1998": 7,
      "yong24s": 117,
      "yamidark": 3,
      "-": 29
    }
  },
  {
    "path": "src/main/java/reposense/parser/AuthorConfigCsvParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yong24s"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "public class AuthorConfigCsvParser extends CsvParser\u003cRepoConfiguration\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public static final String AUTHOR_CONFIG_FILENAME \u003d \"author-config.csv\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Positions of the elements of a line in author-config.csv config file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final int LOCATION_POSITION \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final int BRANCH_POSITION \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final int GITHUB_ID_POSITION \u003d 2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final int EMAIL_POSITION \u003d 3;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final int DISPLAY_NAME_POSITION \u003d 4;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final int ALIAS_POSITION \u003d 5;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final int IGNORE_GLOB_LIST_POSITION \u003d 6;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public AuthorConfigCsvParser(Path csvFilePath) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        super(csvFilePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Gets the list of positions that are mandatory for verification."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected int[] mandatoryPositions() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return new int[] {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            GITHUB_ID_POSITION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Processes the csv file line by line and add created {@code RepoConfiguration} into {@code results} but"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * skips {@code author} already exists in a {@code RepoConfiguration} that has same {@code location} and"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * {@code branch}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected void processLine(List\u003cRepoConfiguration\u003e results, String[] elements)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String location \u003d getValueInElement(elements, LOCATION_POSITION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String branch \u003d getValueInElement(elements, BRANCH_POSITION, RepoConfiguration.DEFAULT_BRANCH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String gitHubId \u003d getValueInElement(elements, GITHUB_ID_POSITION);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        List\u003cString\u003e emails \u003d getManyValueInElement(elements, EMAIL_POSITION);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String displayName \u003d getValueInElement(elements, DISPLAY_NAME_POSITION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cString\u003e aliases \u003d getManyValueInElement(elements, ALIAS_POSITION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cString\u003e ignoreGlobList \u003d getManyValueInElement(elements, IGNORE_GLOB_LIST_POSITION);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        RepoConfiguration config \u003d getRepoConfiguration(results, location, branch);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Author author \u003d new Author(gitHubId);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (config.containsAuthor(author)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            logger.warning(String.format("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                    \"Skipping author as %s already in repository %s\", author.getGitId(), config.getDisplayName()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        config.addAuthor(author);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        setEmails(config, author, emails);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        setDisplayName(config, author, displayName);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        setAliases(config, author, gitHubId, aliases);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        setAuthorIgnoreGlobList(author, ignoreGlobList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Gets an existing {@code RepoConfiguration} from {@code results} if {@code location} and {@code branch} matches."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Otherwise adds a newly created {@code RepoConfigurtion} into {@code results} and returns it."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * @throws InvalidLocationException if {@code location} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static RepoConfiguration getRepoConfiguration("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            List\u003cRepoConfiguration\u003e results, String location, String branch) throws InvalidLocationException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration config \u003d new RepoConfiguration(new RepoLocation(location), branch);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        int index \u003d results.indexOf(config);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (index !\u003d -1) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            config \u003d results.get(index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            results.add(config);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Associates {@code emails} to {@code author}, if provided and not empty."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static void setEmails(RepoConfiguration config, Author author, List\u003cString\u003e emails) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        author.setEmails(new ArrayList\u003c\u003e(emails));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.addAuthorEmailsAndAliasesMapEntry(author, author.getEmails());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Associates {@code displayName} to {@code author}, if provided and not empty."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Otherwise, use github id from {@code author}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static void setDisplayName(RepoConfiguration config, Author author, String displayName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        author.setDisplayName(!displayName.isEmpty() ? displayName : author.getGitId());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        config.setAuthorDisplayName(author, !displayName.isEmpty() ? displayName : author.getGitId());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Associates {@code gitHubId} and additional {@code aliases} to {@code author}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static void setAliases(RepoConfiguration config, Author author, String gitHubId, List\u003cString\u003e aliases) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.addAuthorEmailsAndAliasesMapEntry(author, Arrays.asList(gitHubId));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (aliases.isEmpty()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.addAuthorEmailsAndAliasesMapEntry(author, aliases);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        author.setAuthorAliases(aliases);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Sets the list of globs to ignore for the {@code author} for file analysis."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static void setAuthorIgnoreGlobList(Author author, List\u003cString\u003e ignoreGlobList) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (ignoreGlobList.isEmpty()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        author.setIgnoreGlobList(ignoreGlobList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yong24s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yong24s": 115,
      "eugenepeh": 17,
      "-": 4
    }
  },
  {
    "path": "src/main/java/reposense/parser/ConfigFolderArgumentType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yong24s"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.impl.Arguments;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.Argument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentParserException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "public class ConfigFolderArgumentType implements ArgumentType\u003cPath\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final String PARSE_EXCEPTION_MESSAGE_MISSING_REQUIRED_CONFIG_FILES \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            \"The required config file %s is not found in the specified folder.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public Path convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        // Piggyback on library methods to do file existence checks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Arguments.fileType().verifyExists().verifyIsDirectory().verifyCanRead().convert(parser, arg, value);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (Files.exists(Paths.get(value).resolve(RepoConfigCsvParser.REPO_CONFIG_FILENAME))) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return Paths.get(value);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        throw new ArgumentParserException(String.format(PARSE_EXCEPTION_MESSAGE_MISSING_REQUIRED_CONFIG_FILES,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                RepoConfigCsvParser.REPO_CONFIG_FILENAME), parser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yong24s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yong24s": 29
    }
  },
  {
    "path": "src/main/java/reposense/parser/CsvParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yong24s"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yong24s"
        },
        "content": "public abstract class CsvParser\u003cT\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected static final String COLUMN_VALUES_SEPARATOR \u003d \";\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected static final Logger logger \u003d LogsManager.getLogger(CsvParser.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final String ELEMENT_SEPARATOR \u003d \",\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final String MESSAGE_UNABLE_TO_READ_CSV_FILE \u003d \"Unable to read the supplied CSV file.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final String MESSAGE_MALFORMED_LINE_FORMAT \u003d \"Warning! line %d in configuration file is malformed.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            + \"Contents: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private Path csvFilePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * @throws IOException if {@code csvFilePath} is an invalid path."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public CsvParser(Path csvFilePath) throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (csvFilePath \u003d\u003d null || !Files.exists(csvFilePath)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"Csv file does not exists in given path.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Use \u0027-help\u0027 to list all the available subcommands and some concept guides.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        this.csvFilePath \u003d csvFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * @throws IOException if there are error accessing the given csv file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public List\u003cT\u003e parse() throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cT\u003e results \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        int lineNumber \u003d 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        try (BufferedReader br \u003d new BufferedReader(new FileReader(csvFilePath.toFile()))) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            // Skip first line, which is the header row"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            br.readLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            String line;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                String[] elements \u003d line.split(ELEMENT_SEPARATOR);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                if (line.isEmpty() || isLineMalformed(elements, lineNumber, line)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                processLine(results, elements);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                lineNumber++;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            throw new IOException(MESSAGE_UNABLE_TO_READ_CSV_FILE, ioe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            logger.log(Level.WARNING, pe.getMessage(), pe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.log(Level.WARNING, iae.getMessage(), iae);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return results;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private boolean isLineMalformed(final String[] elements, int lineNumber, String line) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        for (int position : mandatoryPositions()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            if (!containsValueAtPosition(elements, position)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                logger.warning(String.format(MESSAGE_MALFORMED_LINE_FORMAT, lineNumber, line));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Checks that {@code position} in within the range of {@code element} array and"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * value in {@code position} is not empty."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private boolean containsValueAtPosition(final String[] elements, int position) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return elements.length \u003e position \u0026\u0026 !elements[position].isEmpty();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Gets the value of {@code position} in {@code elements}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Returns the value of {@code position} if it is in {@code element} and not empty."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Otherwise returns an empty string."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected String getValueInElement(final String[] elements, int position) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return (containsValueAtPosition(elements, position)) ? elements[position] : \"\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the value of {@code position} in {@code elements}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the value of {@code position} if it is in {@code element} and not empty."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Otherwise returns the {@code defaultValue}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String getValueInElement(final String[] elements, int position, String defaultValue) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return (containsValueAtPosition(elements, position)) ? elements[position] : defaultValue;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Gets the value of {@code position} in {@code elements}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Returns the value of {@code element} at {@code position} as a {@code List},"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * delimited by {@code COLUMN_VALUES_SEPARATOR} if it is in {@code element} and not empty."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Otherwise returns an empty {@code List}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected List\u003cString\u003e getManyValueInElement(final String[] elements, int position) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (!containsValueAtPosition(elements, position)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return Collections.emptyList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String manyValue \u003d getValueInElement(elements, position);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return Arrays.stream(manyValue.split(COLUMN_VALUES_SEPARATOR)).map(String::trim).collect(Collectors.toList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Gets the list of positions that are mandatory for verification."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected abstract int[] mandatoryPositions();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Processes the csv file line by line."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * All CsvParsers should use {@code getValueInElement} or {@code getManyValueInElement} to read contents in"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * {@code elements} and add created objects into {@code results}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected abstract void processLine(List\u003cT\u003e results, final String[] elements) throws ParseException;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yong24s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yong24s": 110,
      "yamidark": 12,
      "-": 15
    }
  },
  {
    "path": "src/main/java/reposense/parser/DateArgumentType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yong24s"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.Argument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentParserException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yong24s"
        },
        "content": " * Verifies and parses a string-formatted date to a {@code Date} object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yong24s"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yong24s"
        },
        "content": "public class DateArgumentType implements ArgumentType\u003cOptional\u003cDate\u003e\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final String PARSE_EXCEPTION_MESSAGE_INVALID_DATE_STRING_FORMAT \u003d \"Invalid Date: %s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final DateFormat CLI_ARGS_DATE_FORMAT \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yong24s"
        },
        "content": "         * Setting setLenient to false prevents unexpected results."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yong24s"
        },
        "content": "         * Without it, even with \"dd/MM/yyyy\" format, 11/31/2017 will be parsed to 11/7/2019."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yong24s"
        },
        "content": "         * */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CLI_ARGS_DATE_FORMAT.setLenient(false);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public Optional\u003cDate\u003e convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return Optional.of(CLI_ARGS_DATE_FORMAT.parse(value));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        } catch (java.text.ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            throw new ArgumentParserException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                    String.format(PARSE_EXCEPTION_MESSAGE_INVALID_DATE_STRING_FORMAT, value), parser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yong24s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yong24s": 37
    }
  },
  {
    "path": "src/main/java/reposense/parser/InvalidLocationException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yong24s"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": " * Signals that location cannot be represented by {@code URL} or {@code Path}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": "public class InvalidLocationException extends ParseException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public InvalidLocationException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yong24s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yong24s": 10
    }
  },
  {
    "path": "src/main/java/reposense/parser/JsonParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a {@code JsonParser} that is able to parse json file from a {@code Path} into an object of type {@code T}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class JsonParser\u003cT\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the type of {@code T} for json conversion."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract Type getType();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts json file from the given {@code path} into an object and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * @throws IOException if {@code path} is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public abstract T parse(Path path) throws IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected T fromJson(Path path) throws IOException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJson(new Gson(), path, getType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected T fromJson(Gson gson, Path path, Type type) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        try (JsonReader jsonReader \u003d new JsonReader(new FileReader(path.toString()))) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return gson.fromJson(jsonReader, type);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yong24s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yong24s": 7,
      "-": 29
    }
  },
  {
    "path": "src/main/java/reposense/parser/OutputFolderArgumentType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yong24s"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.impl.Arguments;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.Argument;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentParserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yong24s"
        },
        "content": "public class OutputFolderArgumentType implements ArgumentType\u003cPath\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public Path convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        // Piggyback on library methods to do file existence checks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Arguments.fileType().verifyExists().verifyIsDirectory().verifyCanWrite()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                .or()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                .verifyNotExists().convert(parser, arg, value);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return Paths.get(value).resolve(ArgsParser.DEFAULT_REPORT_NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yong24s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yong24s": 18,
      "-": 3
    }
  },
  {
    "path": "src/main/java/reposense/parser/ParseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "public class ParseException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 1,
      "yong24s": 6
    }
  },
  {
    "path": "src/main/java/reposense/parser/RepoConfigCsvParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yong24s"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CommitHash;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Format;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yong24s"
        },
        "content": "public class RepoConfigCsvParser extends CsvParser\u003cRepoConfiguration\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public static final String REPO_CONFIG_FILENAME \u003d \"repo-config.csv\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final String IGNORE_STANDALONE_CONFIG_KEYWORD \u003d \"yes\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Positions of the elements of a line in repo-config.csv config file"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final int LOCATION_POSITION \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final int BRANCH_POSITION \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final int FILE_FORMATS_POSITION \u003d 2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final int IGNORE_GLOB_LIST_POSITION \u003d 3;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final int IGNORE_STANDALONE_CONFIG_POSITION \u003d 4;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final int IGNORE_COMMIT_LIST_CONFIG_POSITION \u003d 5;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public RepoConfigCsvParser(Path csvFilePath) throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        super(csvFilePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Gets the list of positions that are mandatory for verification."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected int[] mandatoryPositions() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return new int[] {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            LOCATION_POSITION,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        };"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Processes the csv file line by line and add created {@code RepoConfiguration} into {@code results} but"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * ignores duplicated {@code RepoConfiguration} if there exists one that has same {@code location} and"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * {@code branch}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected void processLine(List\u003cRepoConfiguration\u003e results, String[] elements) throws InvalidLocationException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoLocation location \u003d new RepoLocation(getValueInElement(elements, LOCATION_POSITION));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String branch \u003d getValueInElement(elements, BRANCH_POSITION, RepoConfiguration.DEFAULT_BRANCH);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFormat\u003e formats \u003d Format.convertStringsToFormats(getManyValueInElement(elements, FILE_FORMATS_POSITION));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cString\u003e ignoreGlobList \u003d getManyValueInElement(elements, IGNORE_GLOB_LIST_POSITION);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String ignoreStandaloneConfig \u003d getValueInElement(elements, IGNORE_STANDALONE_CONFIG_POSITION);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitHash\u003e ignoreCommitList \u003d CommitHash.convertStringsToCommits("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                getManyValueInElement(elements, IGNORE_COMMIT_LIST_CONFIG_POSITION));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        boolean isStandaloneConfigIgnored \u003d ignoreStandaloneConfig.equalsIgnoreCase(IGNORE_STANDALONE_CONFIG_KEYWORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (!isStandaloneConfigIgnored \u0026\u0026 !ignoreStandaloneConfig.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                    \"Ignoring unknown value \" + ignoreStandaloneConfig + \" in ignore standalone config column.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        RepoConfiguration config \u003d new RepoConfiguration("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                location, branch, formats, ignoreGlobList, isStandaloneConfigIgnored, ignoreCommitList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        if (results.contains(config)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            logger.warning(\"Ignoring duplicated repository \" + location + \" \" + branch);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        results.add(config);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yong24s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yong24s": 64,
      "-": 8
    }
  },
  {
    "path": "src/main/java/reposense/parser/ReportFolderArgumentType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yong24s"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.impl.Arguments;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.Argument;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentParserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import net.sourceforge.argparse4j.inf.ArgumentType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yong24s"
        },
        "content": "public class ReportFolderArgumentType implements ArgumentType\u003cPath\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public Path convert(ArgumentParser parser, Argument arg, String value) throws ArgumentParserException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        // Piggyback on library methods to do file existence checks"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Arguments.fileType().verifyExists().verifyIsDirectory().verifyCanRead().convert(parser, arg, value);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return Paths.get(value);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yong24s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yong24s": 19
    }
  },
  {
    "path": "src/main/java/reposense/parser/StandaloneConfigJsonParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.lang.reflect.Type;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.StandaloneConfig;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses json file from {@code Path} and creates a new {@code StandaloneConfig} object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StandaloneConfigJsonParser extends JsonParser\u003cStandaloneConfig\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the type of {@code StandaloneConfig} for json conversion."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Type getType() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new TypeToken\u003cStandaloneConfig\u003e(){}.getType();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts json file from the given {@code path} and returns a {@code StandaloneConfig} object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * @throws IOException if {@code path} is invalid."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public StandaloneConfig parse(Path path) throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJson(path);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yong24s": 3,
      "-": 29
    }
  },
  {
    "path": "src/main/java/reposense/report/CommitReportJson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.AuthorshipSummary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.commits.model.AuthorIntervalContribution;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.commits.model.CommitContributionSummary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": " * Class that holds the data to be serialized into JSON format in `commits.json`."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class CommitReportJson {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final Map\u003cAuthor, List\u003cAuthorIntervalContribution\u003e\u003e authorWeeklyIntervalContributions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final Map\u003cAuthor, List\u003cAuthorIntervalContribution\u003e\u003e authorDailyIntervalContributions;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final Map\u003cAuthor, Integer\u003e authorFinalContributionMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final Map\u003cAuthor, Float\u003e authorContributionVariance;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final Map\u003cAuthor, String\u003e authorDisplayNameMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Empty constructor to construct an empty commit report."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public CommitReportJson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Author emptyAuthor \u003d Author.UNKNOWN_AUTHOR;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        authorWeeklyIntervalContributions \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        authorWeeklyIntervalContributions.put(emptyAuthor, Collections.emptyList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        authorDailyIntervalContributions \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        authorDailyIntervalContributions.put(emptyAuthor, Collections.emptyList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        authorFinalContributionMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        authorFinalContributionMap.put(emptyAuthor, 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        authorContributionVariance \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        authorContributionVariance.put(emptyAuthor, (float) 0.0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        authorDisplayNameMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        authorDisplayNameMap.put(emptyAuthor, \"FAILED TO CLONE OR CHECKOUT THIS REPOSITORY\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public CommitReportJson(CommitContributionSummary commitSummary, AuthorshipSummary authorshipSummary) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        authorWeeklyIntervalContributions \u003d commitSummary.getAuthorWeeklyIntervalContributions();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        authorDailyIntervalContributions \u003d commitSummary.getAuthorDailyIntervalContributions();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        authorFinalContributionMap \u003d authorshipSummary.getAuthorFinalContributionMap();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        authorContributionVariance \u003d commitSummary.getAuthorContributionVariance();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        authorDisplayNameMap \u003d commitSummary.getAuthorDisplayNameMap();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 50,
      "eugenepeh": 1
    }
  },
  {
    "path": "src/main/java/reposense/report/ReportGenerator.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.gson.JsonSyntaxException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import reposense.RepoSense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.AuthorshipReporter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.AuthorshipSummary;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.commits.CommitsReporter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.commits.model.CommitContributionSummary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.git.GitClone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.git.GitCloneException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.git.GitShortlog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.StandaloneConfig;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.StandaloneConfigJsonParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.util.FileUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class ReportGenerator {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String REPOSENSE_CONFIG_FOLDER \u003d \"_reposense\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String REPOSENSE_CONFIG_FILE \u003d \"config.json\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(ReportGenerator.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    // zip file which contains all the dashboard template files"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final String TEMPLATE_FILE \u003d \"/templateZip.zip\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final String MESSAGE_INVALID_CONFIG_JSON \u003d \"%s Ignoring the config provided by this repository.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Generates the authorship and commits JSON file for each repo in {@code configs} at {@code outputPath}, as"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * well as the summary JSON file of all the repos."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * @throws IOException if templateZip.zip does not exists in jar file."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    public static void generateReposReport(List\u003cRepoConfiguration\u003e configs, String outputPath,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            String generationDate) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        InputStream is \u003d RepoSense.class.getResourceAsStream(TEMPLATE_FILE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        FileUtil.copyTemplate(is, outputPath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        for (RepoConfiguration config : configs) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Path repoReportDirectory;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                GitClone.clone(config);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                repoReportDirectory \u003d Paths.get(outputPath, config.getDisplayName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                FileUtil.createDirectory(repoReportDirectory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            } catch (GitCloneException gde) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                logger.log(Level.WARNING,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                        \"Exception met while trying to clone the repo, will skip this repo.\", gde);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                repoReportDirectory \u003d Paths.get(outputPath, config.getDisplayName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                FileUtil.createDirectory(repoReportDirectory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                generateEmptyRepoReport(repoReportDirectory.toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                logger.log(Level.WARNING,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                        \"Error has occurred while creating repo directory, will skip this repo.\", ioe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            } catch (RuntimeException rte) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                logger.log(Level.SEVERE, \"Error has occurred during analysis, will skip this repo.\", rte);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            // preprocess the config and repo"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            updateRepoConfig(config);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            updateAuthorList(config);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            CommitContributionSummary commitSummary \u003d CommitsReporter.generateCommitSummary(config);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            AuthorshipSummary authorshipSummary \u003d AuthorshipReporter.generateAuthorshipSummary(config);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            generateIndividualRepoReport(commitSummary, authorshipSummary, repoReportDirectory.toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                FileUtil.deleteDirectory(FileUtil.REPOS_ADDRESS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                logger.log(Level.WARNING, \"Error deleting report directory.\", ioe);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        FileUtil.writeJsonFile(new SummaryReportJson(configs, generationDate), getSummaryResultPath(outputPath));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        logger.info(\"The report is generated at \" + outputPath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Updates {@code config} with configuration provided by repository if exists."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void updateRepoConfig(RepoConfiguration config) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configJsonPath \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                Paths.get(config.getRepoRoot(), REPOSENSE_CONFIG_FOLDER, REPOSENSE_CONFIG_FILE).toAbsolutePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(configJsonPath)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(String.format(\"%s does not contain a standalone config file.\", config.getLocation()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (config.isStandaloneConfigIgnored()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(String.format(\"Ignoring standalone config file in %s.\", config.getLocation()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(configJsonPath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            config.update(standaloneConfig);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JsonSyntaxException jse) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(String.format(\"%s/%s/%s is malformed.\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                    config.getDisplayName(), REPOSENSE_CONFIG_FOLDER, REPOSENSE_CONFIG_FILE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            logger.warning(String.format(MESSAGE_INVALID_CONFIG_JSON, iae.getMessage()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            throw new AssertionError("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                    \"This exception should not happen as we have performed the file existence check.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Find and update {@code config} with all the author identities if author list is empty."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static void updateAuthorList(RepoConfiguration config) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        if (config.getAuthorList().isEmpty()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            logger.info(String.format("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                    \"%s has no authors specified, using all authors by default.\", config.getDisplayName()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            List\u003cAuthor\u003e authorList \u003d GitShortlog.getAuthors(config);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            config.setAuthorList(authorList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static void generateIndividualRepoReport("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            CommitContributionSummary commitSummary, AuthorshipSummary authorshipSummary, String repoReportDirectory) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        CommitReportJson commitReportJson \u003d new CommitReportJson(commitSummary, authorshipSummary);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileUtil.writeJsonFile(commitReportJson, getIndividualCommitsPath(repoReportDirectory));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileUtil.writeJsonFile(authorshipSummary.getFileResults(), getIndividualAuthorshipPath(repoReportDirectory));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static void generateEmptyRepoReport(String repoReportDirectory) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        CommitReportJson emptyCommitReportJson \u003d new CommitReportJson();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileUtil.writeJsonFile(emptyCommitReportJson, getIndividualCommitsPath(repoReportDirectory));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileUtil.writeJsonFile(Collections.emptyList(), getIndividualAuthorshipPath(repoReportDirectory));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static String getSummaryResultPath(String targetFileLocation) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return targetFileLocation + \"/summary.json\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static String getIndividualAuthorshipPath(String repoReportDirectory) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return repoReportDirectory + \"/authorship.json\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static String getIndividualCommitsPath(String repoReportDirectory) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return repoReportDirectory + \"/commits.json\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdityaA1998": 7,
      "yamidark": 69,
      "yong24s": 12,
      "eugenepeh": 31,
      "-": 39
    }
  },
  {
    "path": "src/main/java/reposense/report/SummaryReportJson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "package reposense.report;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": " * Represents the structure of summary.json file in reposense-report folder."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "public class SummaryReportJson {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private final String dashboardGeneratedTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private final List\u003cRepoConfiguration\u003e repos;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    public SummaryReportJson(List\u003cRepoConfiguration\u003e repos, String dashboardGeneratedTime) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        this.repos \u003d repos;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        this.dashboardGeneratedTime \u003d dashboardGeneratedTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdityaA1998": 18
    }
  },
  {
    "path": "src/main/java/reposense/system/CommandRunner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.system;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandRunner {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isWindows \u003d isWindows();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String checkStyleRaw(String absoluteDirectory) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Path rootPath \u003d Paths.get(absoluteDirectory);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return runCommand("
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                rootPath,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                \"java -jar checkstyle-7.7-all.jar -c /google_checks.xml -f xml \" + absoluteDirectory"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static String runCommand(Path path, String command) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ProcessBuilder pb \u003d null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isWindows) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            pb \u003d new ProcessBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    .command(new String[]{\"CMD\", \"/c\", command})"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                    .directory(path.toFile());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            pb \u003d new ProcessBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    .command(new String[]{\"bash\", \"-c\", command})"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                    .directory(path.toFile());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Process p \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            p \u003d pb.start();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(\"Error Creating Thread:\" + e.getMessage());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        StreamGobbler errorGobbler \u003d new StreamGobbler(p.getErrorStream());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StreamGobbler outputGobbler \u003d new StreamGobbler(p.getInputStream());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        outputGobbler.start();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        errorGobbler.start();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        int exit \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            exit \u003d p.waitFor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            outputGobbler.join();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            errorGobbler.join();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(\"Error Handling Thread.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (exit \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return outputGobbler.getValue();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage \u003d \"Error returned from command \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            errorMessage +\u003d command + \"on path \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            errorMessage +\u003d path.toString() + \" :\\n\" + errorGobbler.getValue();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(errorMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean isWindows() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return (System.getProperty(\"os.name\").toLowerCase().indexOf(\"win\") \u003e\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 8,
      "eugenepeh": 6,
      "-": 48
    }
  },
  {
    "path": "src/main/java/reposense/system/CustomLogFormatter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "package reposense.system;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.logging.LogRecord;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": " * Custom log formatter for different handlers to display only relevant information"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "public class CustomLogFormatter extends SimpleFormatter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static final DateFormat dateFormat \u003d new SimpleDateFormat(\"hh:mm:ss\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    public synchronized String format(LogRecord record) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        builder.append(dateFormat.format(new Date(record.getMillis()))).append(\" - \");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        builder.append(formatMessage(record));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        builder.append(\"\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdityaA1998": 25
    }
  },
  {
    "path": "src/main/java/reposense/system/DashboardServer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "package reposense.system;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import net.freeutils.httpserver.HTTPServer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": " * Handles starting of the server to display the dashboard."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "public class DashboardServer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static final String LOCAL_HOST_URL \u003d \"http://localhost:%s/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(DashboardServer.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     * Starts a server at {@code port} and loads the {@code requestPath} from the local disk."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    public static void startServer(int port, Path requestPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        logger.info(\"Starting a server at port \" + port + \"...\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        HTTPServer server \u003d new HTTPServer(port);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        // default virtual host"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        HTTPServer.VirtualHost host \u003d server.getVirtualHost(null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            // a handler to process the request and give the corresponding response"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            host.addContext(\"/\", new HTTPServer.FileContextHandler(requestPath.toFile()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            server.start();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            launchBrowser(String.format(LOCAL_HOST_URL, port));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            logger.info(\"Press Ctrl + C or equivalent to stop the server\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            logger.log(Level.SEVERE, ioe.getMessage(), ioe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     * Launches the default browser with {@code url}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static void launchBrowser(String url) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            if (Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                Desktop.getDesktop().browse(new URI(url));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                logger.info(\"Loading \" + url + \" on the default browser...\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                logger.severe(\"Browser could not be launched. Please refer to the user guide to\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                        + \" manually view the dashboard\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        } catch (URISyntaxException ue) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            logger.log(Level.SEVERE, ue.getMessage(), ue);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdityaA1998": 59
    }
  },
  {
    "path": "src/main/java/reposense/system/LogsManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "package reposense.system;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.logging.Handler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": " * Configures and manages the loggers and handlers, including their levels"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "public class LogsManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    // Whenever the log file size exceeds {@code MAX_FILE_SIZE_IN_BYTES} it rolls over to another file"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    // The maximum number of files to store the logs is {@code FILE_COUNT}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static final int FILE_COUNT \u003d 2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static final int MEGABYTE \u003d (1 \u003c\u003c 20);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d 5 * MEGABYTE; // 5MB"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    // All the log files will be store with a .log extension"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    // eg. reposense.log.0, in the logs/ folder of the working directory"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static final String LOG_FILE_LOCATION \u003d \"./logs/\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static final String LOG_FILE \u003d LOG_FILE_LOCATION + \"reposense.log\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static Level currentConsoleLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static Level currentFileLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        return logger;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     * Creates a {@code Logger} for the given class name."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     * Adds the Console Handler to the {@code logger}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     * Creates the Console Handler if it is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     * Removes all the handlers from {@code logger}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        Handler[] handlers \u003d logger.getHandlers();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        for (Handler handler : handlers) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            logger.removeHandler(handler);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     * Adds the File Handler to the {@code logger}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     * Creates File Handler if it is null."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        Path path \u003d Paths.get(LOG_FILE_LOCATION);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            if (!Files.exists(path)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                Files.createDirectories(path);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                logger.info(\"Log folder has been successfully created\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            logger.log(Level.SEVERE, e.getMessage(), e);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, FILE_COUNT, true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        fileHandler.setLevel(currentFileLogLevel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        consoleHandler.setLevel(currentConsoleLogLevel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        consoleHandler.setFormatter(new CustomLogFormatter());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    public static void setConsoleHandlerLevel(Level level) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        currentConsoleLogLevel \u003d level;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    public static void setFileConsoleHandlerLevel(Level level) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        currentFileLogLevel \u003d level;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "AdityaA1998": 126,
      "yamidark": 1
    }
  },
  {
    "path": "src/main/java/reposense/system/StreamGobbler.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.system;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.ByteBuffer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.channels.Channels;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.channels.ReadableByteChannel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class StreamGobbler extends Thread {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private final ByteBuffer buffer \u003d ByteBuffer.allocate(1 \u003c\u003c 13); // 8KB"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private InputStream is;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public StreamGobbler(InputStream is) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.is \u003d is;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            ReadableByteChannel ch \u003d Channels.newChannel(is);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            int len;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            while ((len \u003d ch.read(buffer)) \u003e 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                sb.append(new String(buffer.array(), 0, len));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                buffer.rewind();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            value \u003d sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 13,
      "eugenepeh": 7,
      "-": 19
    }
  },
  {
    "path": "src/main/java/reposense/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.io.OutputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.nio.ByteBuffer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.zip.ZipEntry;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.zip.ZipInputStream;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.zip.ZipOutputStream;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.gson.GsonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import reposense.system.LogsManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public static final String REPOS_ADDRESS \u003d \"repos\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    // zip file which contains all the specified file types"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    public static final String ZIP_FILE \u003d \"archive.zip\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static final Logger logger \u003d LogsManager.getLogger(FileUtil.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final String GITHUB_API_DATE_FORMAT \u003d \"yyyy-MM-dd\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static final ByteBuffer buffer \u003d ByteBuffer.allocate(1 \u003c\u003c 11); // 2KB"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static void writeJsonFile(Object object, String path) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Gson gson \u003d new GsonBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                .setDateFormat(GITHUB_API_DATE_FORMAT)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .setPrettyPrinting()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .create();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String result \u003d gson.toJson(object);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        try (PrintWriter out \u003d new PrintWriter(path)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            out.print(result);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            out.print(\"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            logger.log(Level.SEVERE, e.getMessage(), e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public static void deleteDirectory(String root) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Path rootPath \u003d Paths.get(root);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (Files.exists(rootPath)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            Files.walk(rootPath)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                    .sorted(Comparator.reverseOrder())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                    .forEach(filePath -\u003e filePath.toFile().delete());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     * Zips all the files of {@code fileTypes} contained in {@code sourceAndOutputPath} directory into the same folder."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    public static void zip(Path sourceAndOutputPath, String... fileTypes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        FileUtil.zip(sourceAndOutputPath, sourceAndOutputPath, fileTypes);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     * Zips all the {@code fileTypes} files contained in the {@code sourcePath} and its subdirectories."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     * Creates the zipped {@code ZIP_FILE} file in the {@code outputPath}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    public static void zip(Path sourcePath, Path outputPath, String... fileTypes) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        try ("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                FileOutputStream fos \u003d new FileOutputStream(outputPath + File.separator + ZIP_FILE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                ZipOutputStream zos \u003d new ZipOutputStream(fos)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            Set\u003cPath\u003e allFiles \u003d getFilePaths(sourcePath, fileTypes);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            for (Path path : allFiles) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                String filePath \u003d sourcePath.relativize(path.toAbsolutePath()).toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                String zipEntry \u003d Files.isDirectory(path) ? filePath + File.separator : filePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                zos.putNextEntry(new ZipEntry(zipEntry.replace(\"\\\\\", \"/\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                if (Files.isRegularFile(path)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                    try (InputStream is \u003d Files.newInputStream(path)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                        int length;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                        while ((length \u003d is.read(buffer.array())) \u003e 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                            zos.write(buffer.array(), 0, length);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                zos.closeEntry();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            logger.log(Level.SEVERE, ioe.getMessage(), ioe);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     * Unzips the contents of the {@code zipSourcePath} into {@code outputPath}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * @throws IOException if {@code zipSourcePath} is an invalid path."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public static void unzip(Path zipSourcePath, Path outputPath) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        try (InputStream is \u003d Files.newInputStream(zipSourcePath)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            unzip(is, outputPath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Unzips the contents of the {@code is} into {@code outputPath}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * @throws IOException if {@code is} refers to an invalid path."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public static void unzip(InputStream is, Path outputPath) throws IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        try (ZipInputStream zis \u003d new ZipInputStream(is)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            ZipEntry entry;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            Files.createDirectories(outputPath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            while ((entry \u003d zis.getNextEntry()) !\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                Path path \u003d Paths.get(outputPath.toString(), entry.getName());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                // create the directories of the zip directory"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                if (entry.isDirectory()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                    Files.createDirectories(path.toAbsolutePath());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                    zis.closeEntry();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                if (!Files.exists(path.getParent())) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                    Files.createDirectories(path.getParent());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                try (OutputStream output \u003d Files.newOutputStream(path)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                    int length;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                    while ((length \u003d zis.read(buffer.array())) \u003e 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                        output.write(buffer.array(), 0, length);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                zis.closeEntry();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     * Copies the template files from {@code sourcePath} to the {@code outputPath}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * @throws IOException if {@code is} refers to an invalid path."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public static void copyTemplate(InputStream is, String outputPath) throws IOException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        FileUtil.unzip(is, Paths.get(outputPath));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Creates the {@code dest} directory if it does not exist."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static void createDirectory(Path dest) throws IOException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Files.createDirectories(dest);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     * Returns a list of {@code Path} of {@code fileTypes} contained in the given {@code directoryPath} directory."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static Set\u003cPath\u003e getFilePaths(Path directoryPath, String... fileTypes) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        return Files.walk(directoryPath)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                .filter(p -\u003e FileUtil.isFileTypeInPath(p, fileTypes) || Files.isDirectory(p))"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     * Returns true if the {@code path} contains one of the {@code fileTypes} extension."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static boolean isFileTypeInPath(Path path, String... fileTypes) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        return Arrays.stream(fileTypes).anyMatch(path.toString()::endsWith);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String attachJsPrefix(String original, String prefix) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"var \" + prefix + \" \u003d \" + original;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdityaA1998": 84,
      "yamidark": 27,
      "yong24s": 17,
      "eugenepeh": 13,
      "-": 33
    }
  },
  {
    "path": "src/main/java/reposense/util/StringsUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * Contains strings related utilities."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class StringsUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Pattern SPECIAL_SYMBOLS \u003d Pattern.compile(\"[@;:\u0026/\\\\\\\\!\u003c\u003e{}%#\\\"\\\\-\u003d\u0027()\\\\[\\\\].+*?^$|]\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Filters the {@code text}, returning only the lines that matches the given {@code regex}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static String filterText(String text, String regex) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String[] split \u003d text.split(\"\\n\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        for (String line: split) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            if (line.matches(regex)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                sb.append(line + \"\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Converts all special symbol characters inside {@code regexString} to the {@code replacementCharacter}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public static String replaceSpecialSymbols(String regexString, String replacementCharacter) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return SPECIAL_SYMBOLS.matcher(regexString).replaceAll(replacementCharacter);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static String addQuote(String original) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return \"\\\"\" + original + \"\\\"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 11,
      "eugenepeh": 26
    }
  },
  {
    "path": "src/systemtest/java/reposense/ConfigSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import static org.apache.tools.ant.types.Commandline.translateCommandline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.CliArguments;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.ConfigCliArguments;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.parser.ArgsParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.parser.AuthorConfigCsvParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.parser.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.parser.RepoConfigCsvParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.report.ReportGenerator;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.util.FileUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.util.TestUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class ConfigSystemTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FT_TEMP_DIR \u003d \"ft_temp\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXPECTED_FOLDER \u003d \"expected\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final List\u003cString\u003e TESTING_FILE_FORMATS \u003d Arrays.asList(\"java\", \"adoc\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static final String TEST_REPORT_GENERATED_TIME \u003d \"Tue Jul 24 17:45:15 SGT 2018\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileUtil.deleteDirectory(FT_TEMP_DIR);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void testNoDateRange() throws IOException, URISyntaxException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        generateReport();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Path actualFiles \u003d Paths.get(getClass().getClassLoader().getResource(\"noDateRange/expected\").toURI());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        verifyAllJson(actualFiles, FT_TEMP_DIR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void testDateRange() throws IOException, URISyntaxException, ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        generateReport(getInputWithDates(\"1/9/2017\", \"30/10/2017\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Path actualFiles \u003d Paths.get(getClass().getClassLoader().getResource(\"dateRange/expected\").toURI());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        verifyAllJson(actualFiles, FT_TEMP_DIR);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private String getInputWithDates(String sinceDate, String untilDate) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return String.format(\"-since %s -until %s\", sinceDate, untilDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private void generateReport() throws IOException, URISyntaxException, ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        generateReport(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private void generateReport(String inputDates) throws IOException, URISyntaxException, ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Path configFolder \u003d Paths.get(getClass().getClassLoader().getResource(\"repo-config.csv\").toURI()).getParent();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String formats \u003d String.join(\" \", TESTING_FILE_FORMATS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d String.format(\"-config %s -formats %s \", configFolder, formats) + inputDates;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cRepoConfiguration\u003e repoConfigs \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cRepoConfiguration\u003e authorConfigs \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        RepoConfiguration.merge(repoConfigs, authorConfigs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        RepoConfiguration.setFormatsToRepoConfigs(repoConfigs, cliArguments.getFormats());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        RepoConfiguration.setDatesToRepoConfigs("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                repoConfigs, cliArguments.getSinceDate(), cliArguments.getUntilDate());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        ReportGenerator.generateReposReport(repoConfigs, FT_TEMP_DIR, TEST_REPORT_GENERATED_TIME);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private void verifyAllJson(Path expectedDirectory, String actualRelative) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        try (Stream\u003cPath\u003e pathStream \u003d Files.list(expectedDirectory)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            for (Path filePath : pathStream.collect(Collectors.toList())) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                if (Files.isDirectory(filePath)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                    verifyAllJson(filePath, actualRelative);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                if (filePath.toString().endsWith(\".json\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                    String relativeDirectory \u003d filePath.toAbsolutePath().toString().split(EXPECTED_FOLDER)[1];"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                    assertJson(filePath, relativeDirectory, actualRelative);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private void assertJson(Path expectedJson, String expectedPosition, String actualRelative) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Path actualJson \u003d Paths.get(actualRelative, expectedPosition);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertTrue(Files.exists(actualJson));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            Assert.assertTrue(TestUtil.compareFileContents(expectedJson, actualJson));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            Assert.fail(e.getMessage());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdityaA1998": 1,
      "yong24s": 43,
      "yamidark": 30,
      "eugenepeh": 11,
      "-": 25
    }
  },
  {
    "path": "src/test/java/reposense/authorship/AnnotatorAnalyzerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.authorship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.FileResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class AnnotatorAnalyzerTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void noAnnotationTest() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        config.setAnnotationOverwrite(false);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileResult fileResult \u003d getFileResult(\"blameTest.java\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        assertFileAnalysisCorrectness(fileResult);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void annotationTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        config.setAnnotationOverwrite(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileResult fileResult \u003d getFileResult(\"blameTest.java\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        assertFileAnalysisCorrectness(fileResult);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 23
    }
  },
  {
    "path": "src/test/java/reposense/authorship/FileAnalyzerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.authorship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.FileInfo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.FileResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.git.CommitNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.git.GitCheckout;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CommitHash;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.TestUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class FileAnalyzerTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void blameTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileResult fileResult \u003d getFileResult(\"blameTest.java\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        assertFileAnalysisCorrectness(fileResult);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void movedFileBlameTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileResult fileResult \u003d getFileResult(\"newPos/movedFile.java\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        assertFileAnalysisCorrectness(fileResult);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void blameTestDateRange() throws CommitNotFoundException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Date sinceDate \u003d TestUtil.getDate(2018, Calendar.FEBRUARY, 6);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Date untilDate \u003d TestUtil.getDate(2018, Calendar.FEBRUARY, 8);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitCheckout.checkoutDate(config.getRepoRoot(), config.getBranch(), untilDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        config.setSinceDate(sinceDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        config.setUntilDate(untilDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileResult fileResult \u003d getFileResult(\"blameTest.java\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        assertFileAnalysisCorrectness(fileResult);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void movedFileBlameTestDateRange() throws CommitNotFoundException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Date sinceDate \u003d TestUtil.getDate(2018, Calendar.FEBRUARY, 7);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Date untilDate \u003d TestUtil.getDate(2018, Calendar.FEBRUARY, 9);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitCheckout.checkoutDate(config.getRepoRoot(), config.getBranch(), untilDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        config.setSinceDate(sinceDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        config.setUntilDate(untilDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileResult fileResult \u003d getFileResult(\"newPos/movedFile.java\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        assertFileAnalysisCorrectness(fileResult);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void analyzeFile_blameTestFileIgnoreFakeAuthorCommitFullHash_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileInfo fileInfoFull \u003d generateTestFileInfo(\"blameTest.java\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        config.setIgnoreCommitList(Collections.singletonList(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileInfoAnalyzer.analyzeFile(config, fileInfoFull);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileInfo fileInfoShort \u003d generateTestFileInfo(\"blameTest.java\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        config.setIgnoreCommitList("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                        new CommitHash(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING.substring(0, 8))));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileInfoAnalyzer.analyzeFile(config, fileInfoShort);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(fileInfoFull, fileInfoShort);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(new Author(MAIN_AUTHOR_NAME), fileInfoFull.getLine(1).getAuthor());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(new Author(MAIN_AUTHOR_NAME), fileInfoFull.getLine(2).getAuthor());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(new Author(MAIN_AUTHOR_NAME), fileInfoFull.getLine(4).getAuthor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        // line added in commit that was ignored"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertEquals(Author.UNKNOWN_AUTHOR, fileInfoFull.getLine(3).getAuthor());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void analyzeFile_blameTestFileIgnoreAllCommit_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileInfo fileInfoFull \u003d generateTestFileInfo(\"blameTest.java\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        config.setIgnoreCommitList(Arrays.asList(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileInfoAnalyzer.analyzeFile(config, fileInfoFull);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileInfo fileInfoShort \u003d generateTestFileInfo(\"blameTest.java\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setIgnoreCommitList(CommitHash.convertStringsToCommits("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING.substring(0, 8),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                        MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018_STRING.substring(0, 8))));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileInfoAnalyzer.analyzeFile(config, fileInfoShort);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(fileInfoFull, fileInfoShort);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        fileInfoFull.getLines().forEach(lineInfo -\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                Assert.assertEquals(Author.UNKNOWN_AUTHOR, lineInfo.getAuthor()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 51,
      "yong24s": 4,
      "eugenepeh": 10,
      "-": 36
    }
  },
  {
    "path": "src/test/java/reposense/authorship/FileInfoExtractorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.authorship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.FileInfo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.git.GitCheckout;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.util.TestUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class FileInfoExtractorTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"resources\", \"FileInfoExtractorTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Path FILE_WITH_SPECIAL_CHARACTER \u003d TEST_DATA_FOLDER.resolve(\"fileWithSpecialCharacters.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Path FILE_WITHOUT_SPECIAL_CHARACTER \u003d TEST_DATA_FOLDER"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            .resolve(\"fileWithoutSpecialCharacters.txt\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final String WINDOWS_ILLEGAL_FILE_NAME_BRANCH \u003d \"windows-illegal-filename\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final String EDITED_FILE_INFO_BRANCH \u003d \"getEditedFileInfos-test\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final String FEBRUARY_EIGHT_COMMIT_HASH \u003d \"768015345e70f06add2a8b7d1f901dc07bf70582\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final String OCTOBER_SEVENTH_COMMIT_HASH \u003d \"b28dfac5bd449825c1a372e58485833b35fdbd50\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void extractFileInfosTest() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(MAIN_AUTHOR_NAME, new Author(MAIN_AUTHOR_NAME));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(FAKE_AUTHOR_NAME, new Author(FAKE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitCheckout.checkout(config.getRepoRoot(), TEST_COMMIT_HASH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cFileInfo\u003e files \u003d FileInfoExtractor.extractFileInfos(config);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(6, files.size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertTrue(isFileExistence(Paths.get(\"README.md\"), files));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertTrue(isFileExistence(Paths.get(\"annotationTest.java\"), files));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertTrue(isFileExistence(Paths.get(\"blameTest.java\"), files));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertTrue(isFileExistence(Paths.get(\"newPos/movedFile.java\"), files));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertTrue(isFileExistence(Paths.get(\"inMasterBranch.java\"), files));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertTrue(isFileExistence(Paths.get(\"newFile.java\"), files));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void extractFileInfos_sinceDateFebrauaryNineToLatestCommit_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Date date \u003d TestUtil.getDate(2018, Calendar.FEBRUARY, 9);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        config.setSinceDate(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cFileInfo\u003e files \u003d FileInfoExtractor.extractFileInfos(config);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertEquals(4, files.size());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        // files edited within commit range"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertTrue(isFileExistence(Paths.get(\"README.md\"), files));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertTrue(isFileExistence(Paths.get(\"newPos/movedFile.java\"), files));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertTrue(isFileExistence(Paths.get(\"annotationTest.java\"), files));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        // files not edited within commit range"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertFalse(isFileExistence(Paths.get(\"inMasterBranch.java\"), files));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertFalse(isFileExistence(Paths.get(\"blameTest.java\"), files));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertFalse(isFileExistence(Paths.get(\"newFile.java\"), files));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void extractFileInfos_windowsIllegalFileNameBranch_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitCheckout.checkout(config.getRepoRoot(), WINDOWS_ILLEGAL_FILE_NAME_BRANCH);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cFileInfo\u003e files \u003d FileInfoExtractor.extractFileInfos(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (TestUtil.isWindows()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            Assert.assertEquals(6, files.size());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            Assert.assertEquals(7, files.size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            Assert.assertTrue(isFileExistence(Paths.get(\"windows:Illegal?Characters!File(Name).java\"), files));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void extractFileInfos_sinceDateAfterLatestCommit_emptyResult() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Date date \u003d TestUtil.getDate(2050, 12, 31);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        config.setSinceDate(date);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cFileInfo\u003e files \u003d FileInfoExtractor.extractFileInfos(config);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertTrue(files.isEmpty());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void extractFileInfos_untilDateBeforeFirstCommit_emptyResult() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Date date \u003d TestUtil.getDate(2015, 12, 31);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.setUntilDate(date);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        List\u003cFileInfo\u003e files \u003d FileInfoExtractor.extractFileInfos(config);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(files.isEmpty());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void getEditedFileInfos_editFileInfoBranchSinceFebrauryEight_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitCheckout.checkout(config.getRepoRoot(), EDITED_FILE_INFO_BRANCH);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cFileInfo\u003e files \u003d FileInfoExtractor.getEditedFileInfos(config, FEBRUARY_EIGHT_COMMIT_HASH);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(3, files.size());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertTrue(isFileExistence(Paths.get(\"README.md\"), files));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertTrue(isFileExistence(Paths.get(\"annotationTest.java\"), files));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertTrue(isFileExistence(Paths.get(\"newPos/movedFile.java\"), files));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        // file renamed without changing content, not included"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertFalse(isFileExistence(Paths.get(\"renamedFile.java\"), files));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void getEditedFileInfos_editFileInfoBranchSinceFirstCommit_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitCheckout.checkout(config.getRepoRoot(), EDITED_FILE_INFO_BRANCH);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cFileInfo\u003e files \u003d FileInfoExtractor.getEditedFileInfos(config, FIRST_COMMIT_HASH);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(5, files.size());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        // empty file created, not included"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertFalse(isFileExistence(Paths.get(\"inMasterBranch.java\"), files));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void getEditedFileInfos_windowsIllegalFileNameBranchSinceOctoberFifteen_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitCheckout.checkout(config.getRepoRoot(), WINDOWS_ILLEGAL_FILE_NAME_BRANCH);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cFileInfo\u003e files \u003d FileInfoExtractor.getEditedFileInfos(config, OCTOBER_SEVENTH_COMMIT_HASH);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (TestUtil.isWindows()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            Assert.assertTrue(files.isEmpty());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            Assert.assertEquals(1, files.size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            Assert.assertTrue(isFileExistence(Paths.get(\"windows:Illegal?Characters!File(Name).java\"), files));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void generateFileInfo_fileWithSpecialCharacters_correctFileInfoGenerated() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileInfo fileInfo \u003d FileInfoExtractor.generateFileInfo(\".\", FILE_WITH_SPECIAL_CHARACTER.toString());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(5, fileInfo.getLines().size());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void generateFileInfo_fileWithoutSpecialCharacters_correctFileInfoGenerated() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileInfo fileInfo \u003d FileInfoExtractor.generateFileInfo(\".\", FILE_WITHOUT_SPECIAL_CHARACTER.toString());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(5, fileInfo.getLines().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private boolean isFileExistence(Path filePath, List\u003cFileInfo\u003e files) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return files.stream().anyMatch(file -\u003e Paths.get(file.getPath()).equals(filePath));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 116,
      "eugenepeh": 24,
      "-": 8
    }
  },
  {
    "path": "src/test/java/reposense/commits/CommitInfoAnalyzerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.commits;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.commits.model.CommitInfo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.commits.model.CommitResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CommitHash;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.parser.InvalidLocationException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class CommitInfoAnalyzerTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final int NUMBER_EUGENE_COMMIT \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int NUMBER_EMPTY_MESSAGE_COMMIT \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void before() throws InvalidLocationException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super.before();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().clear();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void analyzeCommits_allAuthorNoIgnoredCommitsNoDateRange_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(MAIN_AUTHOR_NAME, new Author(MAIN_AUTHOR_NAME));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(FAKE_AUTHOR_NAME, new Author(FAKE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(EUGENE_AUTHOR_NAME, new Author(EUGENE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cCommitResult\u003e commitResults \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(commitInfos.size(), commitResults.size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void analyzeCommits_fakeMainAuthorNoIgnoredCommitsNoDateRange_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(MAIN_AUTHOR_NAME, new Author(MAIN_AUTHOR_NAME));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(FAKE_AUTHOR_NAME, new Author(FAKE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cCommitResult\u003e commitResults \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(commitInfos.size() - NUMBER_EUGENE_COMMIT, commitResults.size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void analyzeCommits_eugeneAuthorNoIgnoredCommitsNoDateRange_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(EUGENE_AUTHOR_NAME, new Author(EUGENE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cCommitResult\u003e commitResults \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(NUMBER_EUGENE_COMMIT, commitResults.size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void analyzeCommits_allAuthorSingleCommitIgnoredNoDateRange_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(MAIN_AUTHOR_NAME, new Author(MAIN_AUTHOR_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(FAKE_AUTHOR_NAME, new Author(FAKE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(EUGENE_AUTHOR_NAME, new Author(EUGENE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        config.setIgnoreCommitList(Collections.singletonList(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cCommitResult\u003e commitResultsFull \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        config.setIgnoreCommitList("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                        new CommitHash(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING.substring(0, 8))));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cCommitResult\u003e commitResultsShort \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(commitResultsShort, commitResultsFull);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(commitInfos.size() - 1, commitResultsFull.size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void analyzeCommits_allAuthorMultipleCommitIgnoredNoDateRange_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(MAIN_AUTHOR_NAME, new Author(MAIN_AUTHOR_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(FAKE_AUTHOR_NAME, new Author(FAKE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(EUGENE_AUTHOR_NAME, new Author(EUGENE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        config.setIgnoreCommitList("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                Arrays.asList(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018, EUGENE_AUTHOR_README_FILE_COMMIT_07052018));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cCommitResult\u003e commitResultsFull \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setIgnoreCommitList(CommitHash.convertStringsToCommits(Arrays.asList("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING.substring(0, 8),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                EUGENE_AUTHOR_README_FILE_COMMIT_07052018_STRING.substring(0, 8))));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cCommitResult\u003e commitResultsShort \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(commitResultsShort, commitResultsFull);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(commitInfos.size() - 2, commitResultsFull.size());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void analyzeCommits_noCommitMessage_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setBranch(\"empty-commit-message\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().clear();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(YONG_AUTHOR_NAME, new Author(YONG_AUTHOR_NAME));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitInfo\u003e commitInfos \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cCommitResult\u003e commitResults \u003d CommitInfoAnalyzer.analyzeCommits(commitInfos, config);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        commitResults.removeIf(s -\u003e !s.getMessage().isEmpty());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(NUMBER_EMPTY_MESSAGE_COMMIT, commitResults.size());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 68,
      "eugenepeh": 15,
      "-": 25
    }
  },
  {
    "path": "src/test/java/reposense/commits/CommitInfoExtractorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yamidark"
        },
        "content": "package reposense.commits;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.commits.model.CommitInfo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.util.TestUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": "public class CommitInfoExtractorTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void withContentTest() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cCommitInfo\u003e commits \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertFalse(commits.isEmpty());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void withoutContentTest() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Date sinceDate \u003d TestUtil.getDate(2050, Calendar.JANUARY, 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        config.setSinceDate(sinceDate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cCommitInfo\u003e commits \u003d CommitInfoExtractor.extractCommitInfos(config);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertTrue(commits.isEmpty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 30
    }
  },
  {
    "path": "src/test/java/reposense/git/GitBlameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class GitBlameTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void blameRaw_validFile_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String content \u003d GitBlame.blame(config.getRepoRoot(), \"blameTest.java\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertFalse(content.isEmpty());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test(expected \u003d RuntimeException.class)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void blameRaw_nonExistentFile_throwsRunTimeException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitBlame.blame(config.getRepoRoot(), \"nonExistentFile\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 20
    }
  },
  {
    "path": "src/test/java/reposense/git/GitBranchTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Format;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.parser.InvalidLocationException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class GitBranchTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    protected static final String TEST_REPO_UNCOMMON_DEFAULT_GIT_LOCATION \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            \"https://github.com/reposense/testrepo-UncommonDefaultBranch.git\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void getCurrentBranch_masterBranch_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String currentBranch \u003d GitBranch.getCurrentBranch(config.getRepoRoot());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertEquals(\"master\", currentBranch);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getCurrentBranch_uncommonDefaultBranch_success() throws GitCloneException, InvalidLocationException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration uncommonDefaultConfig \u003d new RepoConfiguration("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoLocation(TEST_REPO_UNCOMMON_DEFAULT_GIT_LOCATION), RepoConfiguration.DEFAULT_BRANCH);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        uncommonDefaultConfig.setFormats(Format.DEFAULT_FORMATS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitClone.clone(uncommonDefaultConfig);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String currentBranch \u003d GitBranch.getCurrentBranch(uncommonDefaultConfig.getRepoRoot());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertEquals(\"uncommon\", currentBranch);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 28,
      "-": 6
    }
  },
  {
    "path": "src/test/java/reposense/git/GitCheckoutTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.TestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class GitCheckoutTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void checkout_validBranch_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitCheckout.checkout(config.getRepoRoot(), \"test\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Path branchFile \u003d Paths.get(config.getRepoRoot(), \"inTestBranch.java\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(Files.exists(branchFile));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkoutBranchTest() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Path branchFile \u003d Paths.get(config.getRepoRoot(), \"inTestBranch.java\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(Files.exists(branchFile));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitCheckout.checkoutBranch(config.getRepoRoot(), \"test\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertTrue(Files.exists(branchFile));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkoutHashTest() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Path newFile \u003d Paths.get(config.getRepoRoot(), \"newFile.java\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.exists(newFile));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitCheckout.checkout(config.getRepoRoot(), FIRST_COMMIT_HASH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertFalse(Files.exists(newFile));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void checkoutToDate_validDate_success() throws CommitNotFoundException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Path newFile \u003d Paths.get(config.getRepoRoot(), \"newFile.java\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.exists(newFile));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Date untilDate \u003d TestUtil.getDate(2018, Calendar.FEBRUARY, 6);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitCheckout.checkoutDate(config.getRepoRoot(), config.getBranch(), untilDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(Files.exists(newFile));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test(expected \u003d CommitNotFoundException.class)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void checkoutToDate_invalidDate_throwsEmptyCommitException() throws CommitNotFoundException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Date untilDate \u003d TestUtil.getDate(2015, Calendar.FEBRUARY, 6);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitCheckout.checkoutDate(config.getRepoRoot(), config.getBranch(), untilDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 5,
      "yong24s": 3,
      "eugenepeh": 23,
      "-": 27
    }
  },
  {
    "path": "src/test/java/reposense/git/GitCloneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class GitCloneTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void cloneTest_validRepo_success() throws GitCloneException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        // As the clone has been performed in the {@code GitTestTemplate},"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        // this checks whether the clone has been executed successfully by performing a file system check."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Path dir \u003d Paths.get(config.getRepoRoot());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(Files.exists(dir));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 21
    }
  },
  {
    "path": "src/test/java/reposense/git/GitDiffTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class GitDiffTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void diffCommit_validCommitHash_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String diffResult \u003d GitDiff.diffCommit(config.getRepoRoot(),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018.toString());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertFalse(diffResult.isEmpty());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void diffCommit_emptyCommitHash_emptyResult() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String diffResult \u003d GitDiff.diffCommit(config.getRepoRoot(), LATEST_COMMIT_HASH);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(diffResult.isEmpty());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void diffCommit_latestCommitHash_emptyResult() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String diffResult \u003d GitDiff.diffCommit(config.getRepoRoot(), \"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(diffResult.isEmpty());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test(expected \u003d RuntimeException.class)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void diffCommit_nonexistentCommitHash_throwsRunTimeException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitDiff.diffCommit(config.getRepoRoot(), NONEXISTENT_COMMIT_HASH);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 32,
      "-": 2
    }
  },
  {
    "path": "src/test/java/reposense/git/GitLogTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Format;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.util.TestUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class GitLogTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void gitLog_existingFormats_hasContent() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String content \u003d GitLog.get(config, getAlphaAllAliasAuthor());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertFalse(content.isEmpty());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void gitLog_nonExistingFormats_noContent() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setFormats(Collections.singletonList(new Format(\"py\")));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String content \u003d GitLog.get(config, getAlphaAllAliasAuthor());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(content.isEmpty());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void gitLog_includeAllJavaFiles_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setFormats(Collections.singletonList(new Format(\"java\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String content \u003d GitLog.get(config, getAlphaAllAliasAuthor());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(TestUtil.compareNumberExpectedCommitsToGitLogLines(8, content));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void gitLog_fakeAuthorNameOnly_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Author fakeAuthorName \u003d new Author(FAKE_AUTHOR_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String content \u003d GitLog.get(config, fakeAuthorName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(TestUtil.compareNumberExpectedCommitsToGitLogLines(4, content));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void gitLog_authorNameIncorrectCase_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Author fakeAuthorName \u003d new Author(FAKE_AUTHOR_NAME.toUpperCase());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String content \u003d GitLog.get(config, fakeAuthorName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(TestUtil.compareNumberExpectedCommitsToGitLogLines(4, content));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void gitLog_fakeAuthorNameWithSpecialCharacter_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Author fakeAuthorWithSpecialCharacter \u003d new Author(FAKE_AUTHOR_NAME.replace(\"fake\", \"#()!\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String content \u003d GitLog.get(config, fakeAuthorWithSpecialCharacter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(TestUtil.compareNumberExpectedCommitsToGitLogLines(4, content));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void gitLog_includeAllJavaFilesAuthorIgnoreMovedFile_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setFormats(Collections.singletonList(new Format(\"java\")));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Author ignoreMovedFileAuthor \u003d getAlphaAllAliasAuthor();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        ignoreMovedFileAuthor.setIgnoreGlobList(Collections.singletonList(\"**movedFile.java\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String content \u003d GitLog.get(config, ignoreMovedFileAuthor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(TestUtil.compareNumberExpectedCommitsToGitLogLines(6, content));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void gitLog_authorIgnoreAllJavaFiles_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Author ignoreAllJavaFilesAuthor \u003d getAlphaAllAliasAuthor();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        ignoreAllJavaFilesAuthor.setIgnoreGlobList(Collections.singletonList(\"*.java\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String content \u003d GitLog.get(config, ignoreAllJavaFilesAuthor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(TestUtil.compareNumberExpectedCommitsToGitLogLines(2, content));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void gitLog_authorWithAllCharactersRegexAlias_emptyResult() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Author authorWithAllCharactersRegexAlias \u003d new Author(\"none\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        authorWithAllCharactersRegexAlias.setAuthorAliases(Collections.singletonList(\".*\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String content \u003d GitLog.get(config, authorWithAllCharactersRegexAlias);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(content.isEmpty());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void gitLog_sinceDateInFuture_noContent() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Date date \u003d TestUtil.getDate(2050, Calendar.JANUARY, 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.setSinceDate(date);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String content \u003d GitLog.get(config, getAlphaAllAliasAuthor());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(content.isEmpty());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void gitLog_untilDateBeforeAnyCommit_noContent() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Date date \u003d TestUtil.getDate(2010, Calendar.JANUARY, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.setUntilDate(date);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.setSinceDate(null);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String content \u003d GitLog.get(config, getAlphaAllAliasAuthor());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(content.isEmpty());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 96,
      "-": 9
    }
  },
  {
    "path": "src/test/java/reposense/git/GitRevListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.util.TestUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class GitRevListTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void getCommitHashBeforeDate_beforeInitialCommitDate_emptyResult() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Date date \u003d TestUtil.getDate(2018, Calendar.FEBRUARY, 4);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String commitHash \u003d GitRevList.getCommitHashBeforeDate(config.getRepoRoot(), config.getBranch(), date);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(commitHash.isEmpty());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void getCommitHashBeforeDate_afterLatestCommitDate_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Date date \u003d TestUtil.getDate(2018, Calendar.MAY, 10);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String commitHash \u003d GitRevList.getCommitHashBeforeDate(config.getRepoRoot(), config.getBranch(), date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        // result from git has a newline at the end"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertEquals(EUGENE_AUTHOR_README_FILE_COMMIT_07052018 + \"\\n\", commitHash);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void getCommitHashBeforeDate_februaryNineDate_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Date date \u003d TestUtil.getDate(2018, Calendar.FEBRUARY, 9);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String commitHash \u003d GitRevList.getCommitHashBeforeDate(config.getRepoRoot(), config.getBranch(), date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        // result from git has a newline at the end"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertEquals(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018 + \"\\n\", commitHash);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void getCommitHashBeforeDate_nullDate_emptyResult() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String commitHash \u003d GitRevList.getCommitHashBeforeDate(config.getRepoRoot(), config.getBranch(), null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(commitHash.isEmpty());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test(expected \u003d RuntimeException.class)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void getCommitHashBeforeDate_invalidBranch_throwsRunTimeException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Date date \u003d TestUtil.getDate(2018, Calendar.FEBRUARY, 9);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitRevList.getCommitHashBeforeDate(config.getRepoRoot(), \"invalidBranch\", date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 50
    }
  },
  {
    "path": "src/test/java/reposense/git/GitShortlogTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.git;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.util.TestUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class GitShortlogTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void getAuthors_validRepoNoDateRange_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cAuthor\u003e expectedAuthorList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        expectedAuthorList.add(new Author(\"Eugene Peh\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        expectedAuthorList.add(new Author(\"eugenepeh\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        expectedAuthorList.add(new Author(\"fakeAuthor\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        expectedAuthorList.add(new Author(\"harryggg\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        List\u003cAuthor\u003e actualAuthorList \u003d GitShortlog.getAuthors(config);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(expectedAuthorList.size(), actualAuthorList.size());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertEquals(expectedAuthorList, actualAuthorList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void getAuthors_validRepoDateRange_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cAuthor\u003e expectedAuthorList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        expectedAuthorList.add(new Author(\"eugenepeh\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        config.setSinceDate(TestUtil.getDate(2018, Calendar.MAY, 5));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        config.setUntilDate(TestUtil.getDate(2018, Calendar.MAY, 10));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        List\u003cAuthor\u003e actualAuthorList \u003d GitShortlog.getAuthors(config);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(expectedAuthorList.size(), actualAuthorList.size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(expectedAuthorList, actualAuthorList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void getAuthors_validRepoDateOutOfRange_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        config.setSinceDate(TestUtil.getDate(2018, Calendar.JUNE, 1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        config.setUntilDate(TestUtil.getDate(2018, Calendar.JUNE, 20));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        List\u003cAuthor\u003e actualAuthorList \u003d GitShortlog.getAuthors(config);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertTrue(actualAuthorList.isEmpty());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 25,
      "eugenepeh": 28
    }
  },
  {
    "path": "src/test/java/reposense/model/AuthorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.util.AssertUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class AuthorTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void setEmail_validEmails_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Author author \u003d new Author(\"Tester\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String[] emails \u003d new String[] {\"tester@test.net\", \"developer@example.com\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        author.setEmails(Arrays.asList(emails));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        // The additional 1 email comes from the Standard GitHub Email."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertEquals(emails.length + 1, author.getEmails().size());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(author.getEmails().containsAll(Arrays.asList(emails)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void setEmail_invalidEmails_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Author author \u003d new Author(\"Tester\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String[] emails \u003d new String[] {\"this.”is\\\\ invalid”@example.com\", \"developer@example.com\"};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        AssertUtil.assertThrows(IllegalArgumentException.class, () -\u003e author.setEmails(Arrays.asList(emails)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        AssertUtil.assertThrows(IllegalArgumentException.class, () -\u003e author.setEmails(Collections.singletonList(\"\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void setIgnoreGlobList_validGlobRegex_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Author author \u003d new Author(\"Tester\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String[] ignoreGlobs \u003d new String[] {\"**.adoc\", \"collated/**\"};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String[] testPaths \u003d new String[] {\"docs/UserGuide.adoc\", \"collated/codeeong.md\"};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        author.setIgnoreGlobList(Arrays.asList(ignoreGlobs));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertEquals(2, author.getIgnoreGlobList().size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(author.getIgnoreGlobList().containsAll(Arrays.asList(ignoreGlobs)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Arrays.stream(testPaths).forEach(value -\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                Assert.assertTrue(author.getIgnoreGlobMatcher().matches(Paths.get(value))));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test(expected \u003d IllegalArgumentException.class)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void setIgnoreGlobList_quoteInGlobPattern_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Author author \u003d new Author(\"Tester\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String[] ignoreGlobs \u003d new String[] {\"**.adoc\", \"collated/**\\\"\"};"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        author.setIgnoreGlobList(Arrays.asList(ignoreGlobs));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test(expected \u003d IllegalArgumentException.class)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void setIgnoreGlobList_semicolonInGlobPattern_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Author author \u003d new Author(\"Tester\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String[] ignoreGlobs \u003d new String[] {\"**.adoc; echo hi\", \"collated/**\"};"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        author.setIgnoreGlobList(Arrays.asList(ignoreGlobs));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void appendIgnoreGlobList_validGlobRegex_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Author author \u003d new Author(\"Tester\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String[] ignoreGlobs \u003d new String[] {\"**.adoc\", \"collated/**\"};"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String[] moreIgnoreGlobs \u003d new String[] {\"**[!(.md)]\", \"C:\\\\\\\\Program Files\\\\\\\\**\"};"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String[] testPaths \u003d new String[] {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            \"docs/UserGuide.adoc\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            \"collated/codeeong.md\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            \"C:\\\\Program Files\\\\RepoSense\\\\README.md\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            \"/this/is/not/a/md/file.txt\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        };"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        List\u003cString\u003e ignoreGlobList \u003d new ArrayList\u003c\u003e(Arrays.asList(ignoreGlobs));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        ignoreGlobList.addAll(Arrays.asList(moreIgnoreGlobs));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        author.setIgnoreGlobList(Arrays.asList(ignoreGlobs));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        author.appendIgnoreGlobList(Arrays.asList(moreIgnoreGlobs));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertEquals(4, author.getIgnoreGlobList().size());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(author.getIgnoreGlobList().containsAll(ignoreGlobList));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Arrays.stream(testPaths).forEach(value -\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                Assert.assertTrue(author.getIgnoreGlobMatcher().matches(Paths.get(value))));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test(expected \u003d IllegalArgumentException.class)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void appendIgnoreGlobList_appendOrOperator_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Author author \u003d new Author(\"Tester\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String[] ignoreGlobs \u003d new String[] {\"**[!(.md)] | rm -rf /\", \"C:\\\\Program Files\\\\**\"};"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        author.appendIgnoreGlobList(Arrays.asList(ignoreGlobs));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 97
    }
  },
  {
    "path": "src/test/java/reposense/model/StandaloneConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import com.google.gson.JsonSyntaxException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.parser.StandaloneConfigJsonParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.template.GitTestTemplate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class StandaloneConfigTest extends GitTestTemplate {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final Path VALID_CONFIG \u003d new File(StandaloneConfigTest.class.getClassLoader()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            .getResource(\"StandaloneConfigTest/valid_config.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final Path INVALID_IGNOREGLOB_CONFIG \u003d new File(StandaloneConfigTest.class.getClassLoader()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            .getResource(\"StandaloneConfigTest/lithiumlkid_invalidIgnoreGlob_config.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path INVALID_FORMATS_CONFIG \u003d new File(StandaloneConfigTest.class.getClassLoader()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            .getResource(\"StandaloneConfigTest/invalidFormats_config.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Path INVALID_IGNORECOMMIT_CONFIG \u003d new File(StandaloneConfigTest.class.getClassLoader()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            .getResource(\"StandaloneConfigTest/invalidIgnoreCommit_config.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Path SPECIAL_CHARACTER_AUTHOR_CONFIG \u003d new File(StandaloneConfigTest.class.getClassLoader()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            .getResource(\"StandaloneConfigTest/specialCharacterAuthor_config.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path AUTHORS_TRAILING_COMMAS_CONFIG \u003d new File(StandaloneConfigTest.class.getClassLoader()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            .getResource(\"StandaloneConfigTest/authors_trailingCommas_config.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path LITHIUMLKID_TRAILING_COMMAS_CONFIG \u003d new File(StandaloneConfigTest.class.getClassLoader()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            .getResource(\"StandaloneConfigTest/lithiumlkid_trailingCommas_config.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Author FIRST_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"‘Processed�‘Cooked�\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Author SECOND_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"(codeeong)\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Author THIRD_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"^:jordancjq;$\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final List\u003cAuthor\u003e AUTHOR_CONFIG_SPECIAL_CHARACTER_AUTHORS \u003d Arrays.asList("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            FIRST_SPECIAL_CHARACTER_AUTHOR, SECOND_SPECIAL_CHARACTER_AUTHOR, THIRD_SPECIAL_CHARACTER_AUTHOR);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static StandaloneConfig VALID_STANDALONE_CONFIG;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public static void setUp() throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        VALID_STANDALONE_CONFIG \u003d new StandaloneConfigJsonParser().parse(VALID_CONFIG);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void standaloneConfig_validJson_success() throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(VALID_CONFIG);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.update(standaloneConfig);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void standaloneConfig_specialCharacterAuthor_success() throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(SPECIAL_CHARACTER_AUTHOR_CONFIG);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.update(standaloneConfig);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(AUTHOR_CONFIG_SPECIAL_CHARACTER_AUTHORS, config.getAuthorList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void standaloneConfig_trailingCommasInList_success() throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(AUTHORS_TRAILING_COMMAS_CONFIG);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        config.update(standaloneConfig);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(VALID_STANDALONE_CONFIG, standaloneConfig);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test(expected \u003d JsonSyntaxException.class)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void standaloneConfig_trailingCommasInMaps_throwsJsonSyntaxException() throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        new StandaloneConfigJsonParser().parse(LITHIUMLKID_TRAILING_COMMAS_CONFIG);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test(expected \u003d IllegalArgumentException.class)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void standaloneConfig_invalidIgnoreGlob_throwIllegalArgumentException() throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(INVALID_IGNOREGLOB_CONFIG);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.update(standaloneConfig);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test(expected \u003d IllegalArgumentException.class)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void standaloneConfig_invalidFormats_throwIllegalArgumentException() throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(INVALID_FORMATS_CONFIG);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        config.update(standaloneConfig);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test(expected \u003d IllegalArgumentException.class)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void standaloneConfig_invalidIgnoreCommit_throwIllegalArgumentException() throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        StandaloneConfig standaloneConfig \u003d new StandaloneConfigJsonParser().parse(INVALID_IGNORECOMMIT_CONFIG);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        config.update(standaloneConfig);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 23,
      "yong24s": 35,
      "eugenepeh": 34
    }
  },
  {
    "path": "src/test/java/reposense/parser/ArgsParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yong24s"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import static org.apache.tools.ant.types.Commandline.translateCommandline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.RepoSense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.CliArguments;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.ConfigCliArguments;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Format;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.LocationsCliArguments;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.ViewCliArguments;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.util.TestUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yong24s"
        },
        "content": "public class ArgsParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path PROJECT_DIRECTORY \u003d Paths.get(System.getProperty(\"user.dir\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path CONFIG_FOLDER_ABSOLUTE \u003d new File(ArgsParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            .getResource(\"cli_location_test\").getFile()).toPath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path OUTPUT_DIRECTORY_ABSOLUTE \u003d new File(ArgsParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            .getResource(\"output\").getFile()).toPath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path CONFIG_FOLDER_RELATIVE \u003d PROJECT_DIRECTORY.relativize(CONFIG_FOLDER_ABSOLUTE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path OUTPUT_DIRECTORY_RELATIVE \u003d PROJECT_DIRECTORY.relativize(OUTPUT_DIRECTORY_ABSOLUTE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final String DEFAULT_MANDATORY_ARGS \u003d \"-config \" + CONFIG_FOLDER_ABSOLUTE + \" \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path REPO_CONFIG_CSV_FILE \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            CONFIG_FOLDER_ABSOLUTE.resolve(RepoConfigCsvParser.REPO_CONFIG_FILENAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path AUTHOR_CONFIG_CSV_FILE \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            CONFIG_FOLDER_ABSOLUTE.resolve(AuthorConfigCsvParser.AUTHOR_CONFIG_FILENAME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final String TEST_REPO_REPOSENSE \u003d \"https://github.com/reposense/RepoSense.git\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final String TEST_REPO_BETA \u003d \"https://github.com/reposense/testrepo-Beta.git\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final String TEST_REPO_CHARLIE \u003d \"https://github.com/reposense/testrepo-Charlie.git\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final String TEST_REPO_DELTA \u003d \"https://github.com/reposense/testrepo-Delta.git\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void parse_allCorrectInputs_success() throws ParseException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d String.format(\"-config %s -output %s -since 01/07/2017 -until 30/11/2017 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"-formats java adoc html css js --ignore-standalone-config -view\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                CONFIG_FOLDER_ABSOLUTE, OUTPUT_DIRECTORY_ABSOLUTE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                OUTPUT_DIRECTORY_ABSOLUTE.resolve(ArgsParser.DEFAULT_REPORT_NAME), cliArguments.getOutputFilePath()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Date expectedSinceDate \u003d TestUtil.getDate(2017, Calendar.JULY, 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Date expectedUntilDate \u003d TestUtil.getDate(2017, Calendar.NOVEMBER, 30);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(expectedSinceDate, cliArguments.getSinceDate().get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(expectedUntilDate, cliArguments.getUntilDate().get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFormat\u003e expectedFormats \u003d Format.convertStringsToFormats("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(\"java\", \"adoc\", \"html\", \"css\", \"js\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(expectedFormats, cliArguments.getFormats());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void parse_withExtraWhitespaces_success() throws ParseException, IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d String.format(\"-config %s      -output   %s   -since 01/07/2017   -until    30/11/2017   \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"-formats     java   adoc     html css js    -view    -isac  \","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                CONFIG_FOLDER_ABSOLUTE, OUTPUT_DIRECTORY_ABSOLUTE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                OUTPUT_DIRECTORY_ABSOLUTE.resolve(ArgsParser.DEFAULT_REPORT_NAME), cliArguments.getOutputFilePath()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Date expectedSinceDate \u003d TestUtil.getDate(2017, Calendar.JULY, 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Date expectedUntilDate \u003d TestUtil.getDate(2017, Calendar.NOVEMBER, 30);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(expectedSinceDate, cliArguments.getSinceDate().get());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(expectedUntilDate, cliArguments.getUntilDate().get());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFormat\u003e expectedFormats \u003d Format.convertStringsToFormats(Arrays.asList("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \"java\", \"adoc\", \"html\", \"css\", \"js\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(expectedFormats, cliArguments.getFormats());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void parse_configFolderOnly_success() throws ParseException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d String.format(\"-config %s\", CONFIG_FOLDER_ABSOLUTE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        // Optional arguments have default values"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(Optional.empty(), cliArguments.getSinceDate());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(Optional.empty(), cliArguments.getUntilDate());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(ArgsParser.DEFAULT_REPORT_NAME, cliArguments.getOutputFilePath().getFileName().toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(Format.DEFAULT_FORMATS, cliArguments.getFormats());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        input \u003d String.format(\"-config %s\", CONFIG_FOLDER_RELATIVE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        // Optional arguments have default values"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(Optional.empty(), cliArguments.getSinceDate());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(Optional.empty(), cliArguments.getUntilDate());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(ArgsParser.DEFAULT_REPORT_NAME, cliArguments.getOutputFilePath().getFileName().toString());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(Format.DEFAULT_FORMATS, cliArguments.getFormats());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    public void parse_viewOnly_success() throws ParseException, IOException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        String input \u003d String.format(\"-view %s\", OUTPUT_DIRECTORY_ABSOLUTE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ViewCliArguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                OUTPUT_DIRECTORY_ABSOLUTE, ((ViewCliArguments) cliArguments).getReportDirectoryPath()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_withIgnore_success() throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d String.format(\"-repos \\\"%s\\\" %s --ignore-standalone-config\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String inputWithAlias \u003d String.format(\"-repos \\\"%s\\\" %s -isac\", TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArgumentsWithAlias \u003d ArgsParser.parse(translateCommandline(inputWithAlias));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof LocationsCliArguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArgumentsWithAlias instanceof LocationsCliArguments);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(((LocationsCliArguments) cliArguments).isStandaloneConfigIgnored());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(((LocationsCliArguments) cliArgumentsWithAlias).isStandaloneConfigIgnored());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(cliArguments, cliArgumentsWithAlias);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_withoutIgnore_success() throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d String.format(\"-repos \\\"%s\\\" %s\", TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof LocationsCliArguments);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(((LocationsCliArguments) cliArguments).isStandaloneConfigIgnored());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_viewOnlyWithoutArgs_returnsConfigCliArguments() throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d \"-view\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(PROJECT_DIRECTORY.toString(), ("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                (ConfigCliArguments) cliArguments).getConfigFolderPath().toString());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void parse_configFolderAndOutputDirectory_success() throws ParseException, IOException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Path expectedRelativeOutputDirectoryPath \u003d OUTPUT_DIRECTORY_RELATIVE.resolve(ArgsParser.DEFAULT_REPORT_NAME);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Path expectedAbsoluteOutputDirectoryPath \u003d OUTPUT_DIRECTORY_ABSOLUTE.resolve(ArgsParser.DEFAULT_REPORT_NAME);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d String.format(\"-config %s -output %s\", CONFIG_FOLDER_ABSOLUTE, OUTPUT_DIRECTORY_RELATIVE);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(Files.isSameFile(expectedRelativeOutputDirectoryPath, cliArguments.getOutputFilePath()));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        input \u003d String.format(\"-config %s -output %s\", CONFIG_FOLDER_RELATIVE, OUTPUT_DIRECTORY_ABSOLUTE);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(Files.isSameFile(expectedAbsoluteOutputDirectoryPath, cliArguments.getOutputFilePath()));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_configFolderandViewWithouthArgs_returnsConfigCliArguments() throws ParseException, IOException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d String.format(\"-config %s -view\", CONFIG_FOLDER_ABSOLUTE);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        input \u003d String.format(\"-config %s -view\", CONFIG_FOLDER_RELATIVE);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                REPO_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getRepoConfigFilePath()));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                AUTHOR_CONFIG_CSV_FILE, ((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_configFolderAndViewWithArgs_returnsViewCliArguments() throws ParseException, IOException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d String.format(\"-config %s -view %s\", CONFIG_FOLDER_ABSOLUTE, OUTPUT_DIRECTORY_ABSOLUTE);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ViewCliArguments);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                OUTPUT_DIRECTORY_ABSOLUTE, ((ViewCliArguments) cliArguments).getReportDirectoryPath()));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void sinceDate_correctFormat_success() throws ParseException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String sinceDate \u003d \"01/07/2017\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d DEFAULT_MANDATORY_ARGS + String.format(\"-since %s\", sinceDate);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Date expectedSinceDate \u003d TestUtil.getDate(2017, Calendar.JULY, 1);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(expectedSinceDate, cliArguments.getSinceDate().get());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void untilDate_correctFormat_success() throws ParseException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String untilDate \u003d \"30/11/2017\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d DEFAULT_MANDATORY_ARGS + String.format(\"-until %s\", untilDate);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Date expectedUntilDate \u003d TestUtil.getDate(2017, Calendar.NOVEMBER, 30);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(expectedUntilDate, cliArguments.getUntilDate().get());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void formats_inAlphanumeric_success() throws ParseException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String formats \u003d \"java js css 7z\";"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d DEFAULT_MANDATORY_ARGS + String.format(\"-formats %s\", formats);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cFormat\u003e expectedFormats \u003d Format.convertStringsToFormats(Arrays.asList(\"java\", \"js\", \"css\", \"7z\"));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(expectedFormats, cliArguments.getFormats());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void parse_validGitRepoLocations_repoConfigurationListCorrectSize() throws ParseException, IOException {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d String.format(\"-repos \\\"%s\\\" %s\", TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof LocationsCliArguments);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cRepoConfiguration\u003e repoConfigs \u003d RepoSense.getRepoConfigurations((LocationsCliArguments) cliArguments);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(2, repoConfigs.size());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_repoLocationsAndView_returnsLocationCliArguments() throws ParseException {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d String.format(\"-repos \\\"%s\\\" %s -view\", TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof LocationsCliArguments);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e expectedLocations \u003d Arrays.asList(TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedLocations, ((LocationsCliArguments) cliArguments).getLocations());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_repoLocationsOnly_success() throws ParseException {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d String.format(\"-repos \\\"%s\\\" %s\", TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof LocationsCliArguments);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertFalse(cliArguments.isAutomaticallyLaunching());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e expectedLocations \u003d Arrays.asList(TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedLocations, ((LocationsCliArguments) cliArguments).getLocations());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_repoLocationsAndViewWithArgs_returnsViewCliArguments() throws ParseException, IOException {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d String.format(\"-repos \\\"%s\\\" %s -view %s\","
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "                TEST_REPO_REPOSENSE, TEST_REPO_DELTA, OUTPUT_DIRECTORY_ABSOLUTE);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ViewCliArguments);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "                OUTPUT_DIRECTORY_ABSOLUTE, ((ViewCliArguments) cliArguments).getReportDirectoryPath()));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_repoLocationsAndViewWithArgCwd_returnsViewCliArguments() throws ParseException {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d String.format(\"-repos \\\"%s\\\" %s -view .\", TEST_REPO_REPOSENSE, TEST_REPO_DELTA);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ViewCliArguments);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void parse_configOrLocationsSimilar_success() throws ParseException, IOException {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d String.format(\"-config %s\", CONFIG_FOLDER_ABSOLUTE);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments configCliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(configCliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualRepoConfigs \u003d"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                RepoSense.getRepoConfigurations((ConfigCliArguments) configCliArguments);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        input \u003d String.format(\"-repos \\\"%s\\\" %s %s\", TEST_REPO_BETA, TEST_REPO_CHARLIE, TEST_REPO_DELTA);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments locationCliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(locationCliArguments instanceof LocationsCliArguments);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cRepoConfiguration\u003e expectedRepoConfigs \u003d"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                RepoSense.getRepoConfigurations((LocationsCliArguments) locationCliArguments);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(actualRepoConfigs, expectedRepoConfigs);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyArgs_defaultConfigFolderPath() throws ParseException, IOException {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(new String[]{});"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(PROJECT_DIRECTORY.toString(), ("
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "                (ConfigCliArguments) cliArguments).getConfigFolderPath().toString());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void parse_repoAliases_sameResult() throws ParseException, IOException {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d String.format(\"-repos %s\", TEST_REPO_BETA);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments repoAliasCliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        input \u003d String.format(\"-repo %s\", TEST_REPO_BETA);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments reposAliasCliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(repoAliasCliArguments, reposAliasCliArguments);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void parse_invalidRepoLocation_emptyRepoConfigurationList() throws ParseException, IOException {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d String.format(\"-repos %s\", \"https://githubaaaa.com/asdasdasdasd/RepoSense\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof LocationsCliArguments);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cRepoConfiguration\u003e repoConfigs \u003d RepoSense.getRepoConfigurations((LocationsCliArguments) cliArguments);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertTrue(repoConfigs.isEmpty());"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void absoluteConfigFolder_withoutRequiredConfigFiles_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String absDirectory \u003d PROJECT_DIRECTORY.getParent().toString();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d String.format(\"-config %s\", absDirectory);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void relativeConfigFolder_withoutRequiredConfigFiles_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String relDirectory \u003d PROJECT_DIRECTORY.getParent().toString();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d String.format(\"-config %s\", relDirectory);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void parse_notExistsConfigFolder_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String absConfigFolder \u003d PROJECT_DIRECTORY.resolve(\"non_existing_random_folder\").toString();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d String.format(\"-config %s\", absConfigFolder);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void parse_configCsvFileAsConfigFolder_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d String.format(\"-config %s\", REPO_CONFIG_CSV_FILE);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void parse_missingConfigValue_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d \"-config\";"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    public void outputPath_nonExistentDirectory_success() throws ParseException, IOException {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String nonExistentDirectory \u003d PROJECT_DIRECTORY.resolve(\"some_non_existent_dir/\").toString();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        Path expectedRelativeOutputDirectoryPath \u003d Paths.get(nonExistentDirectory)"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "                .resolve(ArgsParser.DEFAULT_REPORT_NAME);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d DEFAULT_MANDATORY_ARGS + String.format(\"-output %s\", nonExistentDirectory);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(cliArguments instanceof ConfigCliArguments);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertTrue(Files.isSameFile("
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedRelativeOutputDirectoryPath, cliArguments.getOutputFilePath()));"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void sinceDate_unsupportedFormats_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String sinceDate \u003d \"01 July 17\";"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d DEFAULT_MANDATORY_ARGS + String.format(\"-since %s\", sinceDate);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void untilDate_unsupportedFormats_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String untilDate \u003d \"11/31/2017\";"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d DEFAULT_MANDATORY_ARGS + String.format(\"-until %s\", untilDate);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void sinceDate_laterThanUntilDate_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String sinceDate \u003d \"01/12/2017\";"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String untilDate \u003d \"30/11/2017\";"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d DEFAULT_MANDATORY_ARGS + String.format(\"-since %s -until %s\", sinceDate, untilDate);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void formats_notInAlphanumeric_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String formats \u003d \".java\";"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d DEFAULT_MANDATORY_ARGS + String.format(\"-formats %s\", formats);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void parse_mutuallyExclusiveArgumentsConfigAndReposTogether_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d String.format(\"-config %s -repos %s\", CONFIG_FOLDER_ABSOLUTE, TEST_REPO_REPOSENSE);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test(expected \u003d ParseException.class)"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_extraArgumentForIgnore_throwsParseException() throws ParseException {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d String.format(\"-config %s --ignore-standalone-config true\", CONFIG_FOLDER_ABSOLUTE);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "yong24s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdityaA1998": 7,
      "yong24s": 286,
      "yamidark": 1,
      "-": 151
    }
  },
  {
    "path": "src/test/java/reposense/parser/CsvParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yong24s"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import static org.apache.tools.ant.types.Commandline.translateCommandline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.CliArguments;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CommitHash;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.ConfigCliArguments;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Format;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.util.TestUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yong24s"
        },
        "content": "public class CsvParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path TEST_CONFIG_FOLDER \u003d new File(CsvParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            .getResource(\"repoconfig_merge_test\").getFile()).toPath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_EMPTY_BRANCH_CONFIG_FOLDER \u003d new File(CsvParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"repoconfig_empty_branch_test\").getFile()).toPath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Path REPO_CONFIG_NO_SPECIAL_CHARACTER_FILE \u003d new File(CsvParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            .getResource(\"CsvParserTest/repoconfig_noSpecialCharacter_test.csv\").getFile()).toPath();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path AUTHOR_CONFIG_EMPTY_LOCATION_FILE \u003d new File(CsvParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"CsvParserTest/authorconfig_emptyLocation_test.csv\").getFile()).toPath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Path AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_FILE \u003d new File(CsvParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            .getResource(\"CsvParserTest/authorconfig_noSpecialCharacter_test.csv\").getFile()).toPath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Path AUTHOR_CONFIG_SPECIAL_CHARACTER_FILE \u003d new File(CsvParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            .getResource(\"CsvParserTest/authorconfig_specialCharacter_test.csv\").getFile()).toPath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final Path AUTHOR_CONFIG_MULTIPLE_EMAILS_FILE \u003d new File(CsvParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            .getResource(\"CsvParserTest/authorconfig_multipleEmails_test.csv\").getFile()).toPath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MERGE_EMPTY_LOCATION_FOLDER \u003d new File(CsvParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .getResource(\"CsvParserTest/repoconfig_merge_empty_location_test\").getFile()).toPath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final String TEST_REPO_BETA_LOCATION \u003d \"https://github.com/reposense/testrepo-Beta.git\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final String TEST_REPO_BETA_BRANCH \u003d \"master\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_DELTA_LOCATION \u003d \"https://github.com/reposense/testrepo-Delta.git\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_DELTA_BRANCH \u003d \"HEAD\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cFormat\u003e TEST_REPO_DELTA_FORMATS \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            Format.convertStringsToFormats(Arrays.asList(\"java\", \"fxml\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final List\u003cString\u003e TEST_REPO_BETA_CONFIG_FORMATS \u003d Arrays.asList(\"java\", \"adoc\", \"md\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final List\u003cString\u003e TEST_REPO_BETA_CONFIG_IGNORED_COMMITS \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            Arrays.asList(\"abcde12345\", \"67890fdecba\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Author FIRST_AUTHOR \u003d new Author(\"nbriannl\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Author SECOND_AUTHOR \u003d new Author(\"zacharytang\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e SECOND_AUTHOR_ALIASES \u003d Arrays.asList(\"Zachary Tang\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final List\u003cAuthor\u003e AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_AUTHORS \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            Arrays.asList(FIRST_AUTHOR, SECOND_AUTHOR);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Author FIRST_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"‘Processed�‘Cooked�\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Author SECOND_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"(codeeong)\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final Author THIRD_SPECIAL_CHARACTER_AUTHOR \u003d new Author(\"^:jordancjq;$\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static final List\u003cAuthor\u003e AUTHOR_CONFIG_SPECIAL_CHARACTER_AUTHORS \u003d Arrays.asList("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            FIRST_SPECIAL_CHARACTER_AUTHOR, SECOND_SPECIAL_CHARACTER_AUTHOR, THIRD_SPECIAL_CHARACTER_AUTHOR);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final List\u003cString\u003e REPO_LEVEL_GLOB_LIST \u003d Arrays.asList(\"collated**\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e FIRST_AUTHOR_GLOB_LIST \u003d Arrays.asList(\"**.java\", \"collated**\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final List\u003cString\u003e FIRST_AUTHOR_EMAIL_LIST \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            Arrays.asList(\"nbr@example.com\", \"nbriannl@test.net\", \"nbriannl@users.noreply.github.com\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void repoConfig_noSpecialCharacter_success() throws IOException, InvalidLocationException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        RepoConfigCsvParser repoConfigCsvParser \u003d new RepoConfigCsvParser(REPO_CONFIG_NO_SPECIAL_CHARACTER_FILE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cRepoConfiguration\u003e configs \u003d repoConfigCsvParser.parse();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(1, configs.size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        RepoConfiguration config \u003d configs.get(0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(TEST_REPO_BETA_BRANCH, config.getBranch());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(TEST_REPO_BETA_CONFIG_FORMATS, TEST_REPO_BETA_CONFIG_FORMATS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertTrue(config.isStandaloneConfigIgnored());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(config.getIgnoreCommitList(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                CommitHash.convertStringsToCommits(TEST_REPO_BETA_CONFIG_IGNORED_COMMITS));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void authorConfig_noSpecialCharacter_success() throws IOException, InvalidLocationException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        AuthorConfigCsvParser authorConfigCsvParser \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yamidark"
        },
        "content": "                new AuthorConfigCsvParser(AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_FILE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cRepoConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(1, configs.size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        RepoConfiguration config \u003d configs.get(0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(TEST_REPO_BETA_BRANCH, config.getBranch());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_AUTHORS, config.getAuthorList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void authorConfig_emptyLocation_success() throws ParseException, IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(\"\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_EMPTY_LOCATION_FILE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e authorConfigs \u003d authorConfigCsvParser.parse();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration authorConfig \u003d authorConfigs.get(0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(1, authorConfigs.size());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedConfig, authorConfig);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(AUTHOR_CONFIG_NO_SPECIAL_CHARACTER_AUTHORS, authorConfig.getAuthorList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void authorConfig_specialCharacter_success() throws IOException, InvalidLocationException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_SPECIAL_CHARACTER_FILE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        List\u003cRepoConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(1, configs.size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        RepoConfiguration config \u003d configs.get(0);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(new RepoLocation(TEST_REPO_BETA_LOCATION), config.getLocation());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(TEST_REPO_BETA_BRANCH, config.getBranch());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(AUTHOR_CONFIG_SPECIAL_CHARACTER_AUTHORS, config.getAuthorList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void authorConfig_multipleEmails_success() throws IOException, InvalidLocationException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        AuthorConfigCsvParser authorConfigCsvParser \u003d new AuthorConfigCsvParser(AUTHOR_CONFIG_MULTIPLE_EMAILS_FILE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        List\u003cRepoConfiguration\u003e configs \u003d authorConfigCsvParser.parse();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertEquals(1, configs.size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        RepoConfiguration config \u003d configs.get(0);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Author actualAuthor \u003d config.getAuthorList().get(0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertEquals(FIRST_AUTHOR_EMAIL_LIST.size(), actualAuthor.getEmails().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertTrue(actualAuthor.getEmails().containsAll(FIRST_AUTHOR_EMAIL_LIST));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void merge_twoRepoConfigs_success() throws ParseException, IOException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        FIRST_AUTHOR.setIgnoreGlobList(FIRST_AUTHOR_GLOB_LIST);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        SECOND_AUTHOR.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        SECOND_AUTHOR.setAuthorAliases(SECOND_AUTHOR_ALIASES);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cAuthor\u003e expectedAuthors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        expectedAuthors.add(FIRST_AUTHOR);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        expectedAuthors.add(SECOND_AUTHOR);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_BETA_LOCATION),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                TEST_REPO_BETA_BRANCH);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        expectedConfig.setAuthorList(expectedAuthors);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        expectedConfig.setAuthorDisplayName(FIRST_AUTHOR, \"Nbr\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        expectedConfig.setAuthorDisplayName(SECOND_AUTHOR, \"Zac\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        expectedConfig.addAuthorEmailsAndAliasesMapEntry(SECOND_AUTHOR,  Arrays.asList(\"Zachary Tang\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        expectedConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d String.format(\"-config %s\", TEST_CONFIG_FOLDER);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cRepoConfiguration\u003e authorConfigs \u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        RepoConfiguration.merge(actualConfigs, authorConfigs);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(1, actualConfigs.size());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUtil.compareRepoConfig(expectedConfig, actualConfigs.get(0));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void merge_emptyLocation_success() throws ParseException, IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        FIRST_AUTHOR.setIgnoreGlobList(FIRST_AUTHOR_GLOB_LIST);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        SECOND_AUTHOR.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        SECOND_AUTHOR.setAuthorAliases(SECOND_AUTHOR_ALIASES);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthor\u003e expectedBetaAuthors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedBetaAuthors.add(FIRST_AUTHOR);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedBetaAuthors.add(SECOND_AUTHOR);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cAuthor\u003e expectedDeltaAuthors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedDeltaAuthors.add(FIRST_AUTHOR);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration expectedBetaConfig \u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfiguration(new RepoLocation(TEST_REPO_BETA_LOCATION), TEST_REPO_BETA_BRANCH);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedBetaConfig.setAuthorList(expectedBetaAuthors);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedBetaConfig.setAuthorDisplayName(FIRST_AUTHOR, \"Nbr\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedBetaConfig.setAuthorDisplayName(SECOND_AUTHOR, \"Zac\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        expectedBetaConfig.addAuthorEmailsAndAliasesMapEntry(SECOND_AUTHOR,  Arrays.asList(\"Zachary Tang\"));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedBetaConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration expectedDeltaConfig \u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA_LOCATION), TEST_REPO_DELTA_BRANCH);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedDeltaConfig.setAuthorList(expectedDeltaAuthors);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedDeltaConfig.setAuthorDisplayName(FIRST_AUTHOR, \"Nbr\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedDeltaConfig.setStandaloneConfigIgnored(true);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedDeltaConfig.setFormats(TEST_REPO_DELTA_FORMATS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e expectedConfigs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfigs.add(expectedBetaConfig);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfigs.add(expectedDeltaConfig);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d String.format(\"-config %s\", MERGE_EMPTY_LOCATION_FOLDER);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e authorConfigs \u003d"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration.merge(actualConfigs, authorConfigs);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(2, actualConfigs.size());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedConfigs, actualConfigs);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUtil.compareRepoConfig(expectedConfigs.get(0), actualConfigs.get(0));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUtil.compareRepoConfig(expectedConfigs.get(1), actualConfigs.get(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public void repoConfig_defaultBranch_success() throws ParseException, IOException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_BETA_LOCATION),"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                RepoConfiguration.DEFAULT_BRANCH);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d String.format(\"-config %s\", TEST_EMPTY_BRANCH_CONFIG_FOLDER);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e authorConfigs \u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration.merge(actualConfigs, authorConfigs);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(1, actualConfigs.size());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedConfig.getBranch(), actualConfigs.get(0).getBranch());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedConfig.getBranch(), authorConfigs.get(0).getBranch());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yong24s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yong24s": 57,
      "yamidark": 61,
      "eugenepeh": 20,
      "-": 108
    }
  },
  {
    "path": "src/test/java/reposense/parser/RepoConfigurationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import static org.apache.tools.ant.types.Commandline.translateCommandline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.RepoSense;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.git.GitClone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.git.GitCloneException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.CliArguments;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.ConfigCliArguments;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Format;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.LocationsCliArguments;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.report.ReportGenerator;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.util.FileUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.util.TestUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class RepoConfigurationTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path IGNORE_STANDALONE_TEST_CONFIG_FILES \u003d new File(CsvParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            .getResource(\"RepoConfigurationTest/repoconfig_ignoreStandAlone_test\").getFile()).toPath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path IGNORE_STANDALONE_KEYWORD_TEST_CONFIG_FILES \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            new File(CsvParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                    .getResource(\"RepoConfigurationTest/repoconfig_ignoreStandAloneKeyword_test\").getFile()).toPath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path FORMATS_TEST_CONFIG_FILES \u003d new File(CsvParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            .getResource(\"RepoConfigurationTest/repoconfig_formats_test\").getFile()).toPath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path WITHOUT_FORMATS_TEST_CONFIG_FILES \u003d new File(CsvParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            .getResource(\"RepoConfigurationTest/repoconfig_withoutformats_test\").getFile()).toPath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_REPO_DELTA \u003d \"https://github.com/reposense/testrepo-Delta.git\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author FIRST_AUTHOR \u003d new Author(\"lithiumlkid\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author SECOND_AUTHOR \u003d new Author(\"codeeong\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author THIRD_AUTHOR \u003d new Author(\"jordancjq\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Author FOURTH_AUTHOR \u003d new Author(\"lohtianwei\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final List\u003cString\u003e FIRST_AUTHOR_ALIASES \u003d Collections.singletonList(\"Ahmad Syafiq\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final List\u003cString\u003e SECOND_AUTHOR_ALIASES \u003d Collections.emptyList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final List\u003cString\u003e THIRD_AUTHOR_ALIASES \u003d Collections.singletonList(\"Jordan Chong\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final List\u003cString\u003e FOURTH_AUTHOR_ALIASES \u003d Collections.singletonList(\"Tianwei\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final List\u003cString\u003e REPO_LEVEL_GLOB_LIST \u003d Collections.singletonList(\"collated**\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final List\u003cString\u003e FIRST_AUTHOR_GLOB_LIST \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            Arrays.asList(\"*.aa1\", \"**.aa2\", \"**.java\", \"collated**\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final List\u003cString\u003e SECOND_AUTHOR_GLOB_LIST \u003d Arrays.asList(\"\", \"collated**\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final List\u003cString\u003e THIRD_AUTHOR_GLOB_LIST \u003d Arrays.asList(\"**[!(.md)]\", \"collated**\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final List\u003cString\u003e FOURTH_AUTHOR_GLOB_LIST \u003d Collections.singletonList(\"collated**\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cFormat\u003e CONFIG_FORMATS \u003d Format.convertStringsToFormats(Arrays.asList("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            \"java\", \"adoc\", \"md\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final List\u003cString\u003e CLI_FORMATS \u003d Arrays.asList(\"css\", \"html\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static RepoConfiguration REPO_DELTA_STANDALONE_CONFIG;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public static void setUp() throws InvalidLocationException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        FIRST_AUTHOR.setAuthorAliases(FIRST_AUTHOR_ALIASES);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        SECOND_AUTHOR.setAuthorAliases(SECOND_AUTHOR_ALIASES);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        THIRD_AUTHOR.setAuthorAliases(THIRD_AUTHOR_ALIASES);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        FOURTH_AUTHOR.setAuthorAliases(FOURTH_AUTHOR_ALIASES);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        FIRST_AUTHOR.setIgnoreGlobList(FIRST_AUTHOR_GLOB_LIST);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        SECOND_AUTHOR.setIgnoreGlobList(SECOND_AUTHOR_GLOB_LIST);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        THIRD_AUTHOR.setIgnoreGlobList(THIRD_AUTHOR_GLOB_LIST);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        FOURTH_AUTHOR.setIgnoreGlobList(FOURTH_AUTHOR_GLOB_LIST);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cAuthor\u003e expectedAuthors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        expectedAuthors.add(FIRST_AUTHOR);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        expectedAuthors.add(SECOND_AUTHOR);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        expectedAuthors.add(THIRD_AUTHOR);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        expectedAuthors.add(FOURTH_AUTHOR);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        REPO_DELTA_STANDALONE_CONFIG \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        REPO_DELTA_STANDALONE_CONFIG.setAuthorList(expectedAuthors);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        REPO_DELTA_STANDALONE_CONFIG.addAuthorEmailsAndAliasesMapEntry(FIRST_AUTHOR, FIRST_AUTHOR_ALIASES);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        REPO_DELTA_STANDALONE_CONFIG.addAuthorEmailsAndAliasesMapEntry(FOURTH_AUTHOR, FOURTH_AUTHOR_ALIASES);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        REPO_DELTA_STANDALONE_CONFIG.setAuthorDisplayName(FIRST_AUTHOR, \"Ahm\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        REPO_DELTA_STANDALONE_CONFIG.setAuthorDisplayName(SECOND_AUTHOR, \"Cod\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        REPO_DELTA_STANDALONE_CONFIG.setAuthorDisplayName(THIRD_AUTHOR, \"Jor\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        REPO_DELTA_STANDALONE_CONFIG.setAuthorDisplayName(FOURTH_AUTHOR, \"Loh\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        SECOND_AUTHOR.setEmails(Arrays.asList(\"codeeong@gmail.com\", \"33129797+codeeong@users.noreply.github.com\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        for (Author author : expectedAuthors) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            REPO_DELTA_STANDALONE_CONFIG.addAuthorEmailsAndAliasesMapEntry(author, author.getEmails());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        REPO_DELTA_STANDALONE_CONFIG.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        REPO_DELTA_STANDALONE_CONFIG.setFormats(CONFIG_FORMATS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void cleanRepoDirectory() throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        FileUtil.deleteDirectory(FileUtil.REPOS_ADDRESS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void repoConfig_usesStandaloneConfig_success() throws GitCloneException, InvalidLocationException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration actualConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitClone.clone(actualConfig);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        ReportGenerator.updateRepoConfig(actualConfig);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        TestUtil.compareRepoConfig(REPO_DELTA_STANDALONE_CONFIG, actualConfig);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void repoConfig_ignoresStandaloneConfig_success()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            throws ParseException, GitCloneException, IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cAuthor\u003e expectedAuthors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Author author \u003d new Author(FIRST_AUTHOR);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        author.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        expectedAuthors.add(author);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        expectedConfig.setAuthorList(expectedAuthors);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        expectedConfig.addAuthorEmailsAndAliasesMapEntry(author, FIRST_AUTHOR_ALIASES);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        expectedConfig.setAuthorDisplayName(author, \"Ahm\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        expectedConfig.setIgnoreGlobList(REPO_LEVEL_GLOB_LIST);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        expectedConfig.setFormats(CONFIG_FORMATS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setStandaloneConfigIgnored(true);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String formats \u003d String.join(\" \", CLI_FORMATS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d String.format(\"-config %s -formats %s\", IGNORE_STANDALONE_TEST_CONFIG_FILES, formats);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cRepoConfiguration\u003e authorConfigs \u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                new AuthorConfigCsvParser(((ConfigCliArguments) cliArguments).getAuthorConfigFilePath()).parse();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        RepoConfiguration.merge(actualConfigs, authorConfigs);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitClone.clone(actualConfig);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        ReportGenerator.updateRepoConfig(actualConfig);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void repoConfig_ignoresStandaloneConfigInCli_success() throws ParseException, GitCloneException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration expectedConfig \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setFormats(Format.convertStringsToFormats(CLI_FORMATS));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedConfig.setStandaloneConfigIgnored(true);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        String formats \u003d String.join(\" \", CLI_FORMATS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        String input \u003d String.format(\"-repo %s -formats %s --ignore-standalone-config\", TEST_REPO_DELTA, formats);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d RepoSense.getRepoConfigurations((LocationsCliArguments) cliArguments);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration.setFormatsToRepoConfigs(actualConfigs, cliArguments.getFormats());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        GitClone.clone(actualConfig);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        ReportGenerator.updateRepoConfig(actualConfig);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        TestUtil.compareRepoConfig(expectedConfig, actualConfig);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void repoConfig_wrongKeywordUseStandaloneConfig_success()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            throws ParseException, GitCloneException, IOException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String formats \u003d String.join(\" \", CLI_FORMATS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d String.format(\"-config %s -formats %s\", IGNORE_STANDALONE_KEYWORD_TEST_CONFIG_FILES, formats);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        RepoConfiguration actualConfig \u003d actualConfigs.get(0);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitClone.clone(actualConfig);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        ReportGenerator.updateRepoConfig(actualConfig);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        TestUtil.compareRepoConfig(REPO_DELTA_STANDALONE_CONFIG, actualConfig);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void repoConfig_withFormats_ignoreCliFormats() throws ParseException, IOException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String formats \u003d String.join(\" \", CLI_FORMATS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d String.format(\"-config %s -formats %s\", FORMATS_TEST_CONFIG_FILES, formats);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        RepoConfiguration.setFormatsToRepoConfigs(actualConfigs, cliArguments.getFormats());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(1, actualConfigs.size());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(CONFIG_FORMATS, actualConfigs.get(0).getFormats());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void repoConfig_withoutFormats_useCliFormats() throws ParseException, IOException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String formats \u003d String.join(\" \", CLI_FORMATS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d String.format(\"-config %s -formats %s\", WITHOUT_FORMATS_TEST_CONFIG_FILES, formats);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        RepoConfiguration.setFormatsToRepoConfigs(actualConfigs, cliArguments.getFormats());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(1, actualConfigs.size());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(Format.convertStringsToFormats(CLI_FORMATS), actualConfigs.get(0).getFormats());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void repoConfig_withoutFormatsAndCliFormats_useDefaultFormats() throws ParseException, IOException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        String input \u003d String.format(\"-config %s\", WITHOUT_FORMATS_TEST_CONFIG_FILES);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        CliArguments cliArguments \u003d ArgsParser.parse(translateCommandline(input));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        List\u003cRepoConfiguration\u003e actualConfigs \u003d"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                new RepoConfigCsvParser(((ConfigCliArguments) cliArguments).getRepoConfigFilePath()).parse();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        RepoConfiguration.setFormatsToRepoConfigs(actualConfigs, cliArguments.getFormats());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(1, actualConfigs.size());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(Format.DEFAULT_FORMATS, actualConfigs.get(0).getFormats());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public void repoConfig_emptyLocationDifferentBranch_equal() throws InvalidLocationException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration emptyLocationEmptyBranchRepoConfig \u003d new RepoConfiguration(new RepoLocation(\"\"), \"\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration emptyLocationDefaultBranchRepoConfig \u003d new RepoConfiguration(new RepoLocation(\"\"));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration emptyLocationWithBranchRepoConfig \u003d new RepoConfiguration(new RepoLocation(\"\"), \"master\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(emptyLocationDefaultBranchRepoConfig, emptyLocationEmptyBranchRepoConfig);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(emptyLocationWithBranchRepoConfig, emptyLocationEmptyBranchRepoConfig);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    public void repoConfig_sameLocationDifferentBranch_notEqual() throws InvalidLocationException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration validLocationValidBranchRepoConfig \u003d"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA), \"master\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration validLocationDefaultBranchRepoConfig \u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                new RepoConfiguration(new RepoLocation(TEST_REPO_DELTA));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertNotEquals(validLocationDefaultBranchRepoConfig, validLocationValidBranchRepoConfig);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yong24s": 145,
      "eugenepeh": 25,
      "-": 77
    }
  },
  {
    "path": "src/test/java/reposense/parser/StandaloneConfigJsonParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yong24s"
        },
        "content": "package reposense.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import com.google.gson.JsonSyntaxException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CommitHash;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Format;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.StandaloneConfig;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.util.TestUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yong24s"
        },
        "content": "public class StandaloneConfigJsonParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path STANDALONE_MALFORMED_CONFIG \u003d new File("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            StandaloneConfigJsonParserTest.class.getClassLoader()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            .getResource(\"StandaloneConfigJsonParserTest/standaloneConfig_malformedJson.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path STANDALONE_UNKNOWN_PROPERTY_CONFIG \u003d new File("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            StandaloneConfigJsonParserTest.class.getClassLoader().getResource("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                    \"StandaloneConfigJsonParserTest/standaloneConfig_unknownPropertyInJson.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path STANDALONE_CONFIG_FULL \u003d new File("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            StandaloneConfigJsonParserTest.class.getClassLoader().getResource("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                    \"StandaloneConfigJsonParserTest/standaloneConfig_full.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path STANDALONE_CONFIG_EMPTY_TEXT_FILE \u003d new File("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            StandaloneConfigJsonParserTest.class.getClassLoader().getResource("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                    \"StandaloneConfigJsonParserTest/standaloneConfig_emptyText.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path STANDALONE_CONFIG_EMPTY_JSON_FILE \u003d new File("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            StandaloneConfigJsonParserTest.class.getClassLoader().getResource("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                    \"StandaloneConfigJsonParserTest/standaloneConfig_emptyJson.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final Path STANDALONE_CONFIG_GITHUBID_ONLY \u003d new File("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            StandaloneConfigJsonParserTest.class.getClassLoader().getResource("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                    \"StandaloneConfigJsonParserTest/standaloneConfig_githubId_only.json\").getFile()).toPath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static final String TEST_DUMMY_LOCATION \u003d \"https://github.com/reposense/RepoSense.git\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static RepoConfiguration EXPECTED_GITHUBID_ONLY_REPOCONFIG;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private static RepoConfiguration EXPECTED_FULL_REPOCONFIG;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public static void setUp() throws InvalidLocationException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Author author \u003d new Author(\"yong24s\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        author.setAuthorAliases(Arrays.asList(\"Yong Hao TENG\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        author.setIgnoreGlobList(Arrays.asList(\"**.css\", \"**.html\", \"**.jade\", \"**.js\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        EXPECTED_GITHUBID_ONLY_REPOCONFIG \u003d new RepoConfiguration(new RepoLocation(TEST_DUMMY_LOCATION));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EXPECTED_GITHUBID_ONLY_REPOCONFIG.setFormats(Format.DEFAULT_FORMATS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        EXPECTED_GITHUBID_ONLY_REPOCONFIG.setAuthorList(Arrays.asList(new Author(\"yong24s\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        EXPECTED_GITHUBID_ONLY_REPOCONFIG.addAuthorEmailsAndAliasesMapEntry(author, author.getEmails());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        EXPECTED_FULL_REPOCONFIG \u003d new RepoConfiguration(new RepoLocation(TEST_DUMMY_LOCATION));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EXPECTED_FULL_REPOCONFIG.setFormats(Format.convertStringsToFormats("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(\"gradle\", \"jade\", \"java\", \"js\", \"md\", \"scss\", \"yml\")));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EXPECTED_FULL_REPOCONFIG.setIgnoreCommitList(Arrays.asList(new CommitHash("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \"7b96c563eb2d3612aa5275364333664a18f01491\")));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        EXPECTED_FULL_REPOCONFIG.setIgnoreGlobList(Arrays.asList(\"**.adoc\", \"collate**\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        EXPECTED_FULL_REPOCONFIG.setAuthorList(Arrays.asList(author));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        EXPECTED_FULL_REPOCONFIG.setAuthorDisplayName(author, \"Yong Hao\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        EXPECTED_FULL_REPOCONFIG.addAuthorEmailsAndAliasesMapEntry(author, Arrays.asList(author.getGitId()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        EXPECTED_FULL_REPOCONFIG.addAuthorEmailsAndAliasesMapEntry(author, author.getAuthorAliases());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        EXPECTED_FULL_REPOCONFIG.addAuthorEmailsAndAliasesMapEntry(author, author.getEmails());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void standaloneConfig_parseEmptyTextFile_success() throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        new StandaloneConfigJsonParser().parse(STANDALONE_CONFIG_EMPTY_TEXT_FILE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void standaloneConfig_parseEmptyJsonFile_success() throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        new StandaloneConfigJsonParser().parse(STANDALONE_CONFIG_EMPTY_JSON_FILE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void standaloneConfig_ignoresUnknownProperty_success() throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        new StandaloneConfigJsonParser().parse(STANDALONE_UNKNOWN_PROPERTY_CONFIG);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void standaloneConfig_correctConfig_success() throws IOException, InvalidLocationException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        StandaloneConfig config \u003d new StandaloneConfigJsonParser().parse(STANDALONE_CONFIG_FULL);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        assertSameConfig(EXPECTED_FULL_REPOCONFIG, config);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void standaloneConfig_githubIdOnlyConfig_success() throws IOException, InvalidLocationException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        StandaloneConfig config \u003d new StandaloneConfigJsonParser().parse(STANDALONE_CONFIG_GITHUBID_ONLY);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        assertSameConfig(EXPECTED_GITHUBID_ONLY_REPOCONFIG, config);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    @Test(expected \u003d JsonSyntaxException.class)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void standaloneConfig_malformedJsonFile_throwsJsonSyntaxException() throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        new StandaloneConfigJsonParser().parse(STANDALONE_MALFORMED_CONFIG);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    private void assertSameConfig(RepoConfiguration expectedRepoConfig, StandaloneConfig actualStandaloneConfig)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            throws InvalidLocationException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        RepoConfiguration actualRepoConfig \u003d new RepoConfiguration(new RepoLocation(TEST_DUMMY_LOCATION));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        actualRepoConfig.update(actualStandaloneConfig);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        TestUtil.compareRepoConfig(expectedRepoConfig, actualRepoConfig);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yong24s"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yong24s": 99,
      "eugenepeh": 4,
      "-": 11
    }
  },
  {
    "path": "src/test/java/reposense/template/GitTestTemplate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.FileInfoAnalyzer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.FileInfoExtractor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.FileInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.FileResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.authorship.model.LineInfo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.git.GitCheckout;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.git.GitClone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.git.GitCloneException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.CommitHash;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.Format;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import reposense.model.RepoLocation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.parser.InvalidLocationException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import reposense.util.FileUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class GitTestTemplate {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected static final String TEST_REPO_GIT_LOCATION \u003d \"https://github.com/reposense/testrepo-Alpha.git\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected static final String DISK_REPO_DISPLAY_NAME \u003d \"testrepo-Alpha_master\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected static final String FIRST_COMMIT_HASH \u003d \"7d7584f\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected static final String TEST_COMMIT_HASH \u003d \"2fb6b9b\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected static final String MAIN_AUTHOR_NAME \u003d \"harryggg\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected static final String FAKE_AUTHOR_NAME \u003d \"fakeAuthor\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    protected static final String EUGENE_AUTHOR_NAME \u003d \"eugenepeh\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String YONG_AUTHOR_NAME \u003d \"Yong Hao TENG\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    protected static final String LATEST_COMMIT_HASH \u003d \"136c6713fc00cfe79a1598e8ce83c6ef3b878660\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String EUGENE_AUTHOR_README_FILE_COMMIT_07052018_STRING \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            \"2d87a431fcbb8f73a731b6df0fcbee962c85c250\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final CommitHash EUGENE_AUTHOR_README_FILE_COMMIT_07052018 \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            new CommitHash(EUGENE_AUTHOR_README_FILE_COMMIT_07052018_STRING);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            \"768015345e70f06add2a8b7d1f901dc07bf70582\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final CommitHash FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018 \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            new CommitHash(FAKE_AUTHOR_BLAME_TEST_FILE_COMMIT_08022018_STRING);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final String MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018_STRING \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            \"8d0ac2ee20f04dce8df0591caed460bffacb65a4\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final CommitHash MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018 \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            new CommitHash(MAIN_AUTHOR_BLAME_TEST_FILE_COMMIT_06022018_STRING);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    protected static final String NONEXISTENT_COMMIT_HASH \u003d \"nonExistentCommitHash\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    protected static RepoConfiguration config;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void before() throws InvalidLocationException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_GIT_LOCATION), \"master\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        config.setAuthorList(Collections.singletonList(getAlphaAllAliasAuthor()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setFormats(Format.DEFAULT_FORMATS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static void beforeClass() throws GitCloneException, IOException, InvalidLocationException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteRepos();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d new RepoConfiguration(new RepoLocation(TEST_REPO_GIT_LOCATION), \"master\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setFormats(Format.DEFAULT_FORMATS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitClone.clone(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public static void afterClass() throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteRepos();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void after() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        GitCheckout.checkout(config.getRepoRoot(), \"master\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    private static void deleteRepos() throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        FileUtil.deleteDirectory(FileUtil.REPOS_ADDRESS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public FileInfo generateTestFileInfo(String relativePath) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        FileInfo fileInfo \u003d FileInfoExtractor.generateFileInfo(config.getRepoRoot(), relativePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(MAIN_AUTHOR_NAME, new Author(MAIN_AUTHOR_NAME));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        config.getAuthorEmailsAndAliasesMap().put(FAKE_AUTHOR_NAME, new Author(FAKE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return fileInfo;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public FileResult getFileResult(String relativePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        FileInfo fileinfo \u003d generateTestFileInfo(relativePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return FileInfoAnalyzer.analyzeFile(config, fileinfo);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void assertFileAnalysisCorrectness(FileResult fileResult) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        for (LineInfo line : fileResult.getLines()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            if (line.getContent().startsWith(\"fake\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                Assert.assertEquals(line.getAuthor(), new Author(FAKE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                Assert.assertNotEquals(line.getAuthor(), new Author(FAKE_AUTHOR_NAME));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Returns a {@code Author} that has git id and aliases of all authors in testrepo-Alpha, so that no commits"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * will be filtered out in the `git log` command."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    protected Author getAlphaAllAliasAuthor() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Author author \u003d new Author(MAIN_AUTHOR_NAME);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        author.setAuthorAliases(Arrays.asList(FAKE_AUTHOR_NAME, EUGENE_AUTHOR_NAME, YONG_AUTHOR_NAME));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return author;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 39,
      "yong24s": 13,
      "eugenepeh": 17,
      "-": 49
    }
  },
  {
    "path": "src/test/java/reposense/util/AssertUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import junit.framework.AssertionFailedError;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class AssertUtil {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expected} Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        assertThrows(expected, null, callable);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                                    VoidCallable callable) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            callable.call();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        } catch (Throwable actualException) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            String errorMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            if (!actualException.getClass().isAssignableFrom(expectedException)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                        expectedException.getName(), actualException.getClass().getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                errorMessage \u003d String.format("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            throw new AssertionFailedError(errorMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        throw new AssertionFailedError(String.format("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Represents a function which does not return anything and may throw an exception."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public interface VoidCallable {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        void call() throws Exception;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eugenepeh": 54
    }
  },
  {
    "path": "src/test/java/reposense/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "package reposense.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static final Path FILE_UTIL_TEST_DIRECTORY \u003d new File(FileUtilTest.class.getClassLoader()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            .getResource(\"FileUtilTest\").getFile()).toPath().toAbsolutePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static final Path ARCHIVE_ZIP_PATH \u003d Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            FileUtil.ZIP_FILE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static final Path EXPECTED_UNZIPPED_DIRECTORY_PATH \u003d Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            \"expectedUnzip\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static final Path TEST_ZIP_PATH \u003d Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(), \"testZip.zip\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    private static final Path UNZIPPED_DIRECTORY_PATH \u003d Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            \"UnzippedFolder\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    public void zip_validLocation_success() throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        FileUtil.zip(FILE_UTIL_TEST_DIRECTORY, \".json\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        Assert.assertTrue(Files.exists(ARCHIVE_ZIP_PATH));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        Assert.assertTrue(Files.size(ARCHIVE_ZIP_PATH) \u003e 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    public void zip_validFileType_success() throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        FileUtil.zip (FILE_UTIL_TEST_DIRECTORY, \".csv\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        Assert.assertTrue(Files.exists(ARCHIVE_ZIP_PATH));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        Assert.assertTrue(Files.size(ARCHIVE_ZIP_PATH) \u003e 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    public void unzip_validZipFile_success() throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        FileUtil.unzip(TEST_ZIP_PATH, UNZIPPED_DIRECTORY_PATH);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        Assert.assertTrue(Files.exists(UNZIPPED_DIRECTORY_PATH));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        Assert.assertTrue(TestUtil.compareDirectories(UNZIPPED_DIRECTORY_PATH, EXPECTED_UNZIPPED_DIRECTORY_PATH));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public void unzip_invalidZipFile_fail() throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        Path invalidZipFile \u003d Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(), \"test.csv\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        FileUtil.unzip(invalidZipFile, FILE_UTIL_TEST_DIRECTORY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        Assert.assertFalse(Files.exists(Paths.get(FILE_UTIL_TEST_DIRECTORY.toString(), \"test\")));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    public void after() throws IOException, NullPointerException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        Files.deleteIfExists(ARCHIVE_ZIP_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        if (Files.exists(UNZIPPED_DIRECTORY_PATH)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            FileUtil.deleteDirectory(UNZIPPED_DIRECTORY_PATH.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdityaA1998": 59,
      "yong24s": 1
    }
  },
  {
    "path": "src/test/java/reposense/util/StringsUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class StringsUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final Path STRINGS_UTIL_TEST_DIRECTORY \u003d new File(FileUtilTest.class.getClassLoader()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            .getResource(\"StringsUtilTest\").getFile()).toPath().toAbsolutePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    public void filterText_standardInput_success() throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Path gitBlameStandardOutputFile \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                Paths.get(STRINGS_UTIL_TEST_DIRECTORY.toString(), \"standardBlameOutput.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        List\u003cString\u003e lines \u003d Files.readAllLines(gitBlameStandardOutputFile);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String text \u003d String.join(\"\\n\", lines);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String expected \u003d \"a79711ed676fd3a27af2f466be6d5b48177580e0 4 4\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                + \"author example\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        String filteredText \u003d StringsUtil.filterText(text, \"(^author .*)|(^[0-9a-f]{40} .*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertEquals(expected, filteredText);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void replaceSpecialSymbols_noSpecialSymbols_noChange() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        String noSpecialSymbolString \u003d \"Just A Normal String\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        String convertedString \u003d StringsUtil.replaceSpecialSymbols(noSpecialSymbolString, \".\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(noSpecialSymbolString, convertedString);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public void replaceSpecialSymbols_stringWithSpecialSymbolsToPeriod_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        String noSpecialSymbolString \u003d \"($t^!ng W!th $pec!@l Symbols)\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        String convertedString \u003d StringsUtil.replaceSpecialSymbols(noSpecialSymbolString, \".\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        String expectedConvertedString \u003d \"..t..ng W.th .pec..l Symbols.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        Assert.assertEquals(expectedConvertedString, convertedString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yamidark": 18,
      "eugenepeh": 31
    }
  },
  {
    "path": "src/test/java/reposense/util/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "package reposense.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yamidark"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.Author;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yong24s"
        },
        "content": "import reposense.model.RepoConfiguration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final String MESSAGE_COMPARING_FILES \u003d \"Comparing files %s \u0026 %s\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final String MESSAGE_LINE_CONTENT_DIFFERENT \u003d \"Content different at line number %d:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            + \"\u003c\u003c %s\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            + \"\u003e\u003e %s\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    private static final String MESSAGE_LINES_LENGTH_DIFFERENT \u003d \"The files\u0027 lines count do not match.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Returns true if the files\u0027 contents are the same."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Also prints out error message if the lines count are different,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * else prints out the first line of content difference (if any)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public static boolean compareFileContents(Path expected, Path actual) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return compareFileContents(expected, actual, 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Returns true if the files\u0027 contents are the same."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * Also prints out error message if the lines count are different,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     * else prints out maximum {@code maxTraceCounts} lines of content difference (if any)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public static boolean compareFileContents(Path expected, Path actual, int maxTraceCounts) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        int traceCounts \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        System.out.println(String.format(MESSAGE_COMPARING_FILES, expected, actual));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        String[] expectedContent \u003d new String(Files.readAllBytes(expected))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                .replace(\"\\r\", \"\").split(\"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        String[] actualContent \u003d new String(Files.readAllBytes(actual))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                .replace(\"\\r\", \"\").split(\"\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        for (int i \u003d 0; i \u003c Math.min(expectedContent.length, actualContent.length); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            if (!expectedContent[i].equals(actualContent[i])) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                System.out.println("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                        String.format(MESSAGE_LINE_CONTENT_DIFFERENT, i + 1, expectedContent[i], actualContent[i]));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                if (++traceCounts \u003e\u003d maxTraceCounts) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        if (expectedContent.length !\u003d actualContent.length) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            System.out.println(MESSAGE_LINES_LENGTH_DIFFERENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        } else if (traceCounts \u003e\u003d maxTraceCounts) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     * Returns true if {@code expected} directory has all files with same content as {@code actual} directory."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    public static boolean compareDirectories(Path expected, Path actual) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        List\u003cPath\u003e expectedPaths \u003d Files.walk(expected)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                .sorted()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        List\u003cPath\u003e actualPaths \u003d Files.walk(actual)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                .sorted()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        if (expectedPaths.size() !\u003d actualPaths.size()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedPaths.size(); i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            if (!(Files.isDirectory(expectedPaths.get(i)) || Files.isDirectory(actualPaths.get(i)))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                    \u0026\u0026 !TestUtil.compareFileContents(expectedPaths.get(i), actualPaths.get(i))) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "AdityaA1998"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Creates and returns a {@code Date} object with the specified {@code year}, {@code month}, {@code day}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public static Date getDate(int year, int month, int date) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        return new Calendar"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .Builder()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .setDate(year, month, date)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .setTimeOfDay(0, 0, 0)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .build()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yong24s"
        },
        "content": "                .getTime();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Compares attributes of {@code expectedRepoConfig} and {@code actualRepoConfig}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * @throws AssertionError if any attributes fail equality check."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public static void compareRepoConfig(RepoConfiguration expectedRepoConfig, RepoConfiguration actualRepoConfig) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(expectedRepoConfig.getLocation(), actualRepoConfig.getLocation());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedRepoConfig.getBranch(), actualRepoConfig.getBranch());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedRepoConfig.getAuthorList(), actualRepoConfig.getAuthorList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedRepoConfig.getAuthorDisplayNameMap(), actualRepoConfig.getAuthorDisplayNameMap());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "        Assert.assertEquals("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "                expectedRepoConfig.getAuthorEmailsAndAliasesMap(), actualRepoConfig.getAuthorEmailsAndAliasesMap());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertEquals(expectedRepoConfig.getIgnoreGlobList(), actualRepoConfig.getIgnoreGlobList());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedRepoConfig.isStandaloneConfigIgnored(), actualRepoConfig.isStandaloneConfigIgnored());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(expectedRepoConfig.getIgnoreGlobList(), actualRepoConfig.getIgnoreGlobList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(expectedRepoConfig.getFormats(), actualRepoConfig.getFormats());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedRepoConfig.getAuthorList().size(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yong24s"
        },
        "content": "            compareAuthor(expectedRepoConfig.getAuthorList().get(i), actualRepoConfig.getAuthorList().get(i));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yong24s"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * Compares attributes of {@code expectedAuthor} and {@code actualAuthor}, with exception of it\u0027s display name."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * The display name is not compared as it varies with object construction."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * It is a transient value and it is not needed for object matching."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     * @throws AssertionError if any attributes fail equality check."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yong24s"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    public static void compareAuthor(Author expectedAuthor, Author actualAuthor) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(expectedAuthor.getGitId(), actualAuthor.getGitId());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(expectedAuthor.getIgnoreGlobList(), actualAuthor.getIgnoreGlobList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yong24s"
        },
        "content": "        Assert.assertEquals(expectedAuthor.getAuthorAliases(), actualAuthor.getAuthorAliases());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yong24s"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Returns true if the {@code expectedNumberCommits} is equal to the expected number of lines in"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * {@code gitLogResult}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public static boolean compareNumberExpectedCommitsToGitLogLines(int expectedNumberCommits, String gitLogResult) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        // if git log result is empty, then there are no commits"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        if (gitLogResult.isEmpty()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yamidark"
        },
        "content": "            return expectedNumberCommits \u003d\u003d 0;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        // each commit has 2 lines of info, and a blank line in between each"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return expectedNumberCommits * 3 - 1 \u003d\u003d gitLogResult.split(\"\\n\").length;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     * Returns true if the test environment is on Windows OS."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yamidark"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    public static boolean isWindows() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yamidark"
        },
        "content": "        return System.getProperty(\"os.name\").toLowerCase().contains(\"win\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yamidark"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yamidark"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eugenepeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "AdityaA1998": 26,
      "yamidark": 27,
      "yong24s": 49,
      "eugenepeh": 54,
      "-": 5
    }
  }
]
